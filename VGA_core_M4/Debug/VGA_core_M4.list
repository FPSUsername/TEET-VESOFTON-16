
VGA_core_M4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b44  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08003ccc  08003ccc  00013ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003f24  08003f24  00013f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003f28  08003f28  00013f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f8  20000000  08003f2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000201f8  2**0
                  CONTENTS
  7 .bss          00012da4  200001f8  200001f8  000201f8  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20012f9c  20012f9c  000201f8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000af79  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001caa  00000000  00000000  0002b1a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a08  00000000  00000000  0002ce50  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000900  00000000  00000000  0002d858  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000421d  00000000  00000000  0002e158  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003008  00000000  00000000  00032375  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003537d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003070  00000000  00000000  000353fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0003846c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001f8 	.word	0x200001f8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003cb4 	.word	0x08003cb4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001fc 	.word	0x200001fc
 80001c4:	08003cb4 	.word	0x08003cb4

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032a:	f1a4 0401 	sub.w	r4, r4, #1
 800032e:	d1e9      	bne.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f092 0f00 	teq	r2, #0
 80004d6:	bf14      	ite	ne
 80004d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	e720      	b.n	8000330 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_ul2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f04f 0500 	mov.w	r5, #0
 80004fe:	e00a      	b.n	8000516 <__aeabi_l2d+0x16>

08000500 <__aeabi_l2d>:
 8000500:	ea50 0201 	orrs.w	r2, r0, r1
 8000504:	bf08      	it	eq
 8000506:	4770      	bxeq	lr
 8000508:	b530      	push	{r4, r5, lr}
 800050a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050e:	d502      	bpl.n	8000516 <__aeabi_l2d+0x16>
 8000510:	4240      	negs	r0, r0
 8000512:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000516:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000522:	f43f aedc 	beq.w	80002de <__adddf3+0xe6>
 8000526:	f04f 0203 	mov.w	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053e:	f1c2 0320 	rsb	r3, r2, #32
 8000542:	fa00 fc03 	lsl.w	ip, r0, r3
 8000546:	fa20 f002 	lsr.w	r0, r0, r2
 800054a:	fa01 fe03 	lsl.w	lr, r1, r3
 800054e:	ea40 000e 	orr.w	r0, r0, lr
 8000552:	fa21 f102 	lsr.w	r1, r1, r2
 8000556:	4414      	add	r4, r2
 8000558:	e6c1      	b.n	80002de <__adddf3+0xe6>
 800055a:	bf00      	nop

0800055c <__aeabi_dmul>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000562:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000566:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056a:	bf1d      	ittte	ne
 800056c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000570:	ea94 0f0c 	teqne	r4, ip
 8000574:	ea95 0f0c 	teqne	r5, ip
 8000578:	f000 f8de 	bleq	8000738 <__aeabi_dmul+0x1dc>
 800057c:	442c      	add	r4, r5
 800057e:	ea81 0603 	eor.w	r6, r1, r3
 8000582:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000586:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058e:	bf18      	it	ne
 8000590:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800059c:	d038      	beq.n	8000610 <__aeabi_dmul+0xb4>
 800059e:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a2:	f04f 0500 	mov.w	r5, #0
 80005a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b2:	f04f 0600 	mov.w	r6, #0
 80005b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ba:	f09c 0f00 	teq	ip, #0
 80005be:	bf18      	it	ne
 80005c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d0:	d204      	bcs.n	80005dc <__aeabi_dmul+0x80>
 80005d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d6:	416d      	adcs	r5, r5
 80005d8:	eb46 0606 	adc.w	r6, r6, r6
 80005dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f4:	bf88      	it	hi
 80005f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fa:	d81e      	bhi.n	800063a <__aeabi_dmul+0xde>
 80005fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000614:	ea46 0101 	orr.w	r1, r6, r1
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	ea81 0103 	eor.w	r1, r1, r3
 8000620:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000624:	bfc2      	ittt	gt
 8000626:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062e:	bd70      	popgt	{r4, r5, r6, pc}
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f04f 0e00 	mov.w	lr, #0
 8000638:	3c01      	subs	r4, #1
 800063a:	f300 80ab 	bgt.w	8000794 <__aeabi_dmul+0x238>
 800063e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000642:	bfde      	ittt	le
 8000644:	2000      	movle	r0, #0
 8000646:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064a:	bd70      	pople	{r4, r5, r6, pc}
 800064c:	f1c4 0400 	rsb	r4, r4, #0
 8000650:	3c20      	subs	r4, #32
 8000652:	da35      	bge.n	80006c0 <__aeabi_dmul+0x164>
 8000654:	340c      	adds	r4, #12
 8000656:	dc1b      	bgt.n	8000690 <__aeabi_dmul+0x134>
 8000658:	f104 0414 	add.w	r4, r4, #20
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f305 	lsl.w	r3, r0, r5
 8000664:	fa20 f004 	lsr.w	r0, r0, r4
 8000668:	fa01 f205 	lsl.w	r2, r1, r5
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000678:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800067c:	fa21 f604 	lsr.w	r6, r1, r4
 8000680:	eb42 0106 	adc.w	r1, r2, r6
 8000684:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000688:	bf08      	it	eq
 800068a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f1c4 040c 	rsb	r4, r4, #12
 8000694:	f1c4 0520 	rsb	r5, r4, #32
 8000698:	fa00 f304 	lsl.w	r3, r0, r4
 800069c:	fa20 f005 	lsr.w	r0, r0, r5
 80006a0:	fa01 f204 	lsl.w	r2, r1, r4
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	f141 0100 	adc.w	r1, r1, #0
 80006b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b8:	bf08      	it	eq
 80006ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f205 	lsl.w	r2, r0, r5
 80006c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006cc:	fa20 f304 	lsr.w	r3, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea43 0302 	orr.w	r3, r3, r2
 80006d8:	fa21 f004 	lsr.w	r0, r1, r4
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	fa21 f204 	lsr.w	r2, r1, r4
 80006e4:	ea20 0002 	bic.w	r0, r0, r2
 80006e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f094 0f00 	teq	r4, #0
 80006fc:	d10f      	bne.n	800071e <__aeabi_dmul+0x1c2>
 80006fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000702:	0040      	lsls	r0, r0, #1
 8000704:	eb41 0101 	adc.w	r1, r1, r1
 8000708:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800070c:	bf08      	it	eq
 800070e:	3c01      	subeq	r4, #1
 8000710:	d0f7      	beq.n	8000702 <__aeabi_dmul+0x1a6>
 8000712:	ea41 0106 	orr.w	r1, r1, r6
 8000716:	f095 0f00 	teq	r5, #0
 800071a:	bf18      	it	ne
 800071c:	4770      	bxne	lr
 800071e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000722:	0052      	lsls	r2, r2, #1
 8000724:	eb43 0303 	adc.w	r3, r3, r3
 8000728:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800072c:	bf08      	it	eq
 800072e:	3d01      	subeq	r5, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1c6>
 8000732:	ea43 0306 	orr.w	r3, r3, r6
 8000736:	4770      	bx	lr
 8000738:	ea94 0f0c 	teq	r4, ip
 800073c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000740:	bf18      	it	ne
 8000742:	ea95 0f0c 	teqne	r5, ip
 8000746:	d00c      	beq.n	8000762 <__aeabi_dmul+0x206>
 8000748:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074c:	bf18      	it	ne
 800074e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000752:	d1d1      	bne.n	80006f8 <__aeabi_dmul+0x19c>
 8000754:	ea81 0103 	eor.w	r1, r1, r3
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	f04f 0000 	mov.w	r0, #0
 8000760:	bd70      	pop	{r4, r5, r6, pc}
 8000762:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000766:	bf06      	itte	eq
 8000768:	4610      	moveq	r0, r2
 800076a:	4619      	moveq	r1, r3
 800076c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000770:	d019      	beq.n	80007a6 <__aeabi_dmul+0x24a>
 8000772:	ea94 0f0c 	teq	r4, ip
 8000776:	d102      	bne.n	800077e <__aeabi_dmul+0x222>
 8000778:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800077c:	d113      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 800077e:	ea95 0f0c 	teq	r5, ip
 8000782:	d105      	bne.n	8000790 <__aeabi_dmul+0x234>
 8000784:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000788:	bf1c      	itt	ne
 800078a:	4610      	movne	r0, r2
 800078c:	4619      	movne	r1, r3
 800078e:	d10a      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ae:	bd70      	pop	{r4, r5, r6, pc}

080007b0 <__aeabi_ddiv>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007be:	bf1d      	ittte	ne
 80007c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c4:	ea94 0f0c 	teqne	r4, ip
 80007c8:	ea95 0f0c 	teqne	r5, ip
 80007cc:	f000 f8a7 	bleq	800091e <__aeabi_ddiv+0x16e>
 80007d0:	eba4 0405 	sub.w	r4, r4, r5
 80007d4:	ea81 0e03 	eor.w	lr, r1, r3
 80007d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e0:	f000 8088 	beq.w	80008f4 <__aeabi_ddiv+0x144>
 80007e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000800:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000804:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000808:	429d      	cmp	r5, r3
 800080a:	bf08      	it	eq
 800080c:	4296      	cmpeq	r6, r2
 800080e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000812:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000816:	d202      	bcs.n	800081e <__aeabi_ddiv+0x6e>
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	1ab6      	subs	r6, r6, r2
 8000820:	eb65 0503 	sbc.w	r5, r5, r3
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 000c 	orrcs.w	r0, r0, ip
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800088c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000890:	d018      	beq.n	80008c4 <__aeabi_ddiv+0x114>
 8000892:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000896:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ae:	d1c0      	bne.n	8000832 <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	d10b      	bne.n	80008ce <__aeabi_ddiv+0x11e>
 80008b6:	ea41 0100 	orr.w	r1, r1, r0
 80008ba:	f04f 0000 	mov.w	r0, #0
 80008be:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c2:	e7b6      	b.n	8000832 <__aeabi_ddiv+0x82>
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	bf04      	itt	eq
 80008ca:	4301      	orreq	r1, r0
 80008cc:	2000      	moveq	r0, #0
 80008ce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d2:	bf88      	it	hi
 80008d4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d8:	f63f aeaf 	bhi.w	800063a <__aeabi_dmul+0xde>
 80008dc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e0:	bf04      	itt	eq
 80008e2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ea:	f150 0000 	adcs.w	r0, r0, #0
 80008ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	pop	{r4, r5, r6, pc}
 80008f4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000900:	bfc2      	ittt	gt
 8000902:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000906:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090a:	bd70      	popgt	{r4, r5, r6, pc}
 800090c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000910:	f04f 0e00 	mov.w	lr, #0
 8000914:	3c01      	subs	r4, #1
 8000916:	e690      	b.n	800063a <__aeabi_dmul+0xde>
 8000918:	ea45 0e06 	orr.w	lr, r5, r6
 800091c:	e68d      	b.n	800063a <__aeabi_dmul+0xde>
 800091e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000922:	ea94 0f0c 	teq	r4, ip
 8000926:	bf08      	it	eq
 8000928:	ea95 0f0c 	teqeq	r5, ip
 800092c:	f43f af3b 	beq.w	80007a6 <__aeabi_dmul+0x24a>
 8000930:	ea94 0f0c 	teq	r4, ip
 8000934:	d10a      	bne.n	800094c <__aeabi_ddiv+0x19c>
 8000936:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093a:	f47f af34 	bne.w	80007a6 <__aeabi_dmul+0x24a>
 800093e:	ea95 0f0c 	teq	r5, ip
 8000942:	f47f af25 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e72c      	b.n	80007a6 <__aeabi_dmul+0x24a>
 800094c:	ea95 0f0c 	teq	r5, ip
 8000950:	d106      	bne.n	8000960 <__aeabi_ddiv+0x1b0>
 8000952:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000956:	f43f aefd 	beq.w	8000754 <__aeabi_dmul+0x1f8>
 800095a:	4610      	mov	r0, r2
 800095c:	4619      	mov	r1, r3
 800095e:	e722      	b.n	80007a6 <__aeabi_dmul+0x24a>
 8000960:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096a:	f47f aec5 	bne.w	80006f8 <__aeabi_dmul+0x19c>
 800096e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000972:	f47f af0d 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000976:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097a:	f47f aeeb 	bne.w	8000754 <__aeabi_dmul+0x1f8>
 800097e:	e712      	b.n	80007a6 <__aeabi_dmul+0x24a>

08000980 <__gedf2>:
 8000980:	f04f 3cff 	mov.w	ip, #4294967295
 8000984:	e006      	b.n	8000994 <__cmpdf2+0x4>
 8000986:	bf00      	nop

08000988 <__ledf2>:
 8000988:	f04f 0c01 	mov.w	ip, #1
 800098c:	e002      	b.n	8000994 <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__cmpdf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000998:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	bf18      	it	ne
 80009a6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009aa:	d01b      	beq.n	80009e4 <__cmpdf2+0x54>
 80009ac:	b001      	add	sp, #4
 80009ae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b2:	bf0c      	ite	eq
 80009b4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b8:	ea91 0f03 	teqne	r1, r3
 80009bc:	bf02      	ittt	eq
 80009be:	ea90 0f02 	teqeq	r0, r2
 80009c2:	2000      	moveq	r0, #0
 80009c4:	4770      	bxeq	lr
 80009c6:	f110 0f00 	cmn.w	r0, #0
 80009ca:	ea91 0f03 	teq	r1, r3
 80009ce:	bf58      	it	pl
 80009d0:	4299      	cmppl	r1, r3
 80009d2:	bf08      	it	eq
 80009d4:	4290      	cmpeq	r0, r2
 80009d6:	bf2c      	ite	cs
 80009d8:	17d8      	asrcs	r0, r3, #31
 80009da:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009de:	f040 0001 	orr.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	d102      	bne.n	80009f4 <__cmpdf2+0x64>
 80009ee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f2:	d107      	bne.n	8000a04 <__cmpdf2+0x74>
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	d1d6      	bne.n	80009ac <__cmpdf2+0x1c>
 80009fe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a02:	d0d3      	beq.n	80009ac <__cmpdf2+0x1c>
 8000a04:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_cdrcmple>:
 8000a0c:	4684      	mov	ip, r0
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4662      	mov	r2, ip
 8000a12:	468c      	mov	ip, r1
 8000a14:	4619      	mov	r1, r3
 8000a16:	4663      	mov	r3, ip
 8000a18:	e000      	b.n	8000a1c <__aeabi_cdcmpeq>
 8000a1a:	bf00      	nop

08000a1c <__aeabi_cdcmpeq>:
 8000a1c:	b501      	push	{r0, lr}
 8000a1e:	f7ff ffb7 	bl	8000990 <__cmpdf2>
 8000a22:	2800      	cmp	r0, #0
 8000a24:	bf48      	it	mi
 8000a26:	f110 0f00 	cmnmi.w	r0, #0
 8000a2a:	bd01      	pop	{r0, pc}

08000a2c <__aeabi_dcmpeq>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff fff4 	bl	8000a1c <__aeabi_cdcmpeq>
 8000a34:	bf0c      	ite	eq
 8000a36:	2001      	moveq	r0, #1
 8000a38:	2000      	movne	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmplt>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffea 	bl	8000a1c <__aeabi_cdcmpeq>
 8000a48:	bf34      	ite	cc
 8000a4a:	2001      	movcc	r0, #1
 8000a4c:	2000      	movcs	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmple>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffe0 	bl	8000a1c <__aeabi_cdcmpeq>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpge>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffce 	bl	8000a0c <__aeabi_cdrcmple>
 8000a70:	bf94      	ite	ls
 8000a72:	2001      	movls	r0, #1
 8000a74:	2000      	movhi	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpgt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffc4 	bl	8000a0c <__aeabi_cdrcmple>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmpun>:
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__aeabi_dcmpun+0x10>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d10a      	bne.n	8000ab6 <__aeabi_dcmpun+0x26>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__aeabi_dcmpun+0x20>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d102      	bne.n	8000ab6 <__aeabi_dcmpun+0x26>
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	f04f 0001 	mov.w	r0, #1
 8000aba:	4770      	bx	lr

08000abc <__aeabi_d2uiz>:
 8000abc:	004a      	lsls	r2, r1, #1
 8000abe:	d211      	bcs.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac4:	d211      	bcs.n	8000aea <__aeabi_d2uiz+0x2e>
 8000ac6:	d50d      	bpl.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000acc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad0:	d40e      	bmi.n	8000af0 <__aeabi_d2uiz+0x34>
 8000ad2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ada:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d102      	bne.n	8000af6 <__aeabi_d2uiz+0x3a>
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	4770      	bx	lr
 8000af6:	f04f 0000 	mov.w	r0, #0
 8000afa:	4770      	bx	lr

08000afc <__aeabi_d2f>:
 8000afc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b04:	bf24      	itt	cs
 8000b06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0e:	d90d      	bls.n	8000b2c <__aeabi_d2f+0x30>
 8000b10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b24:	bf08      	it	eq
 8000b26:	f020 0001 	biceq.w	r0, r0, #1
 8000b2a:	4770      	bx	lr
 8000b2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b30:	d121      	bne.n	8000b76 <__aeabi_d2f+0x7a>
 8000b32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b36:	bfbc      	itt	lt
 8000b38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b3c:	4770      	bxlt	lr
 8000b3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b46:	f1c2 0218 	rsb	r2, r2, #24
 8000b4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b52:	fa20 f002 	lsr.w	r0, r0, r2
 8000b56:	bf18      	it	ne
 8000b58:	f040 0001 	orrne.w	r0, r0, #1
 8000b5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b68:	ea40 000c 	orr.w	r0, r0, ip
 8000b6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b74:	e7cc      	b.n	8000b10 <__aeabi_d2f+0x14>
 8000b76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7a:	d107      	bne.n	8000b8c <__aeabi_d2f+0x90>
 8000b7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b80:	bf1e      	ittt	ne
 8000b82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8a:	4770      	bxne	lr
 8000b8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	73fb      	strb	r3, [r7, #15]
 8000ba8:	2300      	movs	r3, #0
 8000baa:	73bb      	strb	r3, [r7, #14]
 8000bac:	230f      	movs	r3, #15
 8000bae:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	78db      	ldrb	r3, [r3, #3]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d039      	beq.n	8000c2c <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000bb8:	4b27      	ldr	r3, [pc, #156]	; (8000c58 <NVIC_Init+0xbc>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	0a1b      	lsrs	r3, r3, #8
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000bc8:	7bfb      	ldrb	r3, [r7, #15]
 8000bca:	f1c3 0304 	rsb	r3, r3, #4
 8000bce:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000bd0:	7b7a      	ldrb	r2, [r7, #13]
 8000bd2:	7bfb      	ldrb	r3, [r7, #15]
 8000bd4:	fa42 f303 	asr.w	r3, r2, r3
 8000bd8:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	785b      	ldrb	r3, [r3, #1]
 8000bde:	461a      	mov	r2, r3
 8000be0:	7bbb      	ldrb	r3, [r7, #14]
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	789a      	ldrb	r2, [r3, #2]
 8000bec:	7b7b      	ldrb	r3, [r7, #13]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	7bfb      	ldrb	r3, [r7, #15]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000bf8:	7bfb      	ldrb	r3, [r7, #15]
 8000bfa:	011b      	lsls	r3, r3, #4
 8000bfc:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000bfe:	4a17      	ldr	r2, [pc, #92]	; (8000c5c <NVIC_Init+0xc0>)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	4413      	add	r3, r2
 8000c06:	7bfa      	ldrb	r2, [r7, #15]
 8000c08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000c0c:	4a13      	ldr	r2, [pc, #76]	; (8000c5c <NVIC_Init+0xc0>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	095b      	lsrs	r3, r3, #5
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	f003 031f 	and.w	r3, r3, #31
 8000c20:	2101      	movs	r1, #1
 8000c22:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000c26:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000c2a:	e00f      	b.n	8000c4c <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000c2c:	490b      	ldr	r1, [pc, #44]	; (8000c5c <NVIC_Init+0xc0>)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	095b      	lsrs	r3, r3, #5
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	f003 031f 	and.w	r3, r3, #31
 8000c40:	2201      	movs	r2, #1
 8000c42:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000c44:	f100 0320 	add.w	r3, r0, #32
 8000c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c4c:	bf00      	nop
 8000c4e:	3714      	adds	r7, #20
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000ed00 	.word	0xe000ed00
 8000c5c:	e000e100 	.word	0xe000e100

08000c60 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f023 0201 	bic.w	r2, r3, #1
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2200      	movs	r2, #0
 8000c8a:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2221      	movs	r2, #33	; 0x21
 8000c96:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4a46      	ldr	r2, [pc, #280]	; (8000db4 <DMA_DeInit+0x154>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d103      	bne.n	8000ca8 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8000ca0:	4b45      	ldr	r3, [pc, #276]	; (8000db8 <DMA_DeInit+0x158>)
 8000ca2:	223d      	movs	r2, #61	; 0x3d
 8000ca4:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000ca6:	e07e      	b.n	8000da6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4a44      	ldr	r2, [pc, #272]	; (8000dbc <DMA_DeInit+0x15c>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d104      	bne.n	8000cba <DMA_DeInit+0x5a>
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8000cb0:	4b41      	ldr	r3, [pc, #260]	; (8000db8 <DMA_DeInit+0x158>)
 8000cb2:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8000cb6:	609a      	str	r2, [r3, #8]
}
 8000cb8:	e075      	b.n	8000da6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a40      	ldr	r2, [pc, #256]	; (8000dc0 <DMA_DeInit+0x160>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d104      	bne.n	8000ccc <DMA_DeInit+0x6c>
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8000cc2:	4b3d      	ldr	r3, [pc, #244]	; (8000db8 <DMA_DeInit+0x158>)
 8000cc4:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8000cc8:	609a      	str	r2, [r3, #8]
}
 8000cca:	e06c      	b.n	8000da6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a3d      	ldr	r2, [pc, #244]	; (8000dc4 <DMA_DeInit+0x164>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d104      	bne.n	8000cde <DMA_DeInit+0x7e>
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8000cd4:	4b38      	ldr	r3, [pc, #224]	; (8000db8 <DMA_DeInit+0x158>)
 8000cd6:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8000cda:	609a      	str	r2, [r3, #8]
}
 8000cdc:	e063      	b.n	8000da6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a39      	ldr	r2, [pc, #228]	; (8000dc8 <DMA_DeInit+0x168>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d103      	bne.n	8000cee <DMA_DeInit+0x8e>
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8000ce6:	4b34      	ldr	r3, [pc, #208]	; (8000db8 <DMA_DeInit+0x158>)
 8000ce8:	4a38      	ldr	r2, [pc, #224]	; (8000dcc <DMA_DeInit+0x16c>)
 8000cea:	60da      	str	r2, [r3, #12]
}
 8000cec:	e05b      	b.n	8000da6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a37      	ldr	r2, [pc, #220]	; (8000dd0 <DMA_DeInit+0x170>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d103      	bne.n	8000cfe <DMA_DeInit+0x9e>
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8000cf6:	4b30      	ldr	r3, [pc, #192]	; (8000db8 <DMA_DeInit+0x158>)
 8000cf8:	4a36      	ldr	r2, [pc, #216]	; (8000dd4 <DMA_DeInit+0x174>)
 8000cfa:	60da      	str	r2, [r3, #12]
}
 8000cfc:	e053      	b.n	8000da6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a35      	ldr	r2, [pc, #212]	; (8000dd8 <DMA_DeInit+0x178>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d103      	bne.n	8000d0e <DMA_DeInit+0xae>
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8000d06:	4b2c      	ldr	r3, [pc, #176]	; (8000db8 <DMA_DeInit+0x158>)
 8000d08:	4a34      	ldr	r2, [pc, #208]	; (8000ddc <DMA_DeInit+0x17c>)
 8000d0a:	60da      	str	r2, [r3, #12]
}
 8000d0c:	e04b      	b.n	8000da6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a33      	ldr	r2, [pc, #204]	; (8000de0 <DMA_DeInit+0x180>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d104      	bne.n	8000d20 <DMA_DeInit+0xc0>
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8000d16:	4b28      	ldr	r3, [pc, #160]	; (8000db8 <DMA_DeInit+0x158>)
 8000d18:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8000d1c:	60da      	str	r2, [r3, #12]
}
 8000d1e:	e042      	b.n	8000da6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a30      	ldr	r2, [pc, #192]	; (8000de4 <DMA_DeInit+0x184>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d103      	bne.n	8000d30 <DMA_DeInit+0xd0>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8000d28:	4b2f      	ldr	r3, [pc, #188]	; (8000de8 <DMA_DeInit+0x188>)
 8000d2a:	223d      	movs	r2, #61	; 0x3d
 8000d2c:	609a      	str	r2, [r3, #8]
}
 8000d2e:	e03a      	b.n	8000da6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a2e      	ldr	r2, [pc, #184]	; (8000dec <DMA_DeInit+0x18c>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d104      	bne.n	8000d42 <DMA_DeInit+0xe2>
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8000d38:	4b2b      	ldr	r3, [pc, #172]	; (8000de8 <DMA_DeInit+0x188>)
 8000d3a:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8000d3e:	609a      	str	r2, [r3, #8]
}
 8000d40:	e031      	b.n	8000da6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a2a      	ldr	r2, [pc, #168]	; (8000df0 <DMA_DeInit+0x190>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d104      	bne.n	8000d54 <DMA_DeInit+0xf4>
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8000d4a:	4b27      	ldr	r3, [pc, #156]	; (8000de8 <DMA_DeInit+0x188>)
 8000d4c:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8000d50:	609a      	str	r2, [r3, #8]
}
 8000d52:	e028      	b.n	8000da6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a27      	ldr	r2, [pc, #156]	; (8000df4 <DMA_DeInit+0x194>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d104      	bne.n	8000d66 <DMA_DeInit+0x106>
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8000d5c:	4b22      	ldr	r3, [pc, #136]	; (8000de8 <DMA_DeInit+0x188>)
 8000d5e:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8000d62:	609a      	str	r2, [r3, #8]
}
 8000d64:	e01f      	b.n	8000da6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a23      	ldr	r2, [pc, #140]	; (8000df8 <DMA_DeInit+0x198>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d103      	bne.n	8000d76 <DMA_DeInit+0x116>
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8000d6e:	4b1e      	ldr	r3, [pc, #120]	; (8000de8 <DMA_DeInit+0x188>)
 8000d70:	4a16      	ldr	r2, [pc, #88]	; (8000dcc <DMA_DeInit+0x16c>)
 8000d72:	60da      	str	r2, [r3, #12]
}
 8000d74:	e017      	b.n	8000da6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a20      	ldr	r2, [pc, #128]	; (8000dfc <DMA_DeInit+0x19c>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d103      	bne.n	8000d86 <DMA_DeInit+0x126>
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8000d7e:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <DMA_DeInit+0x188>)
 8000d80:	4a14      	ldr	r2, [pc, #80]	; (8000dd4 <DMA_DeInit+0x174>)
 8000d82:	60da      	str	r2, [r3, #12]
}
 8000d84:	e00f      	b.n	8000da6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream6)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a1d      	ldr	r2, [pc, #116]	; (8000e00 <DMA_DeInit+0x1a0>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d103      	bne.n	8000d96 <DMA_DeInit+0x136>
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8000d8e:	4b16      	ldr	r3, [pc, #88]	; (8000de8 <DMA_DeInit+0x188>)
 8000d90:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <DMA_DeInit+0x17c>)
 8000d92:	60da      	str	r2, [r3, #12]
}
 8000d94:	e007      	b.n	8000da6 <DMA_DeInit+0x146>
    if (DMAy_Streamx == DMA2_Stream7)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a1a      	ldr	r2, [pc, #104]	; (8000e04 <DMA_DeInit+0x1a4>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d103      	bne.n	8000da6 <DMA_DeInit+0x146>
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8000d9e:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <DMA_DeInit+0x188>)
 8000da0:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8000da4:	60da      	str	r2, [r3, #12]
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	40026010 	.word	0x40026010
 8000db8:	40026000 	.word	0x40026000
 8000dbc:	40026028 	.word	0x40026028
 8000dc0:	40026040 	.word	0x40026040
 8000dc4:	40026058 	.word	0x40026058
 8000dc8:	40026070 	.word	0x40026070
 8000dcc:	2000003d 	.word	0x2000003d
 8000dd0:	40026088 	.word	0x40026088
 8000dd4:	20000f40 	.word	0x20000f40
 8000dd8:	400260a0 	.word	0x400260a0
 8000ddc:	203d0000 	.word	0x203d0000
 8000de0:	400260b8 	.word	0x400260b8
 8000de4:	40026410 	.word	0x40026410
 8000de8:	40026400 	.word	0x40026400
 8000dec:	40026428 	.word	0x40026428
 8000df0:	40026440 	.word	0x40026440
 8000df4:	40026458 	.word	0x40026458
 8000df8:	40026470 	.word	0x40026470
 8000dfc:	40026488 	.word	0x40026488
 8000e00:	400264a0 	.word	0x400264a0
 8000e04:	400264b8 	.word	0x400264b8

08000e08 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000e1c:	68fa      	ldr	r2, [r7, #12]
 8000e1e:	4b25      	ldr	r3, [pc, #148]	; (8000eb4 <DMA_Init+0xac>)
 8000e20:	4013      	ands	r3, r2
 8000e22:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000e32:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000e3e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	6a1b      	ldr	r3, [r3, #32]
 8000e44:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000e4a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e50:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000e56:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e5c:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f023 0307 	bic.w	r3, r3, #7
 8000e76:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e80:	4313      	orrs	r3, r2
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	691a      	ldr	r2, [r3, #16]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685a      	ldr	r2, [r3, #4]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	689a      	ldr	r2, [r3, #8]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	60da      	str	r2, [r3, #12]
}
 8000ea6:	bf00      	nop
 8000ea8:	3714      	adds	r7, #20
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	f01c803f 	.word	0xf01c803f

08000eb8 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ec4:	78fb      	ldrb	r3, [r7, #3]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d006      	beq.n	8000ed8 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f043 0201 	orr.w	r2, r3, #1
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000ed6:	e005      	b.n	8000ee4 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f023 0201 	bic.w	r2, r3, #1
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	601a      	str	r2, [r3, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	4613      	mov	r3, r2
 8000efc:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d00f      	beq.n	8000f28 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d006      	beq.n	8000f1c <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	615a      	str	r2, [r3, #20]
 8000f1a:	e005      	b.n	8000f28 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	695b      	ldr	r3, [r3, #20]
 8000f20:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	2b80      	cmp	r3, #128	; 0x80
 8000f2c:	d014      	beq.n	8000f58 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d008      	beq.n	8000f46 <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	f003 031e 	and.w	r3, r3, #30
 8000f3e:	431a      	orrs	r2, r3
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 8000f44:	e008      	b.n	8000f58 <DMA_ITConfig+0x68>
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	f003 031e 	and.w	r3, r3, #30
 8000f50:	43db      	mvns	r3, r3
 8000f52:	401a      	ands	r2, r3
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	601a      	str	r2, [r3, #0]
}
 8000f58:	bf00      	nop
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b087      	sub	sp, #28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	2300      	movs	r3, #0
 8000f78:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a22      	ldr	r2, [pc, #136]	; (8001008 <DMA_GetITStatus+0xa4>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d802      	bhi.n	8000f88 <DMA_GetITStatus+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000f82:	4b22      	ldr	r3, [pc, #136]	; (800100c <DMA_GetITStatus+0xa8>)
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	e001      	b.n	8000f8c <DMA_GetITStatus+0x28>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000f88:	4b21      	ldr	r3, [pc, #132]	; (8001010 <DMA_GetITStatus+0xac>)
 8000f8a:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000f92:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d00a      	beq.n	8000fb0 <DMA_GetITStatus+0x4c>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	0adb      	lsrs	r3, r3, #11
 8000f9e:	f003 031e 	and.w	r3, r3, #30
 8000fa2:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4013      	ands	r3, r2
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	e004      	b.n	8000fba <DMA_GetITStatus+0x56>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	695b      	ldr	r3, [r3, #20]
 8000fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fb8:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d003      	beq.n	8000fcc <DMA_GetITStatus+0x68>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	e002      	b.n	8000fd2 <DMA_GetITStatus+0x6e>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000fd8:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000fdc:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d005      	beq.n	8000ff4 <DMA_GetITStatus+0x90>
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d002      	beq.n	8000ff4 <DMA_GetITStatus+0x90>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	75fb      	strb	r3, [r7, #23]
 8000ff2:	e001      	b.n	8000ff8 <DMA_GetITStatus+0x94>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 8000ff8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	371c      	adds	r7, #28
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	4002640f 	.word	0x4002640f
 800100c:	40026000 	.word	0x40026000
 8001010:	40026400 	.word	0x40026400

08001014 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a10      	ldr	r2, [pc, #64]	; (8001064 <DMA_ClearITPendingBit+0x50>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d802      	bhi.n	800102c <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <DMA_ClearITPendingBit+0x54>)
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	e001      	b.n	8001030 <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800102c:	4b0f      	ldr	r3, [pc, #60]	; (800106c <DMA_ClearITPendingBit+0x58>)
 800102e:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d007      	beq.n	800104a <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001040:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }   
}
 8001048:	e006      	b.n	8001058 <DMA_ClearITPendingBit+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001050:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001054:	68fa      	ldr	r2, [r7, #12]
 8001056:	6093      	str	r3, [r2, #8]
}
 8001058:	bf00      	nop
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	4002640f 	.word	0x4002640f
 8001068:	40026000 	.word	0x40026000
 800106c:	40026400 	.word	0x40026400

08001070 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001070:	b480      	push	{r7}
 8001072:	b087      	sub	sp, #28
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
 800108a:	e076      	b.n	800117a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800108c:	2201      	movs	r2, #1
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	4013      	ands	r3, r2
 800109e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80010a0:	68fa      	ldr	r2, [r7, #12]
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d165      	bne.n	8001174 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	2103      	movs	r1, #3
 80010b2:	fa01 f303 	lsl.w	r3, r1, r3
 80010b6:	43db      	mvns	r3, r3
 80010b8:	401a      	ands	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	791b      	ldrb	r3, [r3, #4]
 80010c6:	4619      	mov	r1, r3
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	fa01 f303 	lsl.w	r3, r1, r3
 80010d0:	431a      	orrs	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	791b      	ldrb	r3, [r3, #4]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d003      	beq.n	80010e6 <GPIO_Init+0x76>
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	791b      	ldrb	r3, [r3, #4]
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d12e      	bne.n	8001144 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	689a      	ldr	r2, [r3, #8]
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	2103      	movs	r1, #3
 80010f0:	fa01 f303 	lsl.w	r3, r1, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	401a      	ands	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	689a      	ldr	r2, [r3, #8]
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	795b      	ldrb	r3, [r3, #5]
 8001104:	4619      	mov	r1, r3
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	fa01 f303 	lsl.w	r3, r1, r3
 800110e:	431a      	orrs	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685a      	ldr	r2, [r3, #4]
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	b29b      	uxth	r3, r3
 800111c:	4619      	mov	r1, r3
 800111e:	2301      	movs	r3, #1
 8001120:	408b      	lsls	r3, r1
 8001122:	43db      	mvns	r3, r3
 8001124:	401a      	ands	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	683a      	ldr	r2, [r7, #0]
 8001130:	7992      	ldrb	r2, [r2, #6]
 8001132:	4611      	mov	r1, r2
 8001134:	697a      	ldr	r2, [r7, #20]
 8001136:	b292      	uxth	r2, r2
 8001138:	fa01 f202 	lsl.w	r2, r1, r2
 800113c:	b292      	uxth	r2, r2
 800113e:	431a      	orrs	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	68da      	ldr	r2, [r3, #12]
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	b29b      	uxth	r3, r3
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	2103      	movs	r1, #3
 8001150:	fa01 f303 	lsl.w	r3, r1, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	401a      	ands	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	68da      	ldr	r2, [r3, #12]
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	79db      	ldrb	r3, [r3, #7]
 8001164:	4619      	mov	r1, r3
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	fa01 f303 	lsl.w	r3, r1, r3
 800116e:	431a      	orrs	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	3301      	adds	r3, #1
 8001178:	617b      	str	r3, [r7, #20]
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	2b0f      	cmp	r3, #15
 800117e:	d985      	bls.n	800108c <GPIO_Init+0x1c>
    }
  }
}
 8001180:	bf00      	nop
 8001182:	371c      	adds	r7, #28
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8001198:	2300      	movs	r3, #0
 800119a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	691a      	ldr	r2, [r3, #16]
 80011a0:	887b      	ldrh	r3, [r7, #2]
 80011a2:	4013      	ands	r3, r2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d002      	beq.n	80011ae <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80011a8:	2301      	movs	r3, #1
 80011aa:	73fb      	strb	r3, [r7, #15]
 80011ac:	e001      	b.n	80011b2 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80011ae:	2300      	movs	r3, #0
 80011b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	887a      	ldrh	r2, [r7, #2]
 80011d0:	831a      	strh	r2, [r3, #24]
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011de:	b480      	push	{r7}
 80011e0:	b083      	sub	sp, #12
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
 80011e6:	460b      	mov	r3, r1
 80011e8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	887a      	ldrh	r2, [r7, #2]
 80011ee:	835a      	strh	r2, [r3, #26]
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	807b      	strh	r3, [r7, #2]
 8001208:	4613      	mov	r3, r2
 800120a:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8001210:	2300      	movs	r3, #0
 8001212:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001214:	787a      	ldrb	r2, [r7, #1]
 8001216:	887b      	ldrh	r3, [r7, #2]
 8001218:	f003 0307 	and.w	r3, r3, #7
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001224:	887b      	ldrh	r3, [r7, #2]
 8001226:	08db      	lsrs	r3, r3, #3
 8001228:	b29b      	uxth	r3, r3
 800122a:	4618      	mov	r0, r3
 800122c:	887b      	ldrh	r3, [r7, #2]
 800122e:	08db      	lsrs	r3, r3, #3
 8001230:	b29b      	uxth	r3, r3
 8001232:	461a      	mov	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3208      	adds	r2, #8
 8001238:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800123c:	887b      	ldrh	r3, [r7, #2]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	210f      	movs	r1, #15
 8001246:	fa01 f303 	lsl.w	r3, r1, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	ea02 0103 	and.w	r1, r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f100 0208 	add.w	r2, r0, #8
 8001256:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800125a:	887b      	ldrh	r3, [r7, #2]
 800125c:	08db      	lsrs	r3, r3, #3
 800125e:	b29b      	uxth	r3, r3
 8001260:	461a      	mov	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	3208      	adds	r2, #8
 8001266:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	4313      	orrs	r3, r2
 800126e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001270:	887b      	ldrh	r3, [r7, #2]
 8001272:	08db      	lsrs	r3, r3, #3
 8001274:	b29b      	uxth	r3, r3
 8001276:	461a      	mov	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3208      	adds	r2, #8
 800127c:	68b9      	ldr	r1, [r7, #8]
 800127e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001282:	bf00      	nop
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001290:	b480      	push	{r7}
 8001292:	b089      	sub	sp, #36	; 0x24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001298:	2300      	movs	r3, #0
 800129a:	61bb      	str	r3, [r7, #24]
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	2300      	movs	r3, #0
 80012a2:	61fb      	str	r3, [r7, #28]
 80012a4:	2302      	movs	r3, #2
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	2302      	movs	r3, #2
 80012ae:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80012b0:	4b47      	ldr	r3, [pc, #284]	; (80013d0 <RCC_GetClocksFreq+0x140>)
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f003 030c 	and.w	r3, r3, #12
 80012b8:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	2b04      	cmp	r3, #4
 80012be:	d007      	beq.n	80012d0 <RCC_GetClocksFreq+0x40>
 80012c0:	2b08      	cmp	r3, #8
 80012c2:	d009      	beq.n	80012d8 <RCC_GetClocksFreq+0x48>
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d13d      	bne.n	8001344 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a42      	ldr	r2, [pc, #264]	; (80013d4 <RCC_GetClocksFreq+0x144>)
 80012cc:	601a      	str	r2, [r3, #0]
      break;
 80012ce:	e03d      	b.n	800134c <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a41      	ldr	r2, [pc, #260]	; (80013d8 <RCC_GetClocksFreq+0x148>)
 80012d4:	601a      	str	r2, [r3, #0]
      break;
 80012d6:	e039      	b.n	800134c <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80012d8:	4b3d      	ldr	r3, [pc, #244]	; (80013d0 <RCC_GetClocksFreq+0x140>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	0d9b      	lsrs	r3, r3, #22
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012e4:	4b3a      	ldr	r3, [pc, #232]	; (80013d0 <RCC_GetClocksFreq+0x140>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012ec:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d00c      	beq.n	800130e <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80012f4:	4a38      	ldr	r2, [pc, #224]	; (80013d8 <RCC_GetClocksFreq+0x148>)
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fc:	4a34      	ldr	r2, [pc, #208]	; (80013d0 <RCC_GetClocksFreq+0x140>)
 80012fe:	6852      	ldr	r2, [r2, #4]
 8001300:	0992      	lsrs	r2, r2, #6
 8001302:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001306:	fb02 f303 	mul.w	r3, r2, r3
 800130a:	61fb      	str	r3, [r7, #28]
 800130c:	e00b      	b.n	8001326 <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800130e:	4a31      	ldr	r2, [pc, #196]	; (80013d4 <RCC_GetClocksFreq+0x144>)
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	fbb2 f3f3 	udiv	r3, r2, r3
 8001316:	4a2e      	ldr	r2, [pc, #184]	; (80013d0 <RCC_GetClocksFreq+0x140>)
 8001318:	6852      	ldr	r2, [r2, #4]
 800131a:	0992      	lsrs	r2, r2, #6
 800131c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001320:	fb02 f303 	mul.w	r3, r2, r3
 8001324:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001326:	4b2a      	ldr	r3, [pc, #168]	; (80013d0 <RCC_GetClocksFreq+0x140>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	0c1b      	lsrs	r3, r3, #16
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	3301      	adds	r3, #1
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001336:	69fa      	ldr	r2, [r7, #28]
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	fbb2 f2f3 	udiv	r2, r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	601a      	str	r2, [r3, #0]
      break;
 8001342:	e003      	b.n	800134c <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a23      	ldr	r2, [pc, #140]	; (80013d4 <RCC_GetClocksFreq+0x144>)
 8001348:	601a      	str	r2, [r3, #0]
      break;
 800134a:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800134c:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <RCC_GetClocksFreq+0x140>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001354:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	091b      	lsrs	r3, r3, #4
 800135a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800135c:	4a1f      	ldr	r2, [pc, #124]	; (80013dc <RCC_GetClocksFreq+0x14c>)
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	4413      	add	r3, r2
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	b2db      	uxtb	r3, r3
 8001366:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	40da      	lsrs	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001374:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <RCC_GetClocksFreq+0x140>)
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800137c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	0a9b      	lsrs	r3, r3, #10
 8001382:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001384:	4a15      	ldr	r2, [pc, #84]	; (80013dc <RCC_GetClocksFreq+0x14c>)
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	4413      	add	r3, r2
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	b2db      	uxtb	r3, r3
 800138e:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	40da      	lsrs	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800139c:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <RCC_GetClocksFreq+0x140>)
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80013a4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	0b5b      	lsrs	r3, r3, #13
 80013aa:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80013ac:	4a0b      	ldr	r2, [pc, #44]	; (80013dc <RCC_GetClocksFreq+0x14c>)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	4413      	add	r3, r2
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	40da      	lsrs	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	60da      	str	r2, [r3, #12]
}
 80013c4:	bf00      	nop
 80013c6:	3724      	adds	r7, #36	; 0x24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	40023800 	.word	0x40023800
 80013d4:	00f42400 	.word	0x00f42400
 80013d8:	007a1200 	.word	0x007a1200
 80013dc:	20000000 	.word	0x20000000

080013e0 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80013ec:	78fb      	ldrb	r3, [r7, #3]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d006      	beq.n	8001400 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80013f2:	490a      	ldr	r1, [pc, #40]	; (800141c <RCC_AHB1PeriphClockCmd+0x3c>)
 80013f4:	4b09      	ldr	r3, [pc, #36]	; (800141c <RCC_AHB1PeriphClockCmd+0x3c>)
 80013f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80013fe:	e006      	b.n	800140e <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001400:	4906      	ldr	r1, [pc, #24]	; (800141c <RCC_AHB1PeriphClockCmd+0x3c>)
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <RCC_AHB1PeriphClockCmd+0x3c>)
 8001404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	43db      	mvns	r3, r3
 800140a:	4013      	ands	r3, r2
 800140c:	630b      	str	r3, [r1, #48]	; 0x30
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800

08001420 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800142c:	78fb      	ldrb	r3, [r7, #3]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d006      	beq.n	8001440 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001432:	490a      	ldr	r1, [pc, #40]	; (800145c <RCC_APB1PeriphClockCmd+0x3c>)
 8001434:	4b09      	ldr	r3, [pc, #36]	; (800145c <RCC_APB1PeriphClockCmd+0x3c>)
 8001436:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4313      	orrs	r3, r2
 800143c:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800143e:	e006      	b.n	800144e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001440:	4906      	ldr	r1, [pc, #24]	; (800145c <RCC_APB1PeriphClockCmd+0x3c>)
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <RCC_APB1PeriphClockCmd+0x3c>)
 8001444:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	43db      	mvns	r3, r3
 800144a:	4013      	ands	r3, r2
 800144c:	640b      	str	r3, [r1, #64]	; 0x40
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800

08001460 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800146c:	78fb      	ldrb	r3, [r7, #3]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d006      	beq.n	8001480 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001472:	490a      	ldr	r1, [pc, #40]	; (800149c <RCC_APB2PeriphClockCmd+0x3c>)
 8001474:	4b09      	ldr	r3, [pc, #36]	; (800149c <RCC_APB2PeriphClockCmd+0x3c>)
 8001476:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4313      	orrs	r3, r2
 800147c:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800147e:	e006      	b.n	800148e <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001480:	4906      	ldr	r1, [pc, #24]	; (800149c <RCC_APB2PeriphClockCmd+0x3c>)
 8001482:	4b06      	ldr	r3, [pc, #24]	; (800149c <RCC_APB2PeriphClockCmd+0x3c>)
 8001484:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	43db      	mvns	r3, r3
 800148a:	4013      	ands	r3, r2
 800148c:	644b      	str	r3, [r1, #68]	; 0x44
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40023800 	.word	0x40023800

080014a0 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4a29      	ldr	r2, [pc, #164]	; (800155c <TIM_TimeBaseInit+0xbc>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d013      	beq.n	80014e4 <TIM_TimeBaseInit+0x44>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4a28      	ldr	r2, [pc, #160]	; (8001560 <TIM_TimeBaseInit+0xc0>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d00f      	beq.n	80014e4 <TIM_TimeBaseInit+0x44>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014ca:	d00b      	beq.n	80014e4 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4a25      	ldr	r2, [pc, #148]	; (8001564 <TIM_TimeBaseInit+0xc4>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d007      	beq.n	80014e4 <TIM_TimeBaseInit+0x44>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a24      	ldr	r2, [pc, #144]	; (8001568 <TIM_TimeBaseInit+0xc8>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d003      	beq.n	80014e4 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a23      	ldr	r2, [pc, #140]	; (800156c <TIM_TimeBaseInit+0xcc>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d108      	bne.n	80014f6 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80014e4:	89fb      	ldrh	r3, [r7, #14]
 80014e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014ea:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	885a      	ldrh	r2, [r3, #2]
 80014f0:	89fb      	ldrh	r3, [r7, #14]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a1d      	ldr	r2, [pc, #116]	; (8001570 <TIM_TimeBaseInit+0xd0>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d00c      	beq.n	8001518 <TIM_TimeBaseInit+0x78>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a1c      	ldr	r2, [pc, #112]	; (8001574 <TIM_TimeBaseInit+0xd4>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d008      	beq.n	8001518 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8001506:	89fb      	ldrh	r3, [r7, #14]
 8001508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800150c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	891a      	ldrh	r2, [r3, #8]
 8001512:	89fb      	ldrh	r3, [r7, #14]
 8001514:	4313      	orrs	r3, r2
 8001516:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	89fa      	ldrh	r2, [r7, #14]
 800151c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	881a      	ldrh	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a0a      	ldr	r2, [pc, #40]	; (800155c <TIM_TimeBaseInit+0xbc>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d003      	beq.n	800153e <TIM_TimeBaseInit+0x9e>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a09      	ldr	r2, [pc, #36]	; (8001560 <TIM_TimeBaseInit+0xc0>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d104      	bne.n	8001548 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	7a9b      	ldrb	r3, [r3, #10]
 8001542:	b29a      	uxth	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2201      	movs	r2, #1
 800154c:	829a      	strh	r2, [r3, #20]
}
 800154e:	bf00      	nop
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	40010000 	.word	0x40010000
 8001560:	40010400 	.word	0x40010400
 8001564:	40000400 	.word	0x40000400
 8001568:	40000800 	.word	0x40000800
 800156c:	40000c00 	.word	0x40000c00
 8001570:	40001000 	.word	0x40001000
 8001574:	40001400 	.word	0x40001400

08001578 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001584:	78fb      	ldrb	r3, [r7, #3]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d008      	beq.n	800159c <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	881b      	ldrh	r3, [r3, #0]
 800158e:	b29b      	uxth	r3, r3
 8001590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001594:	b29a      	uxth	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
  }
}
 800159a:	e007      	b.n	80015ac <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	801a      	strh	r2, [r3, #0]
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80015c4:	78fb      	ldrb	r3, [r7, #3]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d008      	beq.n	80015dc <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	881b      	ldrh	r3, [r3, #0]
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 80015da:	e007      	b.n	80015ec <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	f023 0301 	bic.w	r3, r3, #1
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	801a      	strh	r2, [r3, #0]
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	817b      	strh	r3, [r7, #10]
 8001606:	2300      	movs	r3, #0
 8001608:	81fb      	strh	r3, [r7, #14]
 800160a:	2300      	movs	r3, #0
 800160c:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	8c1b      	ldrh	r3, [r3, #32]
 8001612:	b29b      	uxth	r3, r3
 8001614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001618:	b29a      	uxth	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	8c1b      	ldrh	r3, [r3, #32]
 8001622:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	889b      	ldrh	r3, [r3, #4]
 8001628:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	8b9b      	ldrh	r3, [r3, #28]
 800162e:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 8001630:	897b      	ldrh	r3, [r7, #10]
 8001632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001636:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8001638:	897b      	ldrh	r3, [r7, #10]
 800163a:	f023 0303 	bic.w	r3, r3, #3
 800163e:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	881a      	ldrh	r2, [r3, #0]
 8001644:	897b      	ldrh	r3, [r7, #10]
 8001646:	4313      	orrs	r3, r2
 8001648:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 800164a:	89fb      	ldrh	r3, [r7, #14]
 800164c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001650:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	899b      	ldrh	r3, [r3, #12]
 8001656:	021b      	lsls	r3, r3, #8
 8001658:	b29a      	uxth	r2, r3
 800165a:	89fb      	ldrh	r3, [r7, #14]
 800165c:	4313      	orrs	r3, r2
 800165e:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	885b      	ldrh	r3, [r3, #2]
 8001664:	021b      	lsls	r3, r3, #8
 8001666:	b29a      	uxth	r2, r3
 8001668:	89fb      	ldrh	r3, [r7, #14]
 800166a:	4313      	orrs	r3, r2
 800166c:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a22      	ldr	r2, [pc, #136]	; (80016fc <TIM_OC3Init+0x104>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d003      	beq.n	800167e <TIM_OC3Init+0x86>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a21      	ldr	r2, [pc, #132]	; (8001700 <TIM_OC3Init+0x108>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d12b      	bne.n	80016d6 <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 800167e:	89fb      	ldrh	r3, [r7, #14]
 8001680:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001684:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	89db      	ldrh	r3, [r3, #14]
 800168a:	021b      	lsls	r3, r3, #8
 800168c:	b29a      	uxth	r2, r3
 800168e:	89fb      	ldrh	r3, [r7, #14]
 8001690:	4313      	orrs	r3, r2
 8001692:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8001694:	89fb      	ldrh	r3, [r7, #14]
 8001696:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800169a:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	889b      	ldrh	r3, [r3, #4]
 80016a0:	021b      	lsls	r3, r3, #8
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	89fb      	ldrh	r3, [r7, #14]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 80016aa:	89bb      	ldrh	r3, [r7, #12]
 80016ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016b0:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 80016b2:	89bb      	ldrh	r3, [r7, #12]
 80016b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80016b8:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	8a1b      	ldrh	r3, [r3, #16]
 80016be:	011b      	lsls	r3, r3, #4
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	89bb      	ldrh	r3, [r7, #12]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	8a5b      	ldrh	r3, [r3, #18]
 80016cc:	011b      	lsls	r3, r3, #4
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	89bb      	ldrh	r3, [r7, #12]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	89ba      	ldrh	r2, [r7, #12]
 80016da:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	897a      	ldrh	r2, [r7, #10]
 80016e0:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	89fa      	ldrh	r2, [r7, #14]
 80016ee:	841a      	strh	r2, [r3, #32]
}
 80016f0:	bf00      	nop
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	40010000 	.word	0x40010000
 8001700:	40010400 	.word	0x40010400

08001704 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	81bb      	strh	r3, [r7, #12]
 8001712:	2300      	movs	r3, #0
 8001714:	817b      	strh	r3, [r7, #10]
 8001716:	2300      	movs	r3, #0
 8001718:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	8c1b      	ldrh	r3, [r3, #32]
 800171e:	b29b      	uxth	r3, r3
 8001720:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001724:	b29a      	uxth	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	8c1b      	ldrh	r3, [r3, #32]
 800172e:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	889b      	ldrh	r3, [r3, #4]
 8001734:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	8b9b      	ldrh	r3, [r3, #28]
 800173a:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 800173c:	89bb      	ldrh	r3, [r7, #12]
 800173e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001742:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8001744:	89bb      	ldrh	r3, [r7, #12]
 8001746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800174a:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	881b      	ldrh	r3, [r3, #0]
 8001750:	021b      	lsls	r3, r3, #8
 8001752:	b29a      	uxth	r2, r3
 8001754:	89bb      	ldrh	r3, [r7, #12]
 8001756:	4313      	orrs	r3, r2
 8001758:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800175a:	897b      	ldrh	r3, [r7, #10]
 800175c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001760:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	899b      	ldrh	r3, [r3, #12]
 8001766:	031b      	lsls	r3, r3, #12
 8001768:	b29a      	uxth	r2, r3
 800176a:	897b      	ldrh	r3, [r7, #10]
 800176c:	4313      	orrs	r3, r2
 800176e:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	885b      	ldrh	r3, [r3, #2]
 8001774:	031b      	lsls	r3, r3, #12
 8001776:	b29a      	uxth	r2, r3
 8001778:	897b      	ldrh	r3, [r7, #10]
 800177a:	4313      	orrs	r3, r2
 800177c:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a12      	ldr	r2, [pc, #72]	; (80017cc <TIM_OC4Init+0xc8>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d003      	beq.n	800178e <TIM_OC4Init+0x8a>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a11      	ldr	r2, [pc, #68]	; (80017d0 <TIM_OC4Init+0xcc>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d10a      	bne.n	80017a4 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 800178e:	89fb      	ldrh	r3, [r7, #14]
 8001790:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001794:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	8a1b      	ldrh	r3, [r3, #16]
 800179a:	019b      	lsls	r3, r3, #6
 800179c:	b29a      	uxth	r2, r3
 800179e:	89fb      	ldrh	r3, [r7, #14]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	89fa      	ldrh	r2, [r7, #14]
 80017a8:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	89ba      	ldrh	r2, [r7, #12]
 80017ae:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	897a      	ldrh	r2, [r7, #10]
 80017bc:	841a      	strh	r2, [r3, #32]
}
 80017be:	bf00      	nop
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	40010000 	.word	0x40010000
 80017d0:	40010400 	.word	0x40010400

080017d4 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	460b      	mov	r3, r1
 80017de:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	8b9b      	ldrh	r3, [r3, #28]
 80017e8:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 80017ea:	89fb      	ldrh	r3, [r7, #14]
 80017ec:	f023 0308 	bic.w	r3, r3, #8
 80017f0:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 80017f2:	89fa      	ldrh	r2, [r7, #14]
 80017f4:	887b      	ldrh	r3, [r7, #2]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	89fa      	ldrh	r2, [r7, #14]
 80017fe:	839a      	strh	r2, [r3, #28]
}
 8001800:	bf00      	nop
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	8b9b      	ldrh	r3, [r3, #28]
 8001820:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8001822:	89fb      	ldrh	r3, [r7, #14]
 8001824:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001828:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 800182a:	887b      	ldrh	r3, [r7, #2]
 800182c:	021b      	lsls	r3, r3, #8
 800182e:	b29a      	uxth	r2, r3
 8001830:	89fb      	ldrh	r3, [r7, #14]
 8001832:	4313      	orrs	r3, r2
 8001834:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	89fa      	ldrh	r2, [r7, #14]
 800183a:	839a      	strh	r2, [r3, #28]
}
 800183c:	bf00      	nop
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	807b      	strh	r3, [r7, #2]
 8001854:	4613      	mov	r3, r2
 8001856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001858:	787b      	ldrb	r3, [r7, #1]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d008      	beq.n	8001870 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	899b      	ldrh	r3, [r3, #12]
 8001862:	b29a      	uxth	r2, r3
 8001864:	887b      	ldrh	r3, [r7, #2]
 8001866:	4313      	orrs	r3, r2
 8001868:	b29a      	uxth	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 800186e:	e009      	b.n	8001884 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	899b      	ldrh	r3, [r3, #12]
 8001874:	b29a      	uxth	r2, r3
 8001876:	887b      	ldrh	r3, [r7, #2]
 8001878:	43db      	mvns	r3, r3
 800187a:	b29b      	uxth	r3, r3
 800187c:	4013      	ands	r3, r2
 800187e:	b29a      	uxth	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	819a      	strh	r2, [r3, #12]
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	460b      	mov	r3, r1
 800189a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800189c:	887b      	ldrh	r3, [r7, #2]
 800189e:	43db      	mvns	r3, r3
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	821a      	strh	r2, [r3, #16]
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	460b      	mov	r3, r1
 80018bc:	807b      	strh	r3, [r7, #2]
 80018be:	4613      	mov	r3, r2
 80018c0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80018c2:	787b      	ldrb	r3, [r7, #1]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d008      	beq.n	80018da <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	899b      	ldrh	r3, [r3, #12]
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	887b      	ldrh	r3, [r7, #2]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
  }
}
 80018d8:	e009      	b.n	80018ee <TIM_DMACmd+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	899b      	ldrh	r3, [r3, #12]
 80018de:	b29a      	uxth	r2, r3
 80018e0:	887b      	ldrh	r3, [r7, #2]
 80018e2:	43db      	mvns	r3, r3
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	4013      	ands	r3, r2
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	819a      	strh	r2, [r3, #12]
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
	...

080018fc <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08a      	sub	sp, #40	; 0x28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8001906:	2300      	movs	r3, #0
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
 800190a:	2300      	movs	r3, #0
 800190c:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8001912:	2300      	movs	r3, #0
 8001914:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	8a1b      	ldrh	r3, [r3, #16]
 800191a:	b29b      	uxth	r3, r3
 800191c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001924:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	88db      	ldrh	r3, [r3, #6]
 800192a:	461a      	mov	r2, r3
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	4313      	orrs	r3, r2
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	b29a      	uxth	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	899b      	ldrh	r3, [r3, #12]
 800193e:	b29b      	uxth	r3, r3
 8001940:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001948:	f023 030c 	bic.w	r3, r3, #12
 800194c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	889a      	ldrh	r2, [r3, #4]
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	891b      	ldrh	r3, [r3, #8]
 8001956:	4313      	orrs	r3, r2
 8001958:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800195e:	4313      	orrs	r3, r2
 8001960:	b29b      	uxth	r3, r3
 8001962:	461a      	mov	r2, r3
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001966:	4313      	orrs	r3, r2
 8001968:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	b29a      	uxth	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	8a9b      	ldrh	r3, [r3, #20]
 8001976:	b29b      	uxth	r3, r3
 8001978:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001980:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	899b      	ldrh	r3, [r3, #12]
 8001986:	461a      	mov	r2, r3
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	4313      	orrs	r3, r2
 800198c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	b29a      	uxth	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001996:	f107 0308 	add.w	r3, r7, #8
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fc78 	bl	8001290 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a30      	ldr	r2, [pc, #192]	; (8001a64 <USART_Init+0x168>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d003      	beq.n	80019b0 <USART_Init+0xb4>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a2f      	ldr	r2, [pc, #188]	; (8001a68 <USART_Init+0x16c>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d102      	bne.n	80019b6 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	623b      	str	r3, [r7, #32]
 80019b4:	e001      	b.n	80019ba <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	899b      	ldrh	r3, [r3, #12]
 80019be:	b29b      	uxth	r3, r3
 80019c0:	b21b      	sxth	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	da0c      	bge.n	80019e0 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80019c6:	6a3a      	ldr	r2, [r7, #32]
 80019c8:	4613      	mov	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	009a      	lsls	r2, r3, #2
 80019d0:	441a      	add	r2, r3
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019dc:	61fb      	str	r3, [r7, #28]
 80019de:	e00b      	b.n	80019f8 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80019e0:	6a3a      	ldr	r2, [r7, #32]
 80019e2:	4613      	mov	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	009a      	lsls	r2, r3, #2
 80019ea:	441a      	add	r2, r3
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f6:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	4a1c      	ldr	r2, [pc, #112]	; (8001a6c <USART_Init+0x170>)
 80019fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001a00:	095b      	lsrs	r3, r3, #5
 8001a02:	011b      	lsls	r3, r3, #4
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	091b      	lsrs	r3, r3, #4
 8001a0a:	2264      	movs	r2, #100	; 0x64
 8001a0c:	fb02 f303 	mul.w	r3, r2, r3
 8001a10:	69fa      	ldr	r2, [r7, #28]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	899b      	ldrh	r3, [r3, #12]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	b21b      	sxth	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	da0c      	bge.n	8001a3c <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	3332      	adds	r3, #50	; 0x32
 8001a28:	4a10      	ldr	r2, [pc, #64]	; (8001a6c <USART_Init+0x170>)
 8001a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2e:	095b      	lsrs	r3, r3, #5
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a36:	4313      	orrs	r3, r2
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24
 8001a3a:	e00b      	b.n	8001a54 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	011b      	lsls	r3, r3, #4
 8001a40:	3332      	adds	r3, #50	; 0x32
 8001a42:	4a0a      	ldr	r2, [pc, #40]	; (8001a6c <USART_Init+0x170>)
 8001a44:	fba2 2303 	umull	r2, r3, r2, r3
 8001a48:	095b      	lsrs	r3, r3, #5
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a50:	4313      	orrs	r3, r2
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	811a      	strh	r2, [r3, #8]
}
 8001a5c:	bf00      	nop
 8001a5e:	3728      	adds	r7, #40	; 0x28
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40011000 	.word	0x40011000
 8001a68:	40011400 	.word	0x40011400
 8001a6c:	51eb851f 	.word	0x51eb851f

08001a70 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001a7c:	78fb      	ldrb	r3, [r7, #3]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d008      	beq.n	8001a94 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	899b      	ldrh	r3, [r3, #12]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8001a92:	e007      	b.n	8001aa4 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	899b      	ldrh	r3, [r3, #12]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	819a      	strh	r2, [r3, #12]
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001abc:	887b      	ldrh	r3, [r7, #2]
 8001abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	809a      	strh	r2, [r3, #4]
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b087      	sub	sp, #28
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	460b      	mov	r3, r1
 8001ade:	807b      	strh	r3, [r7, #2]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	2300      	movs	r3, #0
 8001aee:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001af8:	887b      	ldrh	r3, [r7, #2]
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	095b      	lsrs	r3, r3, #5
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8001b02:	887b      	ldrh	r3, [r7, #2]
 8001b04:	f003 031f 	and.w	r3, r3, #31
 8001b08:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d103      	bne.n	8001b22 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	330c      	adds	r3, #12
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	e009      	b.n	8001b36 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d103      	bne.n	8001b30 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	3310      	adds	r3, #16
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	e002      	b.n	8001b36 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	3314      	adds	r3, #20
 8001b34:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8001b36:	787b      	ldrb	r3, [r7, #1]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d006      	beq.n	8001b4a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	6811      	ldr	r1, [r2, #0]
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	430a      	orrs	r2, r1
 8001b46:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001b48:	e006      	b.n	8001b58 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	697a      	ldr	r2, [r7, #20]
 8001b4e:	6811      	ldr	r1, [r2, #0]
 8001b50:	68ba      	ldr	r2, [r7, #8]
 8001b52:	43d2      	mvns	r2, r2
 8001b54:	400a      	ands	r2, r1
 8001b56:	601a      	str	r2, [r3, #0]
}
 8001b58:	bf00      	nop
 8001b5a:	371c      	adds	r7, #28
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001b70:	2300      	movs	r3, #0
 8001b72:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	887b      	ldrh	r3, [r7, #2]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d002      	beq.n	8001b8a <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8001b84:	2301      	movs	r3, #1
 8001b86:	73fb      	strb	r3, [r7, #15]
 8001b88:	e001      	b.n	8001b8e <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b087      	sub	sp, #28
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001bb8:	887b      	ldrh	r3, [r7, #2]
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	095b      	lsrs	r3, r3, #5
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001bc2:	887b      	ldrh	r3, [r7, #2]
 8001bc4:	f003 031f 	and.w	r3, r3, #31
 8001bc8:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8001bca:	2201      	movs	r2, #1
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d107      	bne.n	8001bea <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	899b      	ldrh	r3, [r3, #12]
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	461a      	mov	r2, r3
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	4013      	ands	r3, r2
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	e011      	b.n	8001c0e <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d107      	bne.n	8001c00 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	8a1b      	ldrh	r3, [r3, #16]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	e006      	b.n	8001c0e <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	8a9b      	ldrh	r3, [r3, #20]
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	461a      	mov	r2, r3
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8001c0e:	887b      	ldrh	r3, [r7, #2]
 8001c10:	0a1b      	lsrs	r3, r3, #8
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8001c16:	2201      	movs	r2, #1
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	881b      	ldrh	r3, [r3, #0]
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	461a      	mov	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d005      	beq.n	8001c40 <USART_GetITStatus+0xa4>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d002      	beq.n	8001c40 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	74fb      	strb	r3, [r7, #19]
 8001c3e:	e001      	b.n	8001c44 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8001c40:	2300      	movs	r3, #0
 8001c42:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001c44:	7cfb      	ldrb	r3, [r7, #19]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	371c      	adds	r7, #28
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b085      	sub	sp, #20
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	81fb      	strh	r3, [r7, #14]
 8001c62:	2300      	movs	r3, #0
 8001c64:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8001c66:	887b      	ldrh	r3, [r7, #2]
 8001c68:	0a1b      	lsrs	r3, r3, #8
 8001c6a:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8001c6c:	89fb      	ldrh	r3, [r7, #14]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8001c76:	89bb      	ldrh	r3, [r7, #12]
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	801a      	strh	r2, [r3, #0]
}
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <change_col>:

#include <draw_API.h>
#include "stm32_ub_vga_screen.h"
#include "include.h"

int change_col(char color[16]){
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
	int col;
	if 		(strcmp(color, "wit") == 0) {
 8001c94:	4958      	ldr	r1, [pc, #352]	; (8001df8 <change_col+0x16c>)
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7fe fa96 	bl	80001c8 <strcmp>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d102      	bne.n	8001ca8 <change_col+0x1c>
		col = VGA_COL_WHITE;
 8001ca2:	23ff      	movs	r3, #255	; 0xff
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	e0a1      	b.n	8001dec <change_col+0x160>
	}
	else if (strcmp(color, "grijs") == 0) {
 8001ca8:	4954      	ldr	r1, [pc, #336]	; (8001dfc <change_col+0x170>)
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7fe fa8c 	bl	80001c8 <strcmp>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d102      	bne.n	8001cbc <change_col+0x30>
		col = VGA_COL_GRAY;
 8001cb6:	23bf      	movs	r3, #191	; 0xbf
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	e097      	b.n	8001dec <change_col+0x160>
	}
	else if (strcmp(color, "zwart") == 0) {
 8001cbc:	4950      	ldr	r1, [pc, #320]	; (8001e00 <change_col+0x174>)
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7fe fa82 	bl	80001c8 <strcmp>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d102      	bne.n	8001cd0 <change_col+0x44>
		col = VGA_COL_BLACK;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	e08d      	b.n	8001dec <change_col+0x160>
	}
	else if (strcmp(color, "bruin") == 0) {
 8001cd0:	494c      	ldr	r1, [pc, #304]	; (8001e04 <change_col+0x178>)
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7fe fa78 	bl	80001c8 <strcmp>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d102      	bne.n	8001ce4 <change_col+0x58>
		col = VGA_COL_BROWN;
 8001cde:	23ad      	movs	r3, #173	; 0xad
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	e083      	b.n	8001dec <change_col+0x160>
	}
	else if (strcmp(color, "blauw") == 0) {
 8001ce4:	4948      	ldr	r1, [pc, #288]	; (8001e08 <change_col+0x17c>)
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7fe fa6e 	bl	80001c8 <strcmp>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d102      	bne.n	8001cf8 <change_col+0x6c>
		col = VGA_COL_BLUE;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	e079      	b.n	8001dec <change_col+0x160>
	}
	else if (strcmp(color, "lichtblauw") == 0) {
 8001cf8:	4944      	ldr	r1, [pc, #272]	; (8001e0c <change_col+0x180>)
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7fe fa64 	bl	80001c8 <strcmp>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d102      	bne.n	8001d0c <change_col+0x80>
		col = VGA_COL_LIGHT_BLUE;
 8001d06:	236f      	movs	r3, #111	; 0x6f
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	e06f      	b.n	8001dec <change_col+0x160>
	}
	else if (strcmp(color, "groen") == 0) {
 8001d0c:	4940      	ldr	r1, [pc, #256]	; (8001e10 <change_col+0x184>)
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f7fe fa5a 	bl	80001c8 <strcmp>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d102      	bne.n	8001d20 <change_col+0x94>
		col = VGA_COL_GREEN;
 8001d1a:	231c      	movs	r3, #28
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	e065      	b.n	8001dec <change_col+0x160>
	}
	else if (strcmp(color, "lichtgroen") == 0) {
 8001d20:	493c      	ldr	r1, [pc, #240]	; (8001e14 <change_col+0x188>)
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7fe fa50 	bl	80001c8 <strcmp>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d102      	bne.n	8001d34 <change_col+0xa8>
		col = VGA_COL_LIGHT_GREEN;
 8001d2e:	239e      	movs	r3, #158	; 0x9e
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	e05b      	b.n	8001dec <change_col+0x160>
	}
	else if (strcmp(color, "rood") == 0) {
 8001d34:	4938      	ldr	r1, [pc, #224]	; (8001e18 <change_col+0x18c>)
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7fe fa46 	bl	80001c8 <strcmp>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d102      	bne.n	8001d48 <change_col+0xbc>
		col = VGA_COL_RED;
 8001d42:	23e0      	movs	r3, #224	; 0xe0
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	e051      	b.n	8001dec <change_col+0x160>
	}
	else if (strcmp(color, "lichtrood") == 0) {
 8001d48:	4934      	ldr	r1, [pc, #208]	; (8001e1c <change_col+0x190>)
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7fe fa3c 	bl	80001c8 <strcmp>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d102      	bne.n	8001d5c <change_col+0xd0>
		col = VGA_COL_LIGHT_RED;
 8001d56:	23e9      	movs	r3, #233	; 0xe9
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	e047      	b.n	8001dec <change_col+0x160>
	}
	else if (strcmp(color, "cyan") == 0) {
 8001d5c:	4930      	ldr	r1, [pc, #192]	; (8001e20 <change_col+0x194>)
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7fe fa32 	bl	80001c8 <strcmp>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d102      	bne.n	8001d70 <change_col+0xe4>
		col = VGA_COL_CYAN;
 8001d6a:	231f      	movs	r3, #31
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	e03d      	b.n	8001dec <change_col+0x160>
	}
	else if (strcmp(color, "lichtcyan") == 0) {
 8001d70:	492c      	ldr	r1, [pc, #176]	; (8001e24 <change_col+0x198>)
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7fe fa28 	bl	80001c8 <strcmp>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d102      	bne.n	8001d84 <change_col+0xf8>
		col = VGA_COL_LIGHT_CYAN;
 8001d7e:	23bf      	movs	r3, #191	; 0xbf
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	e033      	b.n	8001dec <change_col+0x160>
	}
	else if (strcmp(color, "magenta") == 0) {
 8001d84:	4928      	ldr	r1, [pc, #160]	; (8001e28 <change_col+0x19c>)
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7fe fa1e 	bl	80001c8 <strcmp>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d102      	bne.n	8001d98 <change_col+0x10c>
		col = VGA_COL_MAGENTA;
 8001d92:	23e3      	movs	r3, #227	; 0xe3
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	e029      	b.n	8001dec <change_col+0x160>
	}
	else if (strcmp(color, "lichtmagenta") == 0) {
 8001d98:	4924      	ldr	r1, [pc, #144]	; (8001e2c <change_col+0x1a0>)
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7fe fa14 	bl	80001c8 <strcmp>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d102      	bne.n	8001dac <change_col+0x120>
		col = VGA_COL_LIGHT_MAGENTA;
 8001da6:	23f7      	movs	r3, #247	; 0xf7
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	e01f      	b.n	8001dec <change_col+0x160>
	}
	else if (strcmp(color, "geel") == 0) {
 8001dac:	4920      	ldr	r1, [pc, #128]	; (8001e30 <change_col+0x1a4>)
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7fe fa0a 	bl	80001c8 <strcmp>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d102      	bne.n	8001dc0 <change_col+0x134>
		col = VGA_COL_YELLOW;
 8001dba:	23fc      	movs	r3, #252	; 0xfc
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	e015      	b.n	8001dec <change_col+0x160>
	}
	else if (strcmp(color, "roze") == 0) {
 8001dc0:	491c      	ldr	r1, [pc, #112]	; (8001e34 <change_col+0x1a8>)
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7fe fa00 	bl	80001c8 <strcmp>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d102      	bne.n	8001dd4 <change_col+0x148>
		col = VGA_COL_PINK;
 8001dce:	23ef      	movs	r3, #239	; 0xef
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	e00b      	b.n	8001dec <change_col+0x160>
	}
	else if (strcmp(color, "paars") == 0) {
 8001dd4:	4918      	ldr	r1, [pc, #96]	; (8001e38 <change_col+0x1ac>)
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7fe f9f6 	bl	80001c8 <strcmp>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d102      	bne.n	8001de8 <change_col+0x15c>
		col = VGA_COL_PURPLE;
 8001de2:	2382      	movs	r3, #130	; 0x82
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	e001      	b.n	8001dec <change_col+0x160>
	}
	else {
		col = VGA_COL_WHITE;
 8001de8:	23ff      	movs	r3, #255	; 0xff
 8001dea:	60fb      	str	r3, [r7, #12]
	}//enum

	return col;
 8001dec:	68fb      	ldr	r3, [r7, #12]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	08003ccc 	.word	0x08003ccc
 8001dfc:	08003cd0 	.word	0x08003cd0
 8001e00:	08003cd8 	.word	0x08003cd8
 8001e04:	08003ce0 	.word	0x08003ce0
 8001e08:	08003ce8 	.word	0x08003ce8
 8001e0c:	08003cf0 	.word	0x08003cf0
 8001e10:	08003cfc 	.word	0x08003cfc
 8001e14:	08003d04 	.word	0x08003d04
 8001e18:	08003d10 	.word	0x08003d10
 8001e1c:	08003d18 	.word	0x08003d18
 8001e20:	08003d24 	.word	0x08003d24
 8001e24:	08003d2c 	.word	0x08003d2c
 8001e28:	08003d38 	.word	0x08003d38
 8001e2c:	08003d40 	.word	0x08003d40
 8001e30:	08003d50 	.word	0x08003d50
 8001e34:	08003d58 	.word	0x08003d58
 8001e38:	08003d60 	.word	0x08003d60

08001e3c <line>:

uint8_t line(uint8_t x1,uint8_t y1,uint8_t x2,uint8_t y2,uint8_t thickness,char color[16])
{
 8001e3c:	b590      	push	{r4, r7, lr}
 8001e3e:	b091      	sub	sp, #68	; 0x44
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4604      	mov	r4, r0
 8001e44:	4608      	mov	r0, r1
 8001e46:	4611      	mov	r1, r2
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4623      	mov	r3, r4
 8001e4c:	71fb      	strb	r3, [r7, #7]
 8001e4e:	4603      	mov	r3, r0
 8001e50:	71bb      	strb	r3, [r7, #6]
 8001e52:	460b      	mov	r3, r1
 8001e54:	717b      	strb	r3, [r7, #5]
 8001e56:	4613      	mov	r3, r2
 8001e58:	713b      	strb	r3, [r7, #4]
	int col = change_col(color);
 8001e5a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001e5c:	f7ff ff16 	bl	8001c8c <change_col>
 8001e60:	62b8      	str	r0, [r7, #40]	; 0x28

	int dx =  abs (x2 - x1), sx = x1 < x2 ? 1 : -1;
 8001e62:	797a      	ldrb	r2, [r7, #5]
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	bfb8      	it	lt
 8001e6c:	425b      	neglt	r3, r3
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e70:	79fa      	ldrb	r2, [r7, #7]
 8001e72:	797b      	ldrb	r3, [r7, #5]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d201      	bcs.n	8001e7c <line+0x40>
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e001      	b.n	8001e80 <line+0x44>
 8001e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e80:	623b      	str	r3, [r7, #32]
	int dy = -abs (y2 - y1), sy = y1 < y2 ? 1 : -1;
 8001e82:	793a      	ldrb	r2, [r7, #4]
 8001e84:	79bb      	ldrb	r3, [r7, #6]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	bfb8      	it	lt
 8001e8c:	425b      	neglt	r3, r3
 8001e8e:	425b      	negs	r3, r3
 8001e90:	61fb      	str	r3, [r7, #28]
 8001e92:	79ba      	ldrb	r2, [r7, #6]
 8001e94:	793b      	ldrb	r3, [r7, #4]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d201      	bcs.n	8001e9e <line+0x62>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e001      	b.n	8001ea2 <line+0x66>
 8001e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea2:	61bb      	str	r3, [r7, #24]
	int err = dx + dy, e2; /* error value e_xy */
 8001ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	63fb      	str	r3, [r7, #60]	; 0x3c

	float rc, x_rc, y_rc;
	int x_thick1, y_thick1, x_thick2, y_thick2;
	x_rc = x2-x1;
 8001eac:	797a      	ldrb	r2, [r7, #5]
 8001eae:	79fb      	ldrb	r3, [r7, #7]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	ee07 3a90 	vmov	s15, r3
 8001eb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eba:	edc7 7a05 	vstr	s15, [r7, #20]
	y_rc = y2-y1;
 8001ebe:	793a      	ldrb	r2, [r7, #4]
 8001ec0:	79bb      	ldrb	r3, [r7, #6]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	ee07 3a90 	vmov	s15, r3
 8001ec8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ecc:	edc7 7a04 	vstr	s15, [r7, #16]
	x_rc = y_rc *-1; //door onderstaande berekening ontstaat er een lijn die 90graden op de te tekenen lijn achterloopt
 8001ed0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ed4:	eef1 7a67 	vneg.f32	s15, s15
 8001ed8:	edc7 7a05 	vstr	s15, [r7, #20]
	y_rc = x_rc;
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	613b      	str	r3, [r7, #16]
	rc= sqrt((x_rc*x_rc)+(y_rc*y_rc));
 8001ee0:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ee4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ee8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eec:	edd7 6a04 	vldr	s13, [r7, #16]
 8001ef0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ef4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ef8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001efc:	ee17 0a90 	vmov	r0, s15
 8001f00:	f7fe fad8 	bl	80004b4 <__aeabi_f2d>
 8001f04:	4603      	mov	r3, r0
 8001f06:	460c      	mov	r4, r1
 8001f08:	ec44 3b10 	vmov	d0, r3, r4
 8001f0c:	f001 fdb2 	bl	8003a74 <sqrt>
 8001f10:	ec54 3b10 	vmov	r3, r4, d0
 8001f14:	4618      	mov	r0, r3
 8001f16:	4621      	mov	r1, r4
 8001f18:	f7fe fdf0 	bl	8000afc <__aeabi_d2f>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	60fb      	str	r3, [r7, #12]
	x_thick1= (rc/thickness)*x_rc; // casten misschien?
 8001f20:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001f24:	ee07 3a90 	vmov	s15, r3
 8001f28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f2c:	edd7 6a03 	vldr	s13, [r7, #12]
 8001f30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f34:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f40:	ee17 3a90 	vmov	r3, s15
 8001f44:	63bb      	str	r3, [r7, #56]	; 0x38
	y_thick1= (rc/thickness)*y_rc;
 8001f46:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001f4a:	ee07 3a90 	vmov	s15, r3
 8001f4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f52:	edd7 6a03 	vldr	s13, [r7, #12]
 8001f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f5a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f66:	ee17 3a90 	vmov	r3, s15
 8001f6a:	637b      	str	r3, [r7, #52]	; 0x34
	x_thick2= x_thick1+dx;
 8001f6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	4413      	add	r3, r2
 8001f72:	633b      	str	r3, [r7, #48]	; 0x30
	y_thick2= y_thick1+dy;
 8001f74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	4413      	add	r3, r2
 8001f7a:	62fb      	str	r3, [r7, #44]	; 0x2c

	while(1){  /* loop */
		UB_VGA_SetPixel(x1,y1,col);
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	79ba      	ldrb	r2, [r7, #6]
 8001f82:	b291      	uxth	r1, r2
 8001f84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f001 f80b 	bl	8002fa4 <UB_VGA_SetPixel>
	  if (x1 == x2 && y1 == y2) break;
 8001f8e:	79fa      	ldrb	r2, [r7, #7]
 8001f90:	797b      	ldrb	r3, [r7, #5]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d104      	bne.n	8001fa0 <line+0x164>
 8001f96:	79ba      	ldrb	r2, [r7, #6]
 8001f98:	793b      	ldrb	r3, [r7, #4]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d100      	bne.n	8001fa0 <line+0x164>
 8001f9e:	e01d      	b.n	8001fdc <line+0x1a0>
	  e2 = 2 * err;
 8001fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	60bb      	str	r3, [r7, #8]
	  if (e2 >= dy) { err += dy; x1 += sx; } /* e_xy+e_x > 0 */
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	db08      	blt.n	8001fc0 <line+0x184>
 8001fae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	71fb      	strb	r3, [r7, #7]
	  if (e2 <= dx) { err += dx; y1 += sy; } /* e_xy+e_y < 0 */
 8001fc0:	68ba      	ldr	r2, [r7, #8]
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	dcd9      	bgt.n	8001f7c <line+0x140>
 8001fc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	4413      	add	r3, r2
 8001fce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	79bb      	ldrb	r3, [r7, #6]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	71bb      	strb	r3, [r7, #6]
		UB_VGA_SetPixel(x1,y1,col);
 8001fda:	e7cf      	b.n	8001f7c <line+0x140>
	}
	while(1){
		UB_VGA_SetPixel(x_thick1,y_thick1,col);
 8001fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fe2:	b291      	uxth	r1, r2
 8001fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f000 ffdb 	bl	8002fa4 <UB_VGA_SetPixel>
		  e2 = 2 * err;
 8001fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	60bb      	str	r3, [r7, #8]
		  if (e2 >= dy) { err += dy; x_thick1 += sx; } /* e_xy+e_x > 0 */
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	db07      	blt.n	800200c <line+0x1d0>
 8001ffc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	4413      	add	r3, r2
 8002002:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002004:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002006:	6a3b      	ldr	r3, [r7, #32]
 8002008:	4413      	add	r3, r2
 800200a:	63bb      	str	r3, [r7, #56]	; 0x38
		  if (e2 <= dx) { err += dx; y_thick1 += sy; } /* e_xy+e_y < 0 */
 800200c:	68ba      	ldr	r2, [r7, #8]
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	429a      	cmp	r2, r3
 8002012:	dc07      	bgt.n	8002024 <line+0x1e8>
 8002014:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	4413      	add	r3, r2
 800201a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800201c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	4413      	add	r3, r2
 8002022:	637b      	str	r3, [r7, #52]	; 0x34

		if (x_thick1 == x_thick2 && y_thick1 == y_thick2){
 8002024:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002028:	429a      	cmp	r2, r3
 800202a:	d1d7      	bne.n	8001fdc <line+0x1a0>
 800202c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800202e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002030:	429a      	cmp	r2, r3
 8002032:	d1d3      	bne.n	8001fdc <line+0x1a0>
			thickness++;
 8002034:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002038:	3301      	adds	r3, #1
 800203a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
			x_thick1= (rc/thickness)*x_rc; // casten misschien?
 800203e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002042:	ee07 3a90 	vmov	s15, r3
 8002046:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800204a:	edd7 6a03 	vldr	s13, [r7, #12]
 800204e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002052:	edd7 7a05 	vldr	s15, [r7, #20]
 8002056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800205a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800205e:	ee17 3a90 	vmov	r3, s15
 8002062:	63bb      	str	r3, [r7, #56]	; 0x38
			y_thick1= (rc/thickness)*y_rc;
 8002064:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002068:	ee07 3a90 	vmov	s15, r3
 800206c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002070:	edd7 6a03 	vldr	s13, [r7, #12]
 8002074:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002078:	edd7 7a04 	vldr	s15, [r7, #16]
 800207c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002080:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002084:	ee17 3a90 	vmov	r3, s15
 8002088:	637b      	str	r3, [r7, #52]	; 0x34
			x_thick2= x_thick1+dx;
 800208a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	4413      	add	r3, r2
 8002090:	633b      	str	r3, [r7, #48]	; 0x30
			y_thick2= y_thick1+dy;
 8002092:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	4413      	add	r3, r2
 8002098:	62fb      	str	r3, [r7, #44]	; 0x2c
		UB_VGA_SetPixel(x_thick1,y_thick1,col);
 800209a:	e79f      	b.n	8001fdc <line+0x1a0>

0800209c <arrow>:
		}
	}
	return 1;
};
uint8_t arrow(uint8_t x1,uint8_t y1,uint8_t x2,uint8_t y2,uint8_t thickness,char color[16])
{
 800209c:	b590      	push	{r4, r7, lr}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4604      	mov	r4, r0
 80020a4:	4608      	mov	r0, r1
 80020a6:	4611      	mov	r1, r2
 80020a8:	461a      	mov	r2, r3
 80020aa:	4623      	mov	r3, r4
 80020ac:	71fb      	strb	r3, [r7, #7]
 80020ae:	4603      	mov	r3, r0
 80020b0:	71bb      	strb	r3, [r7, #6]
 80020b2:	460b      	mov	r3, r1
 80020b4:	717b      	strb	r3, [r7, #5]
 80020b6:	4613      	mov	r3, r2
 80020b8:	713b      	strb	r3, [r7, #4]
	int col = change_col(color);
 80020ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020bc:	f7ff fde6 	bl	8001c8c <change_col>
 80020c0:	60f8      	str	r0, [r7, #12]
	return 2;
 80020c2:	2302      	movs	r3, #2
};
 80020c4:	4618      	mov	r0, r3
 80020c6:	3714      	adds	r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd90      	pop	{r4, r7, pc}

080020cc <ellipse>:
uint8_t ellipse(uint8_t x1,uint8_t y1,uint8_t xradius,uint8_t yradius,char color[16])
{
 80020cc:	b5b0      	push	{r4, r5, r7, lr}
 80020ce:	b08a      	sub	sp, #40	; 0x28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4604      	mov	r4, r0
 80020d4:	4608      	mov	r0, r1
 80020d6:	4611      	mov	r1, r2
 80020d8:	461a      	mov	r2, r3
 80020da:	4623      	mov	r3, r4
 80020dc:	71fb      	strb	r3, [r7, #7]
 80020de:	4603      	mov	r3, r0
 80020e0:	71bb      	strb	r3, [r7, #6]
 80020e2:	460b      	mov	r3, r1
 80020e4:	717b      	strb	r3, [r7, #5]
 80020e6:	4613      	mov	r3, r2
 80020e8:	713b      	strb	r3, [r7, #4]
	int col = change_col(color);
 80020ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80020ec:	f7ff fdce 	bl	8001c8c <change_col>
 80020f0:	61f8      	str	r0, [r7, #28]

	for(int y=-yradius; y<=yradius; y++) {
 80020f2:	793b      	ldrb	r3, [r7, #4]
 80020f4:	425b      	negs	r3, r3
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
 80020f8:	e066      	b.n	80021c8 <ellipse+0xfc>
	    for(int x=-xradius; x<=xradius; x++) {
 80020fa:	797b      	ldrb	r3, [r7, #5]
 80020fc:	425b      	negs	r3, r3
 80020fe:	623b      	str	r3, [r7, #32]
 8002100:	e05b      	b.n	80021ba <ellipse+0xee>
	        double dx = (double)x / (double)xradius;
 8002102:	6a38      	ldr	r0, [r7, #32]
 8002104:	f7fe f9c4 	bl	8000490 <__aeabi_i2d>
 8002108:	4604      	mov	r4, r0
 800210a:	460d      	mov	r5, r1
 800210c:	797b      	ldrb	r3, [r7, #5]
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe f9ae 	bl	8000470 <__aeabi_ui2d>
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	4620      	mov	r0, r4
 800211a:	4629      	mov	r1, r5
 800211c:	f7fe fb48 	bl	80007b0 <__aeabi_ddiv>
 8002120:	4603      	mov	r3, r0
 8002122:	460c      	mov	r4, r1
 8002124:	e9c7 3404 	strd	r3, r4, [r7, #16]
	        double dy = (double)y / (double)yradius;
 8002128:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800212a:	f7fe f9b1 	bl	8000490 <__aeabi_i2d>
 800212e:	4604      	mov	r4, r0
 8002130:	460d      	mov	r5, r1
 8002132:	793b      	ldrb	r3, [r7, #4]
 8002134:	4618      	mov	r0, r3
 8002136:	f7fe f99b 	bl	8000470 <__aeabi_ui2d>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4620      	mov	r0, r4
 8002140:	4629      	mov	r1, r5
 8002142:	f7fe fb35 	bl	80007b0 <__aeabi_ddiv>
 8002146:	4603      	mov	r3, r0
 8002148:	460c      	mov	r4, r1
 800214a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	        if(dx*dx+dy*dy <= 1)
 800214e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002152:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002156:	f7fe fa01 	bl	800055c <__aeabi_dmul>
 800215a:	4603      	mov	r3, r0
 800215c:	460c      	mov	r4, r1
 800215e:	4625      	mov	r5, r4
 8002160:	461c      	mov	r4, r3
 8002162:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002166:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800216a:	f7fe f9f7 	bl	800055c <__aeabi_dmul>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	4620      	mov	r0, r4
 8002174:	4629      	mov	r1, r5
 8002176:	f7fe f83f 	bl	80001f8 <__adddf3>
 800217a:	4603      	mov	r3, r0
 800217c:	460c      	mov	r4, r1
 800217e:	4618      	mov	r0, r3
 8002180:	4621      	mov	r1, r4
 8002182:	f04f 0200 	mov.w	r2, #0
 8002186:	4b15      	ldr	r3, [pc, #84]	; (80021dc <ellipse+0x110>)
 8002188:	f7fe fc64 	bl	8000a54 <__aeabi_dcmple>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d010      	beq.n	80021b4 <ellipse+0xe8>
	        	UB_VGA_SetPixel(x+x1,y+y1,col);
 8002192:	79fb      	ldrb	r3, [r7, #7]
 8002194:	b29a      	uxth	r2, r3
 8002196:	6a3b      	ldr	r3, [r7, #32]
 8002198:	b29b      	uxth	r3, r3
 800219a:	4413      	add	r3, r2
 800219c:	b298      	uxth	r0, r3
 800219e:	79bb      	ldrb	r3, [r7, #6]
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	4413      	add	r3, r2
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	69fa      	ldr	r2, [r7, #28]
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	4619      	mov	r1, r3
 80021b0:	f000 fef8 	bl	8002fa4 <UB_VGA_SetPixel>
	    for(int x=-xradius; x<=xradius; x++) {
 80021b4:	6a3b      	ldr	r3, [r7, #32]
 80021b6:	3301      	adds	r3, #1
 80021b8:	623b      	str	r3, [r7, #32]
 80021ba:	797a      	ldrb	r2, [r7, #5]
 80021bc:	6a3b      	ldr	r3, [r7, #32]
 80021be:	429a      	cmp	r2, r3
 80021c0:	da9f      	bge.n	8002102 <ellipse+0x36>
	for(int y=-yradius; y<=yradius; y++) {
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	3301      	adds	r3, #1
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
 80021c8:	793a      	ldrb	r2, [r7, #4]
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	429a      	cmp	r2, r3
 80021ce:	da94      	bge.n	80020fa <ellipse+0x2e>
	    }
	}
	return 3;
 80021d0:	2303      	movs	r3, #3
};
 80021d2:	4618      	mov	r0, r3
 80021d4:	3728      	adds	r7, #40	; 0x28
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bdb0      	pop	{r4, r5, r7, pc}
 80021da:	bf00      	nop
 80021dc:	3ff00000 	.word	0x3ff00000

080021e0 <rectangular>:
uint8_t rectangular(uint8_t x1,uint8_t y1,uint8_t xlength,uint8_t ylength,char color[16])//als er 6argumenten worden gegeven word de dikte meegerekend
{
 80021e0:	b590      	push	{r4, r7, lr}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4604      	mov	r4, r0
 80021e8:	4608      	mov	r0, r1
 80021ea:	4611      	mov	r1, r2
 80021ec:	461a      	mov	r2, r3
 80021ee:	4623      	mov	r3, r4
 80021f0:	71fb      	strb	r3, [r7, #7]
 80021f2:	4603      	mov	r3, r0
 80021f4:	71bb      	strb	r3, [r7, #6]
 80021f6:	460b      	mov	r3, r1
 80021f8:	717b      	strb	r3, [r7, #5]
 80021fa:	4613      	mov	r3, r2
 80021fc:	713b      	strb	r3, [r7, #4]
	char col = change_col(color);
 80021fe:	6a38      	ldr	r0, [r7, #32]
 8002200:	f7ff fd44 	bl	8001c8c <change_col>
 8002204:	4603      	mov	r3, r0
 8002206:	737b      	strb	r3, [r7, #13]

	unsigned char x, y;
	for (y = y1; y < y1 + ylength; y++){
 8002208:	79bb      	ldrb	r3, [r7, #6]
 800220a:	73bb      	strb	r3, [r7, #14]
 800220c:	e016      	b.n	800223c <rectangular+0x5c>
		for (x = x1; x < x1 + xlength; x++){
 800220e:	79fb      	ldrb	r3, [r7, #7]
 8002210:	73fb      	strb	r3, [r7, #15]
 8002212:	e00a      	b.n	800222a <rectangular+0x4a>
			UB_VGA_SetPixel(x,y,col);
 8002214:	7bfb      	ldrb	r3, [r7, #15]
 8002216:	b29b      	uxth	r3, r3
 8002218:	7bba      	ldrb	r2, [r7, #14]
 800221a:	b291      	uxth	r1, r2
 800221c:	7b7a      	ldrb	r2, [r7, #13]
 800221e:	4618      	mov	r0, r3
 8002220:	f000 fec0 	bl	8002fa4 <UB_VGA_SetPixel>
		for (x = x1; x < x1 + xlength; x++){
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	3301      	adds	r3, #1
 8002228:	73fb      	strb	r3, [r7, #15]
 800222a:	7bfa      	ldrb	r2, [r7, #15]
 800222c:	79f9      	ldrb	r1, [r7, #7]
 800222e:	797b      	ldrb	r3, [r7, #5]
 8002230:	440b      	add	r3, r1
 8002232:	429a      	cmp	r2, r3
 8002234:	dbee      	blt.n	8002214 <rectangular+0x34>
	for (y = y1; y < y1 + ylength; y++){
 8002236:	7bbb      	ldrb	r3, [r7, #14]
 8002238:	3301      	adds	r3, #1
 800223a:	73bb      	strb	r3, [r7, #14]
 800223c:	7bba      	ldrb	r2, [r7, #14]
 800223e:	79b9      	ldrb	r1, [r7, #6]
 8002240:	793b      	ldrb	r3, [r7, #4]
 8002242:	440b      	add	r3, r1
 8002244:	429a      	cmp	r2, r3
 8002246:	dbe2      	blt.n	800220e <rectangular+0x2e>
		}
	}
	return 4;
 8002248:	2304      	movs	r3, #4
};
 800224a:	4618      	mov	r0, r3
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	bd90      	pop	{r4, r7, pc}

08002252 <triangle>:
uint8_t triangle(uint8_t x1,uint8_t y1,uint8_t x2,uint8_t y2,uint8_t x3,uint8_t y3,char color[16])
{
 8002252:	b590      	push	{r4, r7, lr}
 8002254:	b085      	sub	sp, #20
 8002256:	af00      	add	r7, sp, #0
 8002258:	4604      	mov	r4, r0
 800225a:	4608      	mov	r0, r1
 800225c:	4611      	mov	r1, r2
 800225e:	461a      	mov	r2, r3
 8002260:	4623      	mov	r3, r4
 8002262:	71fb      	strb	r3, [r7, #7]
 8002264:	4603      	mov	r3, r0
 8002266:	71bb      	strb	r3, [r7, #6]
 8002268:	460b      	mov	r3, r1
 800226a:	717b      	strb	r3, [r7, #5]
 800226c:	4613      	mov	r3, r2
 800226e:	713b      	strb	r3, [r7, #4]
	int col = change_col(color);
 8002270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002272:	f7ff fd0b 	bl	8001c8c <change_col>
 8002276:	60f8      	str	r0, [r7, #12]
	return 5;
 8002278:	2305      	movs	r3, #5
};
 800227a:	4618      	mov	r0, r3
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	bd90      	pop	{r4, r7, pc}

08002282 <text>:
uint8_t text(uint8_t x1,uint8_t y1,char str[255],char color[16],char font[16])
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b086      	sub	sp, #24
 8002286:	af00      	add	r7, sp, #0
 8002288:	60ba      	str	r2, [r7, #8]
 800228a:	607b      	str	r3, [r7, #4]
 800228c:	4603      	mov	r3, r0
 800228e:	73fb      	strb	r3, [r7, #15]
 8002290:	460b      	mov	r3, r1
 8002292:	73bb      	strb	r3, [r7, #14]
	int col = change_col(color);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff fcf9 	bl	8001c8c <change_col>
 800229a:	6178      	str	r0, [r7, #20]
	return 6;
 800229c:	2306      	movs	r3, #6
};
 800229e:	4618      	mov	r0, r3
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <bitmap>:
uint8_t bitmap(uint8_t bitmap,uint8_t x1,uint8_t y1)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	4603      	mov	r3, r0
 80022ae:	71fb      	strb	r3, [r7, #7]
 80022b0:	460b      	mov	r3, r1
 80022b2:	71bb      	strb	r3, [r7, #6]
 80022b4:	4613      	mov	r3, r2
 80022b6:	717b      	strb	r3, [r7, #5]
	return 7;
 80022b8:	2307      	movs	r3, #7
};
 80022ba:	4618      	mov	r0, r3
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <fill_screen>:
//{
//	UART_puts("wait");
//	return 8;
//};
uint8_t fill_screen(char color[16])
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b084      	sub	sp, #16
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
	int col = change_col(color);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff fcdc 	bl	8001c8c <change_col>
 80022d4:	60f8      	str	r0, [r7, #12]

	UB_VGA_FillScreen(col);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 fe40 	bl	8002f60 <UB_VGA_FillScreen>
	return 9;
 80022e0:	2309      	movs	r3, #9
};
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <main>:
#include "draw_API.h"

char *version = "API v0.4";

int main(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af02      	add	r7, sp, #8
	//  uint32_t n;

	// Inits
	SystemInit(); // System speed to 168MHz
 80022f2:	f000 fd43 	bl	8002d7c <SystemInit>
	LCD_init();
 80022f6:	f000 f963 	bl	80025c0 <LCD_init>
	UART_init();
 80022fa:	f000 fb63 	bl	80029c4 <UART_init>
	LED_init();
 80022fe:	f000 fae5 	bl	80028cc <LED_init>
	DELAY_init();
 8002302:	f000 f859 	bl	80023b8 <DELAY_init>
	UB_VGA_Screen_Init(); // Init VGA-Screen
 8002306:	f000 fdeb 	bl	8002ee0 <UB_VGA_Screen_Init>

	// LEDs
	LED_put(0xFF);
 800230a:	20ff      	movs	r0, #255	; 0xff
 800230c:	f000 fb22 	bl	8002954 <LED_put>
	DELAY_ms(500);
 8002310:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002314:	f000 f8e4 	bl	80024e0 <DELAY_ms>
	LED_put(0x00);
 8002318:	2000      	movs	r0, #0
 800231a:	f000 fb1b 	bl	8002954 <LED_put>

	// Screen
	UB_VGA_FillScreen(VGA_COL_BLACK);
 800231e:	2000      	movs	r0, #0
 8002320:	f000 fe1e 	bl	8002f60 <UB_VGA_FillScreen>
	ellipse(100, 100, 50, 50, "rood");
 8002324:	4b1f      	ldr	r3, [pc, #124]	; (80023a4 <main+0xb8>)
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	2332      	movs	r3, #50	; 0x32
 800232a:	2232      	movs	r2, #50	; 0x32
 800232c:	2164      	movs	r1, #100	; 0x64
 800232e:	2064      	movs	r0, #100	; 0x64
 8002330:	f7ff fecc 	bl	80020cc <ellipse>
	line(80,80,120,120,1,"zwart"); //x1 y1 x2 y2
 8002334:	4b1c      	ldr	r3, [pc, #112]	; (80023a8 <main+0xbc>)
 8002336:	9301      	str	r3, [sp, #4]
 8002338:	2301      	movs	r3, #1
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	2378      	movs	r3, #120	; 0x78
 800233e:	2278      	movs	r2, #120	; 0x78
 8002340:	2150      	movs	r1, #80	; 0x50
 8002342:	2050      	movs	r0, #80	; 0x50
 8002344:	f7ff fd7a 	bl	8001e3c <line>
	line(120,80,80,120,1,"zwart");
 8002348:	4b17      	ldr	r3, [pc, #92]	; (80023a8 <main+0xbc>)
 800234a:	9301      	str	r3, [sp, #4]
 800234c:	2301      	movs	r3, #1
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	2378      	movs	r3, #120	; 0x78
 8002352:	2250      	movs	r2, #80	; 0x50
 8002354:	2150      	movs	r1, #80	; 0x50
 8002356:	2078      	movs	r0, #120	; 0x78
 8002358:	f7ff fd70 	bl	8001e3c <line>


	// LCD Write
	LCD_clear();
 800235c:	f000 f8f4 	bl	8002548 <LCD_clear>
	LCD_puts("TEET-VESOFTON-16");
 8002360:	4812      	ldr	r0, [pc, #72]	; (80023ac <main+0xc0>)
 8002362:	f000 f9de 	bl	8002722 <LCD_puts>
	LCD_XY(0, 1);
 8002366:	2101      	movs	r1, #1
 8002368:	2000      	movs	r0, #0
 800236a:	f000 f8ff 	bl	800256c <LCD_XY>
	LCD_puts(version);
 800236e:	4b10      	ldr	r3, [pc, #64]	; (80023b0 <main+0xc4>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f000 f9d5 	bl	8002722 <LCD_puts>
	LCD_cursor_off();
 8002378:	200c      	movs	r0, #12
 800237a:	f000 fa3b 	bl	80027f4 <LCD_writecontrol>

	// UART
	UART_puts(version);
 800237e:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <main+0xc4>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f000 fb82 	bl	8002a8c <UART_puts>
	UART_puts("\n\r");
 8002388:	480a      	ldr	r0, [pc, #40]	; (80023b4 <main+0xc8>)
 800238a:	f000 fb7f 	bl	8002a8c <UART_puts>

	while(1)
	{
		// How to call UART_tokens
		char **arguments = UART_tokens();
 800238e:	f000 ffe3 	bl	8003358 <UART_tokens>
 8002392:	6078      	str	r0, [r7, #4]
//		{
//			UART_puts(arguments[i]);
//			UART_puts("\n");
//		}

		UART_control(arguments);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f001 f855 	bl	8003444 <UART_control>

		// ALWAYS clear AFTER you are done with your arguments to prevent memory leaks!
		UART_tokens_clear(arguments);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f001 f832 	bl	8003404 <UART_tokens_clear>
	{
 80023a0:	e7f5      	b.n	800238e <main+0xa2>
 80023a2:	bf00      	nop
 80023a4:	08003d74 	.word	0x08003d74
 80023a8:	08003d7c 	.word	0x08003d7c
 80023ac:	08003d84 	.word	0x08003d84
 80023b0:	20000010 	.word	0x20000010
 80023b4:	08003d98 	.word	0x08003d98

080023b8 <DELAY_init>:
uint32_t D_mS; // Global variable (ms)
uint32_t D_S; // Global variable (s)


void DELAY_init(void)
{
 80023b8:	b590      	push	{r4, r7, lr}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
	RCC_ClocksTypeDef Clocks;
	RCC_GetClocksFreq(&Clocks);
 80023be:	463b      	mov	r3, r7
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7fe ff65 	bl	8001290 <RCC_GetClocksFreq>
	G_CLK = Clocks.SYSCLK_Frequency;	// Read the systemclock
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	4a3f      	ldr	r2, [pc, #252]	; (80024c8 <DELAY_init+0x110>)
 80023ca:	6013      	str	r3, [r2, #0]
	D_S  = (G_CLK*1.25)/9/2;	// Number of instructions in one second
 80023cc:	4b3e      	ldr	r3, [pc, #248]	; (80024c8 <DELAY_init+0x110>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7fe f84d 	bl	8000470 <__aeabi_ui2d>
 80023d6:	f04f 0200 	mov.w	r2, #0
 80023da:	4b3c      	ldr	r3, [pc, #240]	; (80024cc <DELAY_init+0x114>)
 80023dc:	f7fe f8be 	bl	800055c <__aeabi_dmul>
 80023e0:	4603      	mov	r3, r0
 80023e2:	460c      	mov	r4, r1
 80023e4:	4618      	mov	r0, r3
 80023e6:	4621      	mov	r1, r4
 80023e8:	f04f 0200 	mov.w	r2, #0
 80023ec:	4b38      	ldr	r3, [pc, #224]	; (80024d0 <DELAY_init+0x118>)
 80023ee:	f7fe f9df 	bl	80007b0 <__aeabi_ddiv>
 80023f2:	4603      	mov	r3, r0
 80023f4:	460c      	mov	r4, r1
 80023f6:	4618      	mov	r0, r3
 80023f8:	4621      	mov	r1, r4
 80023fa:	f04f 0200 	mov.w	r2, #0
 80023fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002402:	f7fe f9d5 	bl	80007b0 <__aeabi_ddiv>
 8002406:	4603      	mov	r3, r0
 8002408:	460c      	mov	r4, r1
 800240a:	4618      	mov	r0, r3
 800240c:	4621      	mov	r1, r4
 800240e:	f7fe fb55 	bl	8000abc <__aeabi_d2uiz>
 8002412:	4602      	mov	r2, r0
 8002414:	4b2f      	ldr	r3, [pc, #188]	; (80024d4 <DELAY_init+0x11c>)
 8002416:	601a      	str	r2, [r3, #0]
	D_mS = (G_CLK*1.25)/9000/2; // Number of instructions in one millisecond
 8002418:	4b2b      	ldr	r3, [pc, #172]	; (80024c8 <DELAY_init+0x110>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe f827 	bl	8000470 <__aeabi_ui2d>
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	4b29      	ldr	r3, [pc, #164]	; (80024cc <DELAY_init+0x114>)
 8002428:	f7fe f898 	bl	800055c <__aeabi_dmul>
 800242c:	4603      	mov	r3, r0
 800242e:	460c      	mov	r4, r1
 8002430:	4618      	mov	r0, r3
 8002432:	4621      	mov	r1, r4
 8002434:	a320      	add	r3, pc, #128	; (adr r3, 80024b8 <DELAY_init+0x100>)
 8002436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243a:	f7fe f9b9 	bl	80007b0 <__aeabi_ddiv>
 800243e:	4603      	mov	r3, r0
 8002440:	460c      	mov	r4, r1
 8002442:	4618      	mov	r0, r3
 8002444:	4621      	mov	r1, r4
 8002446:	f04f 0200 	mov.w	r2, #0
 800244a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800244e:	f7fe f9af 	bl	80007b0 <__aeabi_ddiv>
 8002452:	4603      	mov	r3, r0
 8002454:	460c      	mov	r4, r1
 8002456:	4618      	mov	r0, r3
 8002458:	4621      	mov	r1, r4
 800245a:	f7fe fb2f 	bl	8000abc <__aeabi_d2uiz>
 800245e:	4602      	mov	r2, r0
 8002460:	4b1d      	ldr	r3, [pc, #116]	; (80024d8 <DELAY_init+0x120>)
 8002462:	601a      	str	r2, [r3, #0]
	D_uS = (G_CLK*1.25)/9000000/2; // Number of instructions in one microsecond, largest rounding error
 8002464:	4b18      	ldr	r3, [pc, #96]	; (80024c8 <DELAY_init+0x110>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f7fe f801 	bl	8000470 <__aeabi_ui2d>
 800246e:	f04f 0200 	mov.w	r2, #0
 8002472:	4b16      	ldr	r3, [pc, #88]	; (80024cc <DELAY_init+0x114>)
 8002474:	f7fe f872 	bl	800055c <__aeabi_dmul>
 8002478:	4603      	mov	r3, r0
 800247a:	460c      	mov	r4, r1
 800247c:	4618      	mov	r0, r3
 800247e:	4621      	mov	r1, r4
 8002480:	a30f      	add	r3, pc, #60	; (adr r3, 80024c0 <DELAY_init+0x108>)
 8002482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002486:	f7fe f993 	bl	80007b0 <__aeabi_ddiv>
 800248a:	4603      	mov	r3, r0
 800248c:	460c      	mov	r4, r1
 800248e:	4618      	mov	r0, r3
 8002490:	4621      	mov	r1, r4
 8002492:	f04f 0200 	mov.w	r2, #0
 8002496:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800249a:	f7fe f989 	bl	80007b0 <__aeabi_ddiv>
 800249e:	4603      	mov	r3, r0
 80024a0:	460c      	mov	r4, r1
 80024a2:	4618      	mov	r0, r3
 80024a4:	4621      	mov	r1, r4
 80024a6:	f7fe fb09 	bl	8000abc <__aeabi_d2uiz>
 80024aa:	4602      	mov	r2, r0
 80024ac:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <DELAY_init+0x124>)
 80024ae:	601a      	str	r2, [r3, #0]
}
 80024b0:	bf00      	nop
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd90      	pop	{r4, r7, pc}
 80024b8:	00000000 	.word	0x00000000
 80024bc:	40c19400 	.word	0x40c19400
 80024c0:	00000000 	.word	0x00000000
 80024c4:	41612a88 	.word	0x41612a88
 80024c8:	20012f24 	.word	0x20012f24
 80024cc:	3ff40000 	.word	0x3ff40000
 80024d0:	40220000 	.word	0x40220000
 80024d4:	20012f28 	.word	0x20012f28
 80024d8:	20012f30 	.word	0x20012f30
 80024dc:	20012f2c 	.word	0x20012f2c

080024e0 <DELAY_ms>:
        time--;
    }
}

void DELAY_ms(volatile unsigned int time)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
    volatile unsigned int i;

    while(time>0)		// Run x times 1 millisecond
 80024e8:	e00d      	b.n	8002506 <DELAY_ms+0x26>
    {
        for(i=0;i<D_mS;i++);
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	e002      	b.n	80024f6 <DELAY_ms+0x16>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	3301      	adds	r3, #1
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	4b07      	ldr	r3, [pc, #28]	; (8002518 <DELAY_ms+0x38>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d3f7      	bcc.n	80024f0 <DELAY_ms+0x10>
        time--;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3b01      	subs	r3, #1
 8002504:	607b      	str	r3, [r7, #4]
    while(time>0)		// Run x times 1 millisecond
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1ee      	bne.n	80024ea <DELAY_ms+0xa>
    }
}
 800250c:	bf00      	nop
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	20012f30 	.word	0x20012f30

0800251c <ClearBits>:
static void LCD_writebyte(unsigned char data);

unsigned char curpos = 0; // remember cursorposition

void ClearBits(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
	GPIO_ResetBits(LCD_D4);
 8002520:	2108      	movs	r1, #8
 8002522:	4808      	ldr	r0, [pc, #32]	; (8002544 <ClearBits+0x28>)
 8002524:	f7fe fe5b 	bl	80011de <GPIO_ResetBits>
	GPIO_ResetBits(LCD_D5);
 8002528:	2110      	movs	r1, #16
 800252a:	4806      	ldr	r0, [pc, #24]	; (8002544 <ClearBits+0x28>)
 800252c:	f7fe fe57 	bl	80011de <GPIO_ResetBits>
	GPIO_ResetBits(LCD_D6);
 8002530:	2120      	movs	r1, #32
 8002532:	4804      	ldr	r0, [pc, #16]	; (8002544 <ClearBits+0x28>)
 8002534:	f7fe fe53 	bl	80011de <GPIO_ResetBits>
	GPIO_ResetBits(LCD_D7);
 8002538:	2140      	movs	r1, #64	; 0x40
 800253a:	4802      	ldr	r0, [pc, #8]	; (8002544 <ClearBits+0x28>)
 800253c:	f7fe fe4f 	bl	80011de <GPIO_ResetBits>
}
 8002540:	bf00      	nop
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40021000 	.word	0x40021000

08002548 <LCD_clear>:
   LCD_writecontrol(0x02); // cursur home
   curpos=0;               // reset position
}

void LCD_clear(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
   LCD_writecontrol(0x01); // clearscreen
 800254c:	2001      	movs	r0, #1
 800254e:	f000 f951 	bl	80027f4 <LCD_writecontrol>
   curpos=0;               // reset position
 8002552:	4b05      	ldr	r3, [pc, #20]	; (8002568 <LCD_clear+0x20>)
 8002554:	2200      	movs	r2, #0
 8002556:	701a      	strb	r2, [r3, #0]
   DELAY_ms(5);
 8002558:	2005      	movs	r0, #5
 800255a:	f7ff ffc1 	bl	80024e0 <DELAY_ms>
   busyflag();
 800255e:	f000 f95d 	bl	800281c <busyflag>

}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	20000214 	.word	0x20000214

0800256c <LCD_XY>:

void LCD_XY(unsigned int x, unsigned int y)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
	unsigned char data;

	switch(y)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d009      	beq.n	8002590 <LCD_XY+0x24>
 800257c:	2b01      	cmp	r3, #1
 800257e:	d302      	bcc.n	8002586 <LCD_XY+0x1a>
 8002580:	2b02      	cmp	r3, #2
 8002582:	d00a      	beq.n	800259a <LCD_XY+0x2e>
 8002584:	e00e      	b.n	80025a4 <LCD_XY+0x38>
	{
	case 0:  data = (1<<7)+0x00+x; break;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	b2db      	uxtb	r3, r3
 800258a:	3b80      	subs	r3, #128	; 0x80
 800258c:	73fb      	strb	r3, [r7, #15]
 800258e:	e00e      	b.n	80025ae <LCD_XY+0x42>
	case 1:  data = (1<<7)+0x40+x; break;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	b2db      	uxtb	r3, r3
 8002594:	3b40      	subs	r3, #64	; 0x40
 8002596:	73fb      	strb	r3, [r7, #15]
 8002598:	e009      	b.n	80025ae <LCD_XY+0x42>
	case 2:  data = (1<<7)+0x14+x; break;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	b2db      	uxtb	r3, r3
 800259e:	3b6c      	subs	r3, #108	; 0x6c
 80025a0:	73fb      	strb	r3, [r7, #15]
 80025a2:	e004      	b.n	80025ae <LCD_XY+0x42>
	default: data = (1<<7)+0x54+x; break;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	3b2c      	subs	r3, #44	; 0x2c
 80025aa:	73fb      	strb	r3, [r7, #15]
 80025ac:	bf00      	nop
	}
	LCD_writecontrol(data);
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f000 f91f 	bl	80027f4 <LCD_writecontrol>
}
 80025b6:	bf00      	nop
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <LCD_init>:


// init LCD
// Display wordt gebruikt in 4bits modus,2 regels, 5x7 dots font.
void LCD_init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio;	// GPIO init structure
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE); // Enable Clock for PortE
 80025c6:	2101      	movs	r1, #1
 80025c8:	2010      	movs	r0, #16
 80025ca:	f7fe ff09 	bl	80013e0 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80025ce:	2101      	movs	r1, #1
 80025d0:	2004      	movs	r0, #4
 80025d2:	f7fe ff05 	bl	80013e0 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80025d6:	2101      	movs	r1, #1
 80025d8:	2008      	movs	r0, #8
 80025da:	f7fe ff01 	bl	80013e0 <RCC_AHB1PeriphClockCmd>

	gpio.GPIO_Mode = GPIO_Mode_OUT;
 80025de:	2301      	movs	r3, #1
 80025e0:	713b      	strb	r3, [r7, #4]
	gpio.GPIO_OType = GPIO_OType_PP;
 80025e2:	2300      	movs	r3, #0
 80025e4:	71bb      	strb	r3, [r7, #6]
	gpio.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	71fb      	strb	r3, [r7, #7]
	gpio.GPIO_Speed = GPIO_Speed_50MHz;
 80025ea:	2302      	movs	r3, #2
 80025ec:	717b      	strb	r3, [r7, #5]
	gpio.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6;
 80025ee:	2378      	movs	r3, #120	; 0x78
 80025f0:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOE, &gpio);
 80025f2:	463b      	mov	r3, r7
 80025f4:	4619      	mov	r1, r3
 80025f6:	4828      	ldr	r0, [pc, #160]	; (8002698 <LCD_init+0xd8>)
 80025f8:	f7fe fd3a 	bl	8001070 <GPIO_Init>

	gpio.GPIO_Pin = GPIO_Pin_11 | GPIO_Pin_13;
 80025fc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002600:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOC, &gpio);
 8002602:	463b      	mov	r3, r7
 8002604:	4619      	mov	r1, r3
 8002606:	4825      	ldr	r0, [pc, #148]	; (800269c <LCD_init+0xdc>)
 8002608:	f7fe fd32 	bl	8001070 <GPIO_Init>

	gpio.GPIO_Pin = GPIO_Pin_0;
 800260c:	2301      	movs	r3, #1
 800260e:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOD, &gpio);
 8002610:	463b      	mov	r3, r7
 8002612:	4619      	mov	r1, r3
 8002614:	4822      	ldr	r0, [pc, #136]	; (80026a0 <LCD_init+0xe0>)
 8002616:	f7fe fd2b 	bl	8001070 <GPIO_Init>
//	GPIOE -> MODER |= ( 1 << 12 );
//	GPIOC -> MODER |= ( 1 << 26 );
//	GPIOC -> MODER |= ( 1 << 30 );
//	GPIOC -> MODER |= ( 1 << 28 );

	GPIO_ResetBits(LCD_RS);
 800261a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800261e:	481f      	ldr	r0, [pc, #124]	; (800269c <LCD_init+0xdc>)
 8002620:	f7fe fddd 	bl	80011de <GPIO_ResetBits>
	GPIO_ResetBits(LCD_EN);
 8002624:	2101      	movs	r1, #1
 8002626:	481e      	ldr	r0, [pc, #120]	; (80026a0 <LCD_init+0xe0>)
 8002628:	f7fe fdd9 	bl	80011de <GPIO_ResetBits>
	GPIO_ResetBits(LCD_RW);
 800262c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002630:	481a      	ldr	r0, [pc, #104]	; (800269c <LCD_init+0xdc>)
 8002632:	f7fe fdd4 	bl	80011de <GPIO_ResetBits>

	DELAY_ms(15);//15
 8002636:	200f      	movs	r0, #15
 8002638:	f7ff ff52 	bl	80024e0 <DELAY_ms>

    LCD_writebyte(0x30); // function-set boot
 800263c:	2030      	movs	r0, #48	; 0x30
 800263e:	f000 f8ad 	bl	800279c <LCD_writebyte>
    DELAY_ms(50);
 8002642:	2032      	movs	r0, #50	; 0x32
 8002644:	f7ff ff4c 	bl	80024e0 <DELAY_ms>
    LCD_writebyte(0x30);
 8002648:	2030      	movs	r0, #48	; 0x30
 800264a:	f000 f8a7 	bl	800279c <LCD_writebyte>
    LCD_writebyte(0x30);
 800264e:	2030      	movs	r0, #48	; 0x30
 8002650:	f000 f8a4 	bl	800279c <LCD_writebyte>

     // interface op 4 bits
    LCD_writebyte(0x02);
 8002654:	2002      	movs	r0, #2
 8002656:	f000 f8a1 	bl	800279c <LCD_writebyte>
    DELAY_ms(5);
 800265a:	2005      	movs	r0, #5
 800265c:	f7ff ff40 	bl	80024e0 <DELAY_ms>

    LCD_writebyte(0x2C);  // function set
 8002660:	202c      	movs	r0, #44	; 0x2c
 8002662:	f000 f89b 	bl	800279c <LCD_writebyte>
    DELAY_ms(15);
 8002666:	200f      	movs	r0, #15
 8002668:	f7ff ff3a 	bl	80024e0 <DELAY_ms>
    LCD_writebyte(0x0E);  // lcd aan
 800266c:	200e      	movs	r0, #14
 800266e:	f000 f895 	bl	800279c <LCD_writebyte>
    DELAY_ms(15);
 8002672:	200f      	movs	r0, #15
 8002674:	f7ff ff34 	bl	80024e0 <DELAY_ms>
    LCD_writebyte(0x01);  // clear screen
 8002678:	2001      	movs	r0, #1
 800267a:	f000 f88f 	bl	800279c <LCD_writebyte>
    DELAY_ms(15);
 800267e:	200f      	movs	r0, #15
 8002680:	f7ff ff2e 	bl	80024e0 <DELAY_ms>
    LCD_writebyte(0x06);  // entry mode set
 8002684:	2006      	movs	r0, #6
 8002686:	f000 f889 	bl	800279c <LCD_writebyte>
    DELAY_ms(15);
 800268a:	200f      	movs	r0, #15
 800268c:	f7ff ff28 	bl	80024e0 <DELAY_ms>
}
 8002690:	bf00      	nop
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40021000 	.word	0x40021000
 800269c:	40020800 	.word	0x40020800
 80026a0:	40020c00 	.word	0x40020c00

080026a4 <LCD_putchar>:

// Zet meegegeven karakter op het scherm
void LCD_putchar(char c)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	71fb      	strb	r3, [r7, #7]
    GPIO_SetBits(LCD_RS);
 80026ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026b2:	480c      	ldr	r0, [pc, #48]	; (80026e4 <LCD_putchar+0x40>)
 80026b4:	f7fe fd84 	bl	80011c0 <GPIO_SetBits>
    LCD_writebyte(c);
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 f86e 	bl	800279c <LCD_writebyte>
    if (++curpos==32) // remember cursorpos
 80026c0:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <LCD_putchar+0x44>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	3301      	adds	r3, #1
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	4b07      	ldr	r3, [pc, #28]	; (80026e8 <LCD_putchar+0x44>)
 80026ca:	701a      	strb	r2, [r3, #0]
 80026cc:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <LCD_putchar+0x44>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b20      	cmp	r3, #32
 80026d2:	d102      	bne.n	80026da <LCD_putchar+0x36>
    	curpos=0;
 80026d4:	4b04      	ldr	r3, [pc, #16]	; (80026e8 <LCD_putchar+0x44>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	701a      	strb	r2, [r3, #0]
}
 80026da:	bf00      	nop
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40020800 	.word	0x40020800
 80026e8:	20000214 	.word	0x20000214

080026ec <LCD_put>:

// Zet meegegeven string op het scherm
void LCD_put(char *string)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
    unsigned char k;
	// vaag display; teken 8 tot 31 is niet uitgevoerd op het scherm
    for (k=0; string[k]; k++)
 80026f4:	2300      	movs	r3, #0
 80026f6:	73fb      	strb	r3, [r7, #15]
 80026f8:	e009      	b.n	800270e <LCD_put+0x22>
    	unsigned char j;
    	// vaag display; teken 8 tot 31 is niet uitgevoerd op het scherm
    	if(curpos==8) // at 8, goto next valid lcd-position
        for (j=0; j<32; j++) LCD_cursor_right();
#endif
        LCD_putchar(string[k]);
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	4413      	add	r3, r2
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff ffce 	bl	80026a4 <LCD_putchar>
    for (k=0; string[k]; k++)
 8002708:	7bfb      	ldrb	r3, [r7, #15]
 800270a:	3301      	adds	r3, #1
 800270c:	73fb      	strb	r3, [r7, #15]
 800270e:	7bfb      	ldrb	r3, [r7, #15]
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	4413      	add	r3, r2
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1ef      	bne.n	80026fa <LCD_put+0xe>
    }
}
 800271a:	bf00      	nop
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <LCD_puts>:

void LCD_puts(char *c)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
    LCD_put(c);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7ff ffde 	bl	80026ec <LCD_put>
}
 8002730:	bf00      	nop
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <LCD_writenibble>:
	LCD_put(&s[i+1]); // first, set i to starting pos, undo one i-- too much
}

// Stuurt een 4-bits commando naar het display
static void LCD_writenibble(unsigned char data)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	71fb      	strb	r3, [r7, #7]
    ClearBits();
 8002742:	f7ff feeb 	bl	800251c <ClearBits>

    if (data & 0x01)
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b00      	cmp	r3, #0
 800274e:	d003      	beq.n	8002758 <LCD_writenibble+0x20>
		GPIO_SetBits(LCD_D7);
 8002750:	2140      	movs	r1, #64	; 0x40
 8002752:	4811      	ldr	r0, [pc, #68]	; (8002798 <LCD_writenibble+0x60>)
 8002754:	f7fe fd34 	bl	80011c0 <GPIO_SetBits>

	if (data & 0x02)
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <LCD_writenibble+0x32>
		GPIO_SetBits(LCD_D6);
 8002762:	2120      	movs	r1, #32
 8002764:	480c      	ldr	r0, [pc, #48]	; (8002798 <LCD_writenibble+0x60>)
 8002766:	f7fe fd2b 	bl	80011c0 <GPIO_SetBits>

	if (data & 0x04)
 800276a:	79fb      	ldrb	r3, [r7, #7]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <LCD_writenibble+0x44>
		GPIO_SetBits(LCD_D5);
 8002774:	2110      	movs	r1, #16
 8002776:	4808      	ldr	r0, [pc, #32]	; (8002798 <LCD_writenibble+0x60>)
 8002778:	f7fe fd22 	bl	80011c0 <GPIO_SetBits>

	if (data & 0x08)
 800277c:	79fb      	ldrb	r3, [r7, #7]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <LCD_writenibble+0x56>
		GPIO_SetBits(LCD_D4);
 8002786:	2108      	movs	r1, #8
 8002788:	4803      	ldr	r0, [pc, #12]	; (8002798 <LCD_writenibble+0x60>)
 800278a:	f7fe fd19 	bl	80011c0 <GPIO_SetBits>

}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	40021000 	.word	0x40021000

0800279c <LCD_writebyte>:

// Stuurt een 8-bits commando naar het display
static void LCD_writebyte(unsigned char data)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	71fb      	strb	r3, [r7, #7]
    /* hoogste 4 bits */
    GPIO_SetBits(LCD_EN);
 80027a6:	2101      	movs	r1, #1
 80027a8:	4811      	ldr	r0, [pc, #68]	; (80027f0 <LCD_writebyte+0x54>)
 80027aa:	f7fe fd09 	bl	80011c0 <GPIO_SetBits>
    LCD_writenibble((data>>4)&0x0F);
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	091b      	lsrs	r3, r3, #4
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff ffbf 	bl	8002738 <LCD_writenibble>
    GPIO_ResetBits(LCD_EN);
 80027ba:	2101      	movs	r1, #1
 80027bc:	480c      	ldr	r0, [pc, #48]	; (80027f0 <LCD_writebyte+0x54>)
 80027be:	f7fe fd0e 	bl	80011de <GPIO_ResetBits>

    busyflag();
 80027c2:	f000 f82b 	bl	800281c <busyflag>

    /* laagste 4 bits */
    GPIO_SetBits(LCD_EN);
 80027c6:	2101      	movs	r1, #1
 80027c8:	4809      	ldr	r0, [pc, #36]	; (80027f0 <LCD_writebyte+0x54>)
 80027ca:	f7fe fcf9 	bl	80011c0 <GPIO_SetBits>
    LCD_writenibble(data&0x0F);
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	f003 030f 	and.w	r3, r3, #15
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff ffae 	bl	8002738 <LCD_writenibble>
    GPIO_ResetBits(LCD_EN);
 80027dc:	2101      	movs	r1, #1
 80027de:	4804      	ldr	r0, [pc, #16]	; (80027f0 <LCD_writebyte+0x54>)
 80027e0:	f7fe fcfd 	bl	80011de <GPIO_ResetBits>

    busyflag();
 80027e4:	f000 f81a 	bl	800281c <busyflag>
}
 80027e8:	bf00      	nop
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40020c00 	.word	0x40020c00

080027f4 <LCD_writecontrol>:

// Stuurt een commando naar het display
void LCD_writecontrol(unsigned char data)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	71fb      	strb	r3, [r7, #7]
    GPIO_ResetBits(LCD_RS);
 80027fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002802:	4805      	ldr	r0, [pc, #20]	; (8002818 <LCD_writecontrol+0x24>)
 8002804:	f7fe fceb 	bl	80011de <GPIO_ResetBits>
    LCD_writebyte(data);
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff ffc6 	bl	800279c <LCD_writebyte>
}
 8002810:	bf00      	nop
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40020800 	.word	0x40020800

0800281c <busyflag>:
	    while(time--)
	    	__NOP();
}

void busyflag(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
	uint8_t bitstatus = 0x00;
 8002822:	2300      	movs	r3, #0
 8002824:	73fb      	strb	r3, [r7, #15]
	uint8_t bitstatus1 = Bit_SET;
 8002826:	2301      	movs	r3, #1
 8002828:	73bb      	strb	r3, [r7, #14]
	GPIO_InitTypeDef gpio;

	while(bitstatus == bitstatus1)
 800282a:	e02f      	b.n	800288c <busyflag+0x70>
	{
		gpio.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6;
 800282c:	2378      	movs	r3, #120	; 0x78
 800282e:	607b      	str	r3, [r7, #4]
		gpio.GPIO_Mode = GPIO_Mode_IN;
 8002830:	2300      	movs	r3, #0
 8002832:	723b      	strb	r3, [r7, #8]
		gpio.GPIO_OType = GPIO_OType_PP;
 8002834:	2300      	movs	r3, #0
 8002836:	72bb      	strb	r3, [r7, #10]
		gpio.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002838:	2300      	movs	r3, #0
 800283a:	72fb      	strb	r3, [r7, #11]
		gpio.GPIO_Speed = GPIO_Speed_50MHz;
 800283c:	2302      	movs	r3, #2
 800283e:	727b      	strb	r3, [r7, #9]
		GPIO_Init(GPIOE, &gpio);
 8002840:	1d3b      	adds	r3, r7, #4
 8002842:	4619      	mov	r1, r3
 8002844:	481e      	ldr	r0, [pc, #120]	; (80028c0 <busyflag+0xa4>)
 8002846:	f7fe fc13 	bl	8001070 <GPIO_Init>

		GPIO_ResetBits(LCD_RS);
 800284a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800284e:	481d      	ldr	r0, [pc, #116]	; (80028c4 <busyflag+0xa8>)
 8002850:	f7fe fcc5 	bl	80011de <GPIO_ResetBits>
		GPIO_SetBits(LCD_RW);
 8002854:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002858:	481a      	ldr	r0, [pc, #104]	; (80028c4 <busyflag+0xa8>)
 800285a:	f7fe fcb1 	bl	80011c0 <GPIO_SetBits>

		DELAY_ms(1);
 800285e:	2001      	movs	r0, #1
 8002860:	f7ff fe3e 	bl	80024e0 <DELAY_ms>
		GPIO_SetBits(LCD_EN);
 8002864:	2101      	movs	r1, #1
 8002866:	4818      	ldr	r0, [pc, #96]	; (80028c8 <busyflag+0xac>)
 8002868:	f7fe fcaa 	bl	80011c0 <GPIO_SetBits>
		DELAY_ms(1);
 800286c:	2001      	movs	r0, #1
 800286e:	f7ff fe37 	bl	80024e0 <DELAY_ms>

		bitstatus = GPIO_ReadInputDataBit(LCD_D7);
 8002872:	2140      	movs	r1, #64	; 0x40
 8002874:	4812      	ldr	r0, [pc, #72]	; (80028c0 <busyflag+0xa4>)
 8002876:	f7fe fc89 	bl	800118c <GPIO_ReadInputDataBit>
 800287a:	4603      	mov	r3, r0
 800287c:	73fb      	strb	r3, [r7, #15]
		GPIO_ResetBits(LCD_EN);
 800287e:	2101      	movs	r1, #1
 8002880:	4811      	ldr	r0, [pc, #68]	; (80028c8 <busyflag+0xac>)
 8002882:	f7fe fcac 	bl	80011de <GPIO_ResetBits>
		DELAY_ms(1);
 8002886:	2001      	movs	r0, #1
 8002888:	f7ff fe2a 	bl	80024e0 <DELAY_ms>
	while(bitstatus == bitstatus1)
 800288c:	7bfa      	ldrb	r2, [r7, #15]
 800288e:	7bbb      	ldrb	r3, [r7, #14]
 8002890:	429a      	cmp	r2, r3
 8002892:	d0cb      	beq.n	800282c <busyflag+0x10>
	}

	gpio.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6;
 8002894:	2378      	movs	r3, #120	; 0x78
 8002896:	607b      	str	r3, [r7, #4]
	gpio.GPIO_Mode = GPIO_Mode_OUT;
 8002898:	2301      	movs	r3, #1
 800289a:	723b      	strb	r3, [r7, #8]
	gpio.GPIO_OType = GPIO_OType_PP;
 800289c:	2300      	movs	r3, #0
 800289e:	72bb      	strb	r3, [r7, #10]
	gpio.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	72fb      	strb	r3, [r7, #11]
	gpio.GPIO_Speed = GPIO_Speed_50MHz;
 80028a4:	2302      	movs	r3, #2
 80028a6:	727b      	strb	r3, [r7, #9]
	GPIO_Init(GPIOE, &gpio);
 80028a8:	1d3b      	adds	r3, r7, #4
 80028aa:	4619      	mov	r1, r3
 80028ac:	4804      	ldr	r0, [pc, #16]	; (80028c0 <busyflag+0xa4>)
 80028ae:	f7fe fbdf 	bl	8001070 <GPIO_Init>

	DELAY_ms(1);
 80028b2:	2001      	movs	r0, #1
 80028b4:	f7ff fe14 	bl	80024e0 <DELAY_ms>
}
 80028b8:	bf00      	nop
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40020800 	.word	0x40020800
 80028c8:	40020c00 	.word	0x40020c00

080028cc <LED_init>:
*/
#include "include.h"

// Stelt gebruikte I/O pinnen in.
void LED_init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80028d2:	2101      	movs	r1, #1
 80028d4:	2001      	movs	r0, #1
 80028d6:	f7fe fd83 	bl	80013e0 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80028da:	2101      	movs	r1, #1
 80028dc:	2002      	movs	r0, #2
 80028de:	f7fe fd7f 	bl	80013e0 <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef gpio;
	gpio.GPIO_OType = GPIO_OType_PP;
 80028e2:	2300      	movs	r3, #0
 80028e4:	71bb      	strb	r3, [r7, #6]
	gpio.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	71fb      	strb	r3, [r7, #7]
	gpio.GPIO_Speed = GPIO_Speed_50MHz;
 80028ea:	2302      	movs	r3, #2
 80028ec:	717b      	strb	r3, [r7, #5]
	gpio.GPIO_Mode = GPIO_Mode_OUT;
 80028ee:	2301      	movs	r3, #1
 80028f0:	713b      	strb	r3, [r7, #4]

	gpio.GPIO_Pin = LED_SER;
 80028f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028f6:	603b      	str	r3, [r7, #0]
	GPIO_Init(P_LED_SER, &gpio);
 80028f8:	463b      	mov	r3, r7
 80028fa:	4619      	mov	r1, r3
 80028fc:	4813      	ldr	r0, [pc, #76]	; (800294c <LED_init+0x80>)
 80028fe:	f7fe fbb7 	bl	8001070 <GPIO_Init>
	gpio.GPIO_Pin = LED_SCK;
 8002902:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002906:	603b      	str	r3, [r7, #0]
	GPIO_Init(P_LED_SCK, &gpio);
 8002908:	463b      	mov	r3, r7
 800290a:	4619      	mov	r1, r3
 800290c:	4810      	ldr	r0, [pc, #64]	; (8002950 <LED_init+0x84>)
 800290e:	f7fe fbaf 	bl	8001070 <GPIO_Init>
	gpio.GPIO_Pin = LED_RCK;
 8002912:	2302      	movs	r3, #2
 8002914:	603b      	str	r3, [r7, #0]
	GPIO_Init(P_LED_RCK, &gpio);
 8002916:	463b      	mov	r3, r7
 8002918:	4619      	mov	r1, r3
 800291a:	480d      	ldr	r0, [pc, #52]	; (8002950 <LED_init+0x84>)
 800291c:	f7fe fba8 	bl	8001070 <GPIO_Init>

	GPIO_ResetBits(P_LED_SER, LED_SER);
 8002920:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002924:	4809      	ldr	r0, [pc, #36]	; (800294c <LED_init+0x80>)
 8002926:	f7fe fc5a 	bl	80011de <GPIO_ResetBits>
    GPIO_ResetBits(P_LED_SCK, LED_SCK);
 800292a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800292e:	4808      	ldr	r0, [pc, #32]	; (8002950 <LED_init+0x84>)
 8002930:	f7fe fc55 	bl	80011de <GPIO_ResetBits>
    GPIO_SetBits(P_LED_RCK, LED_RCK);
 8002934:	2102      	movs	r1, #2
 8002936:	4806      	ldr	r0, [pc, #24]	; (8002950 <LED_init+0x84>)
 8002938:	f7fe fc42 	bl	80011c0 <GPIO_SetBits>

    LED_put(0); // all leds off
 800293c:	2000      	movs	r0, #0
 800293e:	f000 f809 	bl	8002954 <LED_put>
}
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40020000 	.word	0x40020000
 8002950:	40020400 	.word	0x40020400

08002954 <LED_put>:

// Zet de meegegeven waarde op de LED's
void LED_put(unsigned char led_byte)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	4603      	mov	r3, r0
 800295c:	71fb      	strb	r3, [r7, #7]
     unsigned short i;

     // Data uitklokken (wordt in buffer van schuifregister geplaatst)
     for(i=128; i>=1; i>>=1)
 800295e:	2380      	movs	r3, #128	; 0x80
 8002960:	81fb      	strh	r3, [r7, #14]
 8002962:	e01c      	b.n	800299e <LED_put+0x4a>
     {
          if(led_byte & i)
 8002964:	79fa      	ldrb	r2, [r7, #7]
 8002966:	89fb      	ldrh	r3, [r7, #14]
 8002968:	4013      	ands	r3, r2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d005      	beq.n	800297a <LED_put+0x26>
        	  GPIO_SetBits(P_LED_SER, LED_SER);
 800296e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002972:	4812      	ldr	r0, [pc, #72]	; (80029bc <LED_put+0x68>)
 8002974:	f7fe fc24 	bl	80011c0 <GPIO_SetBits>
 8002978:	e004      	b.n	8002984 <LED_put+0x30>
          else
        	  GPIO_ResetBits(P_LED_SER, LED_SER);
 800297a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800297e:	480f      	ldr	r0, [pc, #60]	; (80029bc <LED_put+0x68>)
 8002980:	f7fe fc2d 	bl	80011de <GPIO_ResetBits>
          GPIO_SetBits(P_LED_SCK, LED_SCK);
 8002984:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002988:	480d      	ldr	r0, [pc, #52]	; (80029c0 <LED_put+0x6c>)
 800298a:	f7fe fc19 	bl	80011c0 <GPIO_SetBits>
          GPIO_ResetBits(P_LED_SCK, LED_SCK);
 800298e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002992:	480b      	ldr	r0, [pc, #44]	; (80029c0 <LED_put+0x6c>)
 8002994:	f7fe fc23 	bl	80011de <GPIO_ResetBits>
     for(i=128; i>=1; i>>=1)
 8002998:	89fb      	ldrh	r3, [r7, #14]
 800299a:	085b      	lsrs	r3, r3, #1
 800299c:	81fb      	strh	r3, [r7, #14]
 800299e:	89fb      	ldrh	r3, [r7, #14]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1df      	bne.n	8002964 <LED_put+0x10>
     }
     GPIO_SetBits(P_LED_RCK, LED_RCK);
 80029a4:	2102      	movs	r1, #2
 80029a6:	4806      	ldr	r0, [pc, #24]	; (80029c0 <LED_put+0x6c>)
 80029a8:	f7fe fc0a 	bl	80011c0 <GPIO_SetBits>
     GPIO_ResetBits(P_LED_RCK, LED_RCK);
 80029ac:	2102      	movs	r1, #2
 80029ae:	4804      	ldr	r0, [pc, #16]	; (80029c0 <LED_put+0x6c>)
 80029b0:	f7fe fc15 	bl	80011de <GPIO_ResetBits>
}
 80029b4:	bf00      	nop
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40020000 	.word	0x40020000
 80029c0:	40020400 	.word	0x40020400

080029c4 <UART_init>:

char string[100];
int charcounter = 0;

void UART_init(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0

  /* --------------------------- System Clocks Configuration -----------------*/
  /* USART2 clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 80029ca:	2101      	movs	r1, #1
 80029cc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80029d0:	f7fe fd26 	bl	8001420 <RCC_APB1PeriphClockCmd>

  /* GPIOA clock enable */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80029d4:	2101      	movs	r1, #1
 80029d6:	2001      	movs	r0, #1
 80029d8:	f7fe fd02 	bl	80013e0 <RCC_AHB1PeriphClockCmd>

  GPIO_InitTypeDef GPIO_InitStructure;

  /*-------------------------- GPIO Configuration ----------------------------*/
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 80029dc:	230c      	movs	r3, #12
 80029de:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80029e0:	2302      	movs	r3, #2
 80029e2:	753b      	strb	r3, [r7, #20]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80029e4:	2300      	movs	r3, #0
 80029e6:	75bb      	strb	r3, [r7, #22]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80029e8:	2301      	movs	r3, #1
 80029ea:	75fb      	strb	r3, [r7, #23]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80029ec:	2302      	movs	r3, #2
 80029ee:	757b      	strb	r3, [r7, #21]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 80029f0:	f107 0310 	add.w	r3, r7, #16
 80029f4:	4619      	mov	r1, r3
 80029f6:	4816      	ldr	r0, [pc, #88]	; (8002a50 <UART_init+0x8c>)
 80029f8:	f7fe fb3a 	bl	8001070 <GPIO_Init>

  /* Connect USART pins to AF */
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);   // USART2_TX
 80029fc:	2207      	movs	r2, #7
 80029fe:	2102      	movs	r1, #2
 8002a00:	4813      	ldr	r0, [pc, #76]	; (8002a50 <UART_init+0x8c>)
 8002a02:	f7fe fbfb 	bl	80011fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);  // USART2_RX
 8002a06:	2207      	movs	r2, #7
 8002a08:	2103      	movs	r1, #3
 8002a0a:	4811      	ldr	r0, [pc, #68]	; (8002a50 <UART_init+0x8c>)
 8002a0c:	f7fe fbf6 	bl	80011fc <GPIO_PinAFConfig>
      - One Stop Bit
      - No parity
      - Hardware flow control disabled (RTS and CTS signals)
      - Receive and transmit enabled
*/
USART_InitStructure.USART_BaudRate = 115200;
 8002a10:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002a14:	603b      	str	r3, [r7, #0]
USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8002a16:	2300      	movs	r3, #0
 8002a18:	80bb      	strh	r3, [r7, #4]
USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	80fb      	strh	r3, [r7, #6]
USART_InitStructure.USART_Parity = USART_Parity_No;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	813b      	strh	r3, [r7, #8]
USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8002a22:	2300      	movs	r3, #0
 8002a24:	81bb      	strh	r3, [r7, #12]

USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8002a26:	230c      	movs	r3, #12
 8002a28:	817b      	strh	r3, [r7, #10]

USART_Init(USART2, &USART_InitStructure);
 8002a2a:	463b      	mov	r3, r7
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4809      	ldr	r0, [pc, #36]	; (8002a54 <UART_init+0x90>)
 8002a30:	f7fe ff64 	bl	80018fc <USART_Init>
USART_ITConfig(USART2,USART_IT_RXNE,ENABLE);
 8002a34:	2201      	movs	r2, #1
 8002a36:	f240 5125 	movw	r1, #1317	; 0x525
 8002a3a:	4806      	ldr	r0, [pc, #24]	; (8002a54 <UART_init+0x90>)
 8002a3c:	f7ff f84a 	bl	8001ad4 <USART_ITConfig>

USART_Cmd(USART2, ENABLE);
 8002a40:	2101      	movs	r1, #1
 8002a42:	4804      	ldr	r0, [pc, #16]	; (8002a54 <UART_init+0x90>)
 8002a44:	f7ff f814 	bl	8001a70 <USART_Cmd>

}
 8002a48:	bf00      	nop
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40020000 	.word	0x40020000
 8002a54:	40004400 	.word	0x40004400

08002a58 <UART_putchar>:

void UART_putchar(char c)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	71fb      	strb	r3, [r7, #7]
		while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET); // Wait for Empty
 8002a62:	bf00      	nop
 8002a64:	2180      	movs	r1, #128	; 0x80
 8002a66:	4808      	ldr	r0, [pc, #32]	; (8002a88 <UART_putchar+0x30>)
 8002a68:	f7ff f87c 	bl	8001b64 <USART_GetFlagStatus>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d0f8      	beq.n	8002a64 <UART_putchar+0xc>
		USART_SendData(USART2, c);
 8002a72:	79fb      	ldrb	r3, [r7, #7]
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	4619      	mov	r1, r3
 8002a78:	4803      	ldr	r0, [pc, #12]	; (8002a88 <UART_putchar+0x30>)
 8002a7a:	f7ff f819 	bl	8001ab0 <USART_SendData>

}
 8002a7e:	bf00      	nop
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40004400 	.word	0x40004400

08002a8c <UART_puts>:

void UART_puts(char *s)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
	volatile unsigned int i;
	for (i=0; s[i]; i++)
 8002a94:	2300      	movs	r3, #0
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	e009      	b.n	8002aae <UART_puts+0x22>
	{
		UART_putchar(s[i]);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff ffd8 	bl	8002a58 <UART_putchar>
	for (i=0; s[i]; i++)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1ef      	bne.n	8002a9a <UART_puts+0xe>
		//while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET); // Wait for Empty
		//USART_SendData(USART2, s[i]);
	}
}
 8002aba:	bf00      	nop
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
	...

08002ac4 <USART2_IRQHandler>:
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
}

void USART2_IRQHandler(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
	// check if the USART2 receive interrupt flag was set
	if( USART_GetITStatus(USART2, USART_IT_RXNE))
 8002aca:	f240 5125 	movw	r1, #1317	; 0x525
 8002ace:	4827      	ldr	r0, [pc, #156]	; (8002b6c <USART2_IRQHandler+0xa8>)
 8002ad0:	f7ff f864 	bl	8001b9c <USART_GetITStatus>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d044      	beq.n	8002b64 <USART2_IRQHandler+0xa0>
	{
		USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 8002ada:	f240 5125 	movw	r1, #1317	; 0x525
 8002ade:	4823      	ldr	r0, [pc, #140]	; (8002b6c <USART2_IRQHandler+0xa8>)
 8002ae0:	f7ff f8b7 	bl	8001c52 <USART_ClearITPendingBit>
		int i;
		char c = USART2->DR & 0xFF;
 8002ae4:	4b21      	ldr	r3, [pc, #132]	; (8002b6c <USART2_IRQHandler+0xa8>)
 8002ae6:	889b      	ldrh	r3, [r3, #4]
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	70fb      	strb	r3, [r7, #3]
//		LCD_XY(10,1);
//		LCD_put("UART:   ");
//		LCD_XY(15,1);
//		LCD_putchar(c);

		if(c > 64 && c < 91)
 8002aec:	78fb      	ldrb	r3, [r7, #3]
 8002aee:	2b40      	cmp	r3, #64	; 0x40
 8002af0:	d905      	bls.n	8002afe <USART2_IRQHandler+0x3a>
 8002af2:	78fb      	ldrb	r3, [r7, #3]
 8002af4:	2b5a      	cmp	r3, #90	; 0x5a
 8002af6:	d802      	bhi.n	8002afe <USART2_IRQHandler+0x3a>
			c += 32;
 8002af8:	78fb      	ldrb	r3, [r7, #3]
 8002afa:	3320      	adds	r3, #32
 8002afc:	70fb      	strb	r3, [r7, #3]
		if(c <= 13)
 8002afe:	78fb      	ldrb	r3, [r7, #3]
 8002b00:	2b0d      	cmp	r3, #13
 8002b02:	d81d      	bhi.n	8002b40 <USART2_IRQHandler+0x7c>
		{
			for(i=0;i<charcounter;i++)
 8002b04:	2300      	movs	r3, #0
 8002b06:	607b      	str	r3, [r7, #4]
 8002b08:	e00b      	b.n	8002b22 <USART2_IRQHandler+0x5e>
			{
				USART_SendData(USART2, string[i]); // Echo Char
 8002b0a:	4a19      	ldr	r2, [pc, #100]	; (8002b70 <USART2_IRQHandler+0xac>)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4413      	add	r3, r2
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	4619      	mov	r1, r3
 8002b16:	4815      	ldr	r0, [pc, #84]	; (8002b6c <USART2_IRQHandler+0xa8>)
 8002b18:	f7fe ffca 	bl	8001ab0 <USART_SendData>
			for(i=0;i<charcounter;i++)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	607b      	str	r3, [r7, #4]
 8002b22:	4b14      	ldr	r3, [pc, #80]	; (8002b74 <USART2_IRQHandler+0xb0>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	dbee      	blt.n	8002b0a <USART2_IRQHandler+0x46>
			}
			charcounter = 0;
 8002b2c:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <USART2_IRQHandler+0xb0>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
			USART_SendData(USART2, c); // Echo Char
 8002b32:	78fb      	ldrb	r3, [r7, #3]
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	4619      	mov	r1, r3
 8002b38:	480c      	ldr	r0, [pc, #48]	; (8002b6c <USART2_IRQHandler+0xa8>)
 8002b3a:	f7fe ffb9 	bl	8001ab0 <USART_SendData>
 8002b3e:	e009      	b.n	8002b54 <USART2_IRQHandler+0x90>
		}
		else
		{
			string[charcounter] = c;
 8002b40:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <USART2_IRQHandler+0xb0>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	490a      	ldr	r1, [pc, #40]	; (8002b70 <USART2_IRQHandler+0xac>)
 8002b46:	78fa      	ldrb	r2, [r7, #3]
 8002b48:	54ca      	strb	r2, [r1, r3]
			charcounter++;
 8002b4a:	4b0a      	ldr	r3, [pc, #40]	; (8002b74 <USART2_IRQHandler+0xb0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	4a08      	ldr	r2, [pc, #32]	; (8002b74 <USART2_IRQHandler+0xb0>)
 8002b52:	6013      	str	r3, [r2, #0]
		}


		while (USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET); // Wait for Empty
 8002b54:	bf00      	nop
 8002b56:	2140      	movs	r1, #64	; 0x40
 8002b58:	4804      	ldr	r0, [pc, #16]	; (8002b6c <USART2_IRQHandler+0xa8>)
 8002b5a:	f7ff f803 	bl	8001b64 <USART_GetFlagStatus>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0f8      	beq.n	8002b56 <USART2_IRQHandler+0x92>

	}
}
 8002b64:	bf00      	nop
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40004400 	.word	0x40004400
 8002b70:	20012f34 	.word	0x20012f34
 8002b74:	20000218 	.word	0x20000218

08002b78 <UART_putint>:
    return rc;
}
// Stuurt meegegeven getal uit op de UART

void UART_putint(unsigned int num)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
    UART_putnum(num, 10);
 8002b80:	210a      	movs	r1, #10
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f804 	bl	8002b90 <UART_putnum>
}
 8002b88:	bf00      	nop
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <UART_putnum>:

// Stuurt meegegeven getal uit op de UART in het aangegeven getallenstelsel
void UART_putnum(unsigned int num, unsigned char deel)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	70fb      	strb	r3, [r7, #3]
    static unsigned char chars[16] = "0123456789ABCDEF";
    unsigned int rest;
    signed char c[16];
    signed int i=15;
 8002b9c:	230f      	movs	r3, #15
 8002b9e:	61fb      	str	r3, [r7, #28]

    // Zet de integer om naar een string
    if(num==0)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d129      	bne.n	8002bfa <UART_putnum+0x6a>
    {
        c[i]='0';
 8002ba6:	f107 0208 	add.w	r2, r7, #8
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	4413      	add	r3, r2
 8002bae:	2230      	movs	r2, #48	; 0x30
 8002bb0:	701a      	strb	r2, [r3, #0]
        i--;
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	61fb      	str	r3, [r7, #28]
 8002bb8:	e039      	b.n	8002c2e <UART_putnum+0x9e>
    }
    else
    {
        while(num>0)
        {
            rest=num%deel;
 8002bba:	78fa      	ldrb	r2, [r7, #3]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	fbb3 f1f2 	udiv	r1, r3, r2
 8002bc2:	fb02 f201 	mul.w	r2, r2, r1
 8002bc6:	1a9b      	subs	r3, r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
            num/=deel;
 8002bca:	78fb      	ldrb	r3, [r7, #3]
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd2:	607b      	str	r3, [r7, #4]
            c[i]=chars[rest];
 8002bd4:	4a19      	ldr	r2, [pc, #100]	; (8002c3c <UART_putnum+0xac>)
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	4413      	add	r3, r2
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	b259      	sxtb	r1, r3
 8002bde:	f107 0208 	add.w	r2, r7, #8
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	4413      	add	r3, r2
 8002be6:	460a      	mov	r2, r1
 8002be8:	701a      	strb	r2, [r3, #0]
            i--;
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	3b01      	subs	r3, #1
 8002bee:	61fb      	str	r3, [r7, #28]

            if(i==0) // it ends here
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <UART_putnum+0x6a>
                num=0;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	607b      	str	r3, [r7, #4]
        while(num>0)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1dc      	bne.n	8002bba <UART_putnum+0x2a>
        }
    }


    // Stuur de string uit
    while(i<15)
 8002c00:	e015      	b.n	8002c2e <UART_putnum+0x9e>
    {
        i++;
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	3301      	adds	r3, #1
 8002c06:	61fb      	str	r3, [r7, #28]
        // Wacht tot de buffer leeg is
        while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET); // Wait for Empty
 8002c08:	bf00      	nop
 8002c0a:	2180      	movs	r1, #128	; 0x80
 8002c0c:	480c      	ldr	r0, [pc, #48]	; (8002c40 <UART_putnum+0xb0>)
 8002c0e:	f7fe ffa9 	bl	8001b64 <USART_GetFlagStatus>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0f8      	beq.n	8002c0a <UART_putnum+0x7a>
        USART_SendData(USART2, c[i]);
 8002c18:	f107 0208 	add.w	r2, r7, #8
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f993 3000 	ldrsb.w	r3, [r3]
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	4619      	mov	r1, r3
 8002c28:	4805      	ldr	r0, [pc, #20]	; (8002c40 <UART_putnum+0xb0>)
 8002c2a:	f7fe ff41 	bl	8001ab0 <USART_SendData>
    while(i<15)
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	2b0e      	cmp	r3, #14
 8002c32:	dde6      	ble.n	8002c02 <UART_putnum+0x72>

    }
}
 8002c34:	bf00      	nop
 8002c36:	3720      	adds	r7, #32
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	20000014 	.word	0x20000014
 8002c40:	40004400 	.word	0x40004400

08002c44 <UART_get>:

// Ontvang een karakter via de UART
// niet echt nodig als routine maar als wrapper voor compatabiliteit. Let op geen -1 als er geen char is ontvangen!

char UART_get(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
    char uart_char = -1;
 8002c4a:	23ff      	movs	r3, #255	; 0xff
 8002c4c:	71fb      	strb	r3, [r7, #7]
    if (USART_GetFlagStatus(USART2, USART_FLAG_RXNE)== SET)  // check for data available
 8002c4e:	2120      	movs	r1, #32
 8002c50:	4807      	ldr	r0, [pc, #28]	; (8002c70 <UART_get+0x2c>)
 8002c52:	f7fe ff87 	bl	8001b64 <USART_GetFlagStatus>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d103      	bne.n	8002c64 <UART_get+0x20>
    	 uart_char= USART2->DR & 0xFF; // and read the data from peripheral
 8002c5c:	4b04      	ldr	r3, [pc, #16]	; (8002c70 <UART_get+0x2c>)
 8002c5e:	889b      	ldrh	r3, [r3, #4]
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	71fb      	strb	r3, [r7, #7]
    return uart_char;
 8002c64:	79fb      	ldrb	r3, [r7, #7]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40004400 	.word	0x40004400

08002c74 <UART_gets>:
// args: char *readbuffer
//       int   echo, when TRUE, send read-char to UART
// remark: ARM sends -1 if buffer is empty
//         LF is cleared if set in terminal-program
void UART_gets(char *s, int echo)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
	while (1)
	{
	 	*s = UART_get();
 8002c7e:	f7ff ffe1 	bl	8002c44 <UART_get>
 8002c82:	4603      	mov	r3, r0
 8002c84:	461a      	mov	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	701a      	strb	r2, [r3, #0]

	 	if (*s==-1)             // check for data available
	 		continue;

	 	if (*s==0xff || *s==LF) // if no data or LF, continue
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2bff      	cmp	r3, #255	; 0xff
 8002c90:	d017      	beq.n	8002cc2 <UART_gets+0x4e>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	2b0a      	cmp	r3, #10
 8002c98:	d013      	beq.n	8002cc2 <UART_gets+0x4e>
			continue;

		if (echo)              // if output-flag set
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d004      	beq.n	8002caa <UART_gets+0x36>
			UART_putchar(*s);  // to read what u entered
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff fed7 	bl	8002a58 <UART_putchar>

		if (*s==CR)            // if enter pressed
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b0d      	cmp	r3, #13
 8002cb0:	d103      	bne.n	8002cba <UART_gets+0x46>
		{
			*s = '\0';         // ignore char and close string
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	701a      	strb	r2, [r3, #0]
		    return;            // buf ready, exit loop
 8002cb8:	e005      	b.n	8002cc6 <UART_gets+0x52>
		}
		s++;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	607b      	str	r3, [r7, #4]
 8002cc0:	e7dd      	b.n	8002c7e <UART_gets+0xa>
			continue;
 8002cc2:	bf00      	nop
	 	*s = UART_get();
 8002cc4:	e7db      	b.n	8002c7e <UART_gets+0xa>
	}
}
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002ccc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d04 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002cd0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002cd2:	e003      	b.n	8002cdc <LoopCopyDataInit>

08002cd4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002cd4:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002cd6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002cd8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002cda:	3104      	adds	r1, #4

08002cdc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002cdc:	480b      	ldr	r0, [pc, #44]	; (8002d0c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002cde:	4b0c      	ldr	r3, [pc, #48]	; (8002d10 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002ce0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002ce2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ce4:	d3f6      	bcc.n	8002cd4 <CopyDataInit>
  ldr  r2, =_sbss
 8002ce6:	4a0b      	ldr	r2, [pc, #44]	; (8002d14 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002ce8:	e002      	b.n	8002cf0 <LoopFillZerobss>

08002cea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002cea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002cec:	f842 3b04 	str.w	r3, [r2], #4

08002cf0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002cf0:	4b09      	ldr	r3, [pc, #36]	; (8002d18 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002cf2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002cf4:	d3f9      	bcc.n	8002cea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002cf6:	f000 f841 	bl	8002d7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cfa:	f000 fce9 	bl	80036d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cfe:	f7ff faf5 	bl	80022ec <main>
  bx  lr    
 8002d02:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d04:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002d08:	08003f2c 	.word	0x08003f2c
  ldr  r0, =_sdata
 8002d0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002d10:	200001f8 	.word	0x200001f8
  ldr  r2, =_sbss
 8002d14:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 8002d18:	20012f9c 	.word	0x20012f9c

08002d1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d1c:	e7fe      	b.n	8002d1c <ADC_IRQHandler>

08002d1e <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	af00      	add	r7, sp, #0
}
 8002d22:	bf00      	nop
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002d30:	e7fe      	b.n	8002d30 <HardFault_Handler+0x4>

08002d32 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002d32:	b480      	push	{r7}
 8002d34:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002d36:	e7fe      	b.n	8002d36 <MemManage_Handler+0x4>

08002d38 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002d3c:	e7fe      	b.n	8002d3c <BusFault_Handler+0x4>

08002d3e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002d42:	e7fe      	b.n	8002d42 <UsageFault_Handler+0x4>

08002d44 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
}
 8002d48:	bf00      	nop
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002d52:	b480      	push	{r7}
 8002d54:	af00      	add	r7, sp, #0
}
 8002d56:	bf00      	nop
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
}
 8002d64:	bf00      	nop
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8002d72:	bf00      	nop
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d80:	4a16      	ldr	r2, [pc, #88]	; (8002ddc <SystemInit+0x60>)
 8002d82:	4b16      	ldr	r3, [pc, #88]	; (8002ddc <SystemInit+0x60>)
 8002d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002d90:	4a13      	ldr	r2, [pc, #76]	; (8002de0 <SystemInit+0x64>)
 8002d92:	4b13      	ldr	r3, [pc, #76]	; (8002de0 <SystemInit+0x64>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f043 0301 	orr.w	r3, r3, #1
 8002d9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002d9c:	4b10      	ldr	r3, [pc, #64]	; (8002de0 <SystemInit+0x64>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002da2:	4a0f      	ldr	r2, [pc, #60]	; (8002de0 <SystemInit+0x64>)
 8002da4:	4b0e      	ldr	r3, [pc, #56]	; (8002de0 <SystemInit+0x64>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002dac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002db0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002db2:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <SystemInit+0x64>)
 8002db4:	4a0b      	ldr	r2, [pc, #44]	; (8002de4 <SystemInit+0x68>)
 8002db6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002db8:	4a09      	ldr	r2, [pc, #36]	; (8002de0 <SystemInit+0x64>)
 8002dba:	4b09      	ldr	r3, [pc, #36]	; (8002de0 <SystemInit+0x64>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dc2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002dc4:	4b06      	ldr	r3, [pc, #24]	; (8002de0 <SystemInit+0x64>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8002dca:	f000 f80d 	bl	8002de8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002dce:	4b03      	ldr	r3, [pc, #12]	; (8002ddc <SystemInit+0x60>)
 8002dd0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002dd4:	609a      	str	r2, [r3, #8]
#endif
}
 8002dd6:	bf00      	nop
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	e000ed00 	.word	0xe000ed00
 8002de0:	40023800 	.word	0x40023800
 8002de4:	24003010 	.word	0x24003010

08002de8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002dee:	2300      	movs	r3, #0
 8002df0:	607b      	str	r3, [r7, #4]
 8002df2:	2300      	movs	r3, #0
 8002df4:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002df6:	4a36      	ldr	r2, [pc, #216]	; (8002ed0 <SetSysClock+0xe8>)
 8002df8:	4b35      	ldr	r3, [pc, #212]	; (8002ed0 <SetSysClock+0xe8>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e00:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002e02:	4b33      	ldr	r3, [pc, #204]	; (8002ed0 <SetSysClock+0xe8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d103      	bne.n	8002e20 <SetSysClock+0x38>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002e1e:	d1f0      	bne.n	8002e02 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002e20:	4b2b      	ldr	r3, [pc, #172]	; (8002ed0 <SetSysClock+0xe8>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d002      	beq.n	8002e32 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	603b      	str	r3, [r7, #0]
 8002e30:	e001      	b.n	8002e36 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002e32:	2300      	movs	r3, #0
 8002e34:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d142      	bne.n	8002ec2 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002e3c:	4a24      	ldr	r2, [pc, #144]	; (8002ed0 <SetSysClock+0xe8>)
 8002e3e:	4b24      	ldr	r3, [pc, #144]	; (8002ed0 <SetSysClock+0xe8>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e46:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8002e48:	4a22      	ldr	r2, [pc, #136]	; (8002ed4 <SetSysClock+0xec>)
 8002e4a:	4b22      	ldr	r3, [pc, #136]	; (8002ed4 <SetSysClock+0xec>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e52:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8002e54:	4a1e      	ldr	r2, [pc, #120]	; (8002ed0 <SetSysClock+0xe8>)
 8002e56:	4b1e      	ldr	r3, [pc, #120]	; (8002ed0 <SetSysClock+0xe8>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8002e5c:	4a1c      	ldr	r2, [pc, #112]	; (8002ed0 <SetSysClock+0xe8>)
 8002e5e:	4b1c      	ldr	r3, [pc, #112]	; (8002ed0 <SetSysClock+0xe8>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e66:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8002e68:	4a19      	ldr	r2, [pc, #100]	; (8002ed0 <SetSysClock+0xe8>)
 8002e6a:	4b19      	ldr	r3, [pc, #100]	; (8002ed0 <SetSysClock+0xe8>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8002e72:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8002e74:	4b16      	ldr	r3, [pc, #88]	; (8002ed0 <SetSysClock+0xe8>)
 8002e76:	4a18      	ldr	r2, [pc, #96]	; (8002ed8 <SetSysClock+0xf0>)
 8002e78:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002e7a:	4a15      	ldr	r2, [pc, #84]	; (8002ed0 <SetSysClock+0xe8>)
 8002e7c:	4b14      	ldr	r3, [pc, #80]	; (8002ed0 <SetSysClock+0xe8>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e84:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002e86:	bf00      	nop
 8002e88:	4b11      	ldr	r3, [pc, #68]	; (8002ed0 <SetSysClock+0xe8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0f9      	beq.n	8002e88 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8002e94:	4b11      	ldr	r3, [pc, #68]	; (8002edc <SetSysClock+0xf4>)
 8002e96:	f240 6205 	movw	r2, #1541	; 0x605
 8002e9a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002e9c:	4a0c      	ldr	r2, [pc, #48]	; (8002ed0 <SetSysClock+0xe8>)
 8002e9e:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <SetSysClock+0xe8>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f023 0303 	bic.w	r3, r3, #3
 8002ea6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8002ea8:	4a09      	ldr	r2, [pc, #36]	; (8002ed0 <SetSysClock+0xe8>)
 8002eaa:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <SetSysClock+0xe8>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f043 0302 	orr.w	r3, r3, #2
 8002eb2:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8002eb4:	bf00      	nop
 8002eb6:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <SetSysClock+0xe8>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 030c 	and.w	r3, r3, #12
 8002ebe:	2b08      	cmp	r3, #8
 8002ec0:	d1f9      	bne.n	8002eb6 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	40007000 	.word	0x40007000
 8002ed8:	07405408 	.word	0x07405408
 8002edc:	40023c00 	.word	0x40023c00

08002ee0 <UB_VGA_Screen_Init>:

//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
  uint16_t xp,yp;

  VGA.hsync_cnt=0;
 8002ee6:	4b1b      	ldr	r3, [pc, #108]	; (8002f54 <UB_VGA_Screen_Init+0x74>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	801a      	strh	r2, [r3, #0]
  VGA.start_adr=0;
 8002eec:	4b19      	ldr	r3, [pc, #100]	; (8002f54 <UB_VGA_Screen_Init+0x74>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg=0;
 8002ef2:	4b18      	ldr	r3, [pc, #96]	; (8002f54 <UB_VGA_Screen_Init+0x74>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	609a      	str	r2, [r3, #8]

  // RAM init total black
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8002ef8:	2300      	movs	r3, #0
 8002efa:	80bb      	strh	r3, [r7, #4]
 8002efc:	e017      	b.n	8002f2e <UB_VGA_Screen_Init+0x4e>
    for(xp=0;xp<(VGA_DISPLAY_X+1);xp++) {
 8002efe:	2300      	movs	r3, #0
 8002f00:	80fb      	strh	r3, [r7, #6]
 8002f02:	e00d      	b.n	8002f20 <UB_VGA_Screen_Init+0x40>
      VGA_RAM1[(yp*(VGA_DISPLAY_X+1))+xp]=0;
 8002f04:	88ba      	ldrh	r2, [r7, #4]
 8002f06:	4613      	mov	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4413      	add	r3, r2
 8002f0c:	019b      	lsls	r3, r3, #6
 8002f0e:	441a      	add	r2, r3
 8002f10:	88fb      	ldrh	r3, [r7, #6]
 8002f12:	4413      	add	r3, r2
 8002f14:	4a10      	ldr	r2, [pc, #64]	; (8002f58 <UB_VGA_Screen_Init+0x78>)
 8002f16:	2100      	movs	r1, #0
 8002f18:	54d1      	strb	r1, [r2, r3]
    for(xp=0;xp<(VGA_DISPLAY_X+1);xp++) {
 8002f1a:	88fb      	ldrh	r3, [r7, #6]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	80fb      	strh	r3, [r7, #6]
 8002f20:	88fb      	ldrh	r3, [r7, #6]
 8002f22:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002f26:	d9ed      	bls.n	8002f04 <UB_VGA_Screen_Init+0x24>
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8002f28:	88bb      	ldrh	r3, [r7, #4]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	80bb      	strh	r3, [r7, #4]
 8002f2e:	88bb      	ldrh	r3, [r7, #4]
 8002f30:	2bef      	cmp	r3, #239	; 0xef
 8002f32:	d9e4      	bls.n	8002efe <UB_VGA_Screen_Init+0x1e>
    }
  }

  // init IO-Pins
  P_VGA_InitIO();
 8002f34:	f000 f85e 	bl	8002ff4 <P_VGA_InitIO>
  // init Timer
  P_VGA_InitTIM();
 8002f38:	f000 f8b0 	bl	800309c <P_VGA_InitTIM>
  // init DMA
  P_VGA_InitDMA();
 8002f3c:	f000 f940 	bl	80031c0 <P_VGA_InitDMA>
  // init Interrupts
  P_VGA_InitINT();
 8002f40:	f000 f912 	bl	8003168 <P_VGA_InitINT>

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg=DMA2_Stream5->CR;
 8002f44:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <UB_VGA_Screen_Init+0x7c>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a02      	ldr	r2, [pc, #8]	; (8002f54 <UB_VGA_Screen_Init+0x74>)
 8002f4a:	6093      	str	r3, [r2, #8]
}
 8002f4c:	bf00      	nop
 8002f4e:	3708      	adds	r7, #8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	20000228 	.word	0x20000228
 8002f58:	20000234 	.word	0x20000234
 8002f5c:	40026488 	.word	0x40026488

08002f60 <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	81bb      	strh	r3, [r7, #12]
 8002f6e:	e012      	b.n	8002f96 <UB_VGA_FillScreen+0x36>
    for(xp=0;xp<VGA_DISPLAY_X;xp++) {
 8002f70:	2300      	movs	r3, #0
 8002f72:	81fb      	strh	r3, [r7, #14]
 8002f74:	e008      	b.n	8002f88 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp,yp,color);
 8002f76:	79fa      	ldrb	r2, [r7, #7]
 8002f78:	89b9      	ldrh	r1, [r7, #12]
 8002f7a:	89fb      	ldrh	r3, [r7, #14]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 f811 	bl	8002fa4 <UB_VGA_SetPixel>
    for(xp=0;xp<VGA_DISPLAY_X;xp++) {
 8002f82:	89fb      	ldrh	r3, [r7, #14]
 8002f84:	3301      	adds	r3, #1
 8002f86:	81fb      	strh	r3, [r7, #14]
 8002f88:	89fb      	ldrh	r3, [r7, #14]
 8002f8a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002f8e:	d3f2      	bcc.n	8002f76 <UB_VGA_FillScreen+0x16>
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8002f90:	89bb      	ldrh	r3, [r7, #12]
 8002f92:	3301      	adds	r3, #1
 8002f94:	81bb      	strh	r3, [r7, #12]
 8002f96:	89bb      	ldrh	r3, [r7, #12]
 8002f98:	2bef      	cmp	r3, #239	; 0xef
 8002f9a:	d9e9      	bls.n	8002f70 <UB_VGA_FillScreen+0x10>
    }
  }
}
 8002f9c:	bf00      	nop
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	4603      	mov	r3, r0
 8002fac:	80fb      	strh	r3, [r7, #6]
 8002fae:	460b      	mov	r3, r1
 8002fb0:	80bb      	strh	r3, [r7, #4]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	70fb      	strb	r3, [r7, #3]
  if(xp>=VGA_DISPLAY_X) xp=0;
 8002fb6:	88fb      	ldrh	r3, [r7, #6]
 8002fb8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002fbc:	d301      	bcc.n	8002fc2 <UB_VGA_SetPixel+0x1e>
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	80fb      	strh	r3, [r7, #6]
  if(yp>=VGA_DISPLAY_Y) yp=0;
 8002fc2:	88bb      	ldrh	r3, [r7, #4]
 8002fc4:	2bef      	cmp	r3, #239	; 0xef
 8002fc6:	d901      	bls.n	8002fcc <UB_VGA_SetPixel+0x28>
 8002fc8:	2300      	movs	r3, #0
 8002fca:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp*(VGA_DISPLAY_X+1))+xp]=color;
 8002fcc:	88ba      	ldrh	r2, [r7, #4]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	019b      	lsls	r3, r3, #6
 8002fd6:	441a      	add	r2, r3
 8002fd8:	88fb      	ldrh	r3, [r7, #6]
 8002fda:	4413      	add	r3, r2
 8002fdc:	4904      	ldr	r1, [pc, #16]	; (8002ff0 <UB_VGA_SetPixel+0x4c>)
 8002fde:	78fa      	ldrb	r2, [r7, #3]
 8002fe0:	54ca      	strb	r2, [r1, r3]
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	20000234 	.word	0x20000234

08002ff4 <P_VGA_InitIO>:
//--------------------------------------------------------------
// interne Funktionen
// init aller IO-Pins
//--------------------------------------------------------------
void P_VGA_InitIO(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
  // init RGB-Pins (PE8 - PE15)
  // as normal GPIOs
  //---------------------------------------------
 
  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	2010      	movs	r0, #16
 8002ffe:	f7fe f9ef 	bl	80013e0 <RCC_AHB1PeriphClockCmd>

  // Config as Digital output
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 |
 8003002:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8003006:	603b      	str	r3, [r7, #0]
        GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8003008:	2301      	movs	r3, #1
 800300a:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800300c:	2300      	movs	r3, #0
 800300e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8003010:	2301      	movs	r3, #1
 8003012:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8003014:	2303      	movs	r3, #3
 8003016:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOE, &GPIO_InitStructure);
 8003018:	463b      	mov	r3, r7
 800301a:	4619      	mov	r1, r3
 800301c:	481d      	ldr	r0, [pc, #116]	; (8003094 <P_VGA_InitIO+0xa0>)
 800301e:	f7fe f827 	bl	8001070 <GPIO_Init>

  GPIOE->BSRRH = VGA_GPIO_HINIBBLE;
 8003022:	4b1c      	ldr	r3, [pc, #112]	; (8003094 <P_VGA_InitIO+0xa0>)
 8003024:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8003028:	835a      	strh	r2, [r3, #26]
  // init of the H-Sync Pin (PB11)
  // using Timer2 and CH4
  //---------------------------------------------

  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800302a:	2101      	movs	r1, #1
 800302c:	2002      	movs	r0, #2
 800302e:	f7fe f9d7 	bl	80013e0 <RCC_AHB1PeriphClockCmd>

  // Config Pins as Digital-out
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 8003032:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003036:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8003038:	2302      	movs	r3, #2
 800303a:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 800303c:	2303      	movs	r3, #3
 800303e:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8003040:	2300      	movs	r3, #0
 8003042:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 8003044:	2301      	movs	r3, #1
 8003046:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003048:	463b      	mov	r3, r7
 800304a:	4619      	mov	r1, r3
 800304c:	4812      	ldr	r0, [pc, #72]	; (8003098 <P_VGA_InitIO+0xa4>)
 800304e:	f7fe f80f 	bl	8001070 <GPIO_Init>

  // alternative function connect with IO
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_TIM2);
 8003052:	2201      	movs	r2, #1
 8003054:	210b      	movs	r1, #11
 8003056:	4810      	ldr	r0, [pc, #64]	; (8003098 <P_VGA_InitIO+0xa4>)
 8003058:	f7fe f8d0 	bl	80011fc <GPIO_PinAFConfig>
  // init of V-Sync Pin (PB12)
  // using GPIO
  //---------------------------------------------

  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800305c:	2101      	movs	r1, #1
 800305e:	2002      	movs	r0, #2
 8003060:	f7fe f9be 	bl	80013e0 <RCC_AHB1PeriphClockCmd>

  // Config of the Pins as Digital out
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 8003064:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003068:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800306a:	2301      	movs	r3, #1
 800306c:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800306e:	2300      	movs	r3, #0
 8003070:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8003072:	2301      	movs	r3, #1
 8003074:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8003076:	2303      	movs	r3, #3
 8003078:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 800307a:	463b      	mov	r3, r7
 800307c:	4619      	mov	r1, r3
 800307e:	4806      	ldr	r0, [pc, #24]	; (8003098 <P_VGA_InitIO+0xa4>)
 8003080:	f7fd fff6 	bl	8001070 <GPIO_Init>

  GPIOB->BSRRL = GPIO_Pin_12;
 8003084:	4b04      	ldr	r3, [pc, #16]	; (8003098 <P_VGA_InitIO+0xa4>)
 8003086:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800308a:	831a      	strh	r2, [r3, #24]
}
 800308c:	bf00      	nop
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40021000 	.word	0x40021000
 8003098:	40020400 	.word	0x40020400

0800309c <P_VGA_InitTIM>:
//--------------------------------------------------------------
// internal Function
// init Timer
//--------------------------------------------------------------
void P_VGA_InitTIM(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b088      	sub	sp, #32
 80030a0:	af00      	add	r7, sp, #0
  // init of Timer1 for
  // Pixeldata via DMA
  //---------------------------------------------

  // Clock enable
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 80030a2:	2101      	movs	r1, #1
 80030a4:	2001      	movs	r0, #1
 80030a6:	f7fe f9db 	bl	8001460 <RCC_APB2PeriphClockCmd>

  // Timer1 init
  TIM_TimeBaseStructure.TIM_Period =  VGA_TIM1_PERIODE;
 80030aa:	230b      	movs	r3, #11
 80030ac:	61bb      	str	r3, [r7, #24]
  TIM_TimeBaseStructure.TIM_Prescaler = VGA_TIM1_PRESCALE;
 80030ae:	2300      	movs	r3, #0
 80030b0:	82bb      	strh	r3, [r7, #20]
  TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 80030b2:	2300      	movs	r3, #0
 80030b4:	83bb      	strh	r3, [r7, #28]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80030b6:	2300      	movs	r3, #0
 80030b8:	82fb      	strh	r3, [r7, #22]
  TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 80030ba:	f107 0314 	add.w	r3, r7, #20
 80030be:	4619      	mov	r1, r3
 80030c0:	4828      	ldr	r0, [pc, #160]	; (8003164 <P_VGA_InitTIM+0xc8>)
 80030c2:	f7fe f9ed 	bl	80014a0 <TIM_TimeBaseInit>
  // CH4 for HSYNC-Signal
  // CH3 for DMA Trigger start
  //---------------------------------------------

  // Clock enable
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80030c6:	2101      	movs	r1, #1
 80030c8:	2001      	movs	r0, #1
 80030ca:	f7fe f9a9 	bl	8001420 <RCC_APB1PeriphClockCmd>

  // Timer2 init
  TIM_TimeBaseStructure.TIM_Period = VGA_TIM2_HSYNC_PERIODE;
 80030ce:	f640 236b 	movw	r3, #2667	; 0xa6b
 80030d2:	61bb      	str	r3, [r7, #24]
  TIM_TimeBaseStructure.TIM_Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 80030d4:	2300      	movs	r3, #0
 80030d6:	82bb      	strh	r3, [r7, #20]
  TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 80030d8:	2300      	movs	r3, #0
 80030da:	83bb      	strh	r3, [r7, #28]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80030dc:	2300      	movs	r3, #0
 80030de:	82fb      	strh	r3, [r7, #22]
  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 80030e0:	f107 0314 	add.w	r3, r7, #20
 80030e4:	4619      	mov	r1, r3
 80030e6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80030ea:	f7fe f9d9 	bl	80014a0 <TIM_TimeBaseInit>

  // Timer2 Channel 3 ( for DMA Trigger start)
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 80030ee:	2360      	movs	r3, #96	; 0x60
 80030f0:	803b      	strh	r3, [r7, #0]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 80030f2:	2301      	movs	r3, #1
 80030f4:	807b      	strh	r3, [r7, #2]
  TIM_OCInitStructure.TIM_Pulse = VGA_TIM2_HTRIGGER_START-VGA_TIM2_DMA_DELAY;
 80030f6:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 80030fa:	60bb      	str	r3, [r7, #8]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 80030fc:	2302      	movs	r3, #2
 80030fe:	81bb      	strh	r3, [r7, #12]
  TIM_OC3Init(TIM2, &TIM_OCInitStructure);
 8003100:	463b      	mov	r3, r7
 8003102:	4619      	mov	r1, r3
 8003104:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003108:	f7fe fa76 	bl	80015f8 <TIM_OC3Init>
  TIM_OC3PreloadConfig(TIM2, TIM_OCPreload_Enable);
 800310c:	2108      	movs	r1, #8
 800310e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003112:	f7fe fb5f 	bl	80017d4 <TIM_OC3PreloadConfig>

  // Timer2 Channel 4 (for HSYNC)
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8003116:	2360      	movs	r3, #96	; 0x60
 8003118:	803b      	strh	r3, [r7, #0]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 800311a:	2301      	movs	r3, #1
 800311c:	807b      	strh	r3, [r7, #2]
  TIM_OCInitStructure.TIM_Pulse = VGA_TIM2_HSYNC_IMP;
 800311e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003122:	60bb      	str	r3, [r7, #8]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8003124:	2302      	movs	r3, #2
 8003126:	81bb      	strh	r3, [r7, #12]
  TIM_OC4Init(TIM2, &TIM_OCInitStructure);
 8003128:	463b      	mov	r3, r7
 800312a:	4619      	mov	r1, r3
 800312c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003130:	f7fe fae8 	bl	8001704 <TIM_OC4Init>
  TIM_OC4PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8003134:	2108      	movs	r1, #8
 8003136:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800313a:	f7fe fb67 	bl	800180c <TIM_OC4PreloadConfig>
  //---------------------------------------------
  // enable all Timers
  //---------------------------------------------

  // Timer1 enable
  TIM_ARRPreloadConfig(TIM1, ENABLE);
 800313e:	2101      	movs	r1, #1
 8003140:	4808      	ldr	r0, [pc, #32]	; (8003164 <P_VGA_InitTIM+0xc8>)
 8003142:	f7fe fa19 	bl	8001578 <TIM_ARRPreloadConfig>

  // Timer2 enable
  TIM_ARRPreloadConfig(TIM2, ENABLE);
 8003146:	2101      	movs	r1, #1
 8003148:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800314c:	f7fe fa14 	bl	8001578 <TIM_ARRPreloadConfig>
  TIM_Cmd(TIM2, ENABLE);
 8003150:	2101      	movs	r1, #1
 8003152:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003156:	f7fe fa2f 	bl	80015b8 <TIM_Cmd>

}
 800315a:	bf00      	nop
 800315c:	3720      	adds	r7, #32
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	40010000 	.word	0x40010000

08003168 <P_VGA_InitINT>:
//--------------------------------------------------------------
// internal Function
// init Interrupts
//--------------------------------------------------------------
void P_VGA_InitINT(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
  // init from DMA Interrupt
  // for TransferComplete Interrupt
  // DMA2, Stream5, Channel6
  //---------------------------------------------

  DMA_ITConfig(DMA2_Stream5, DMA_IT_TC, ENABLE);
 800316e:	2201      	movs	r2, #1
 8003170:	2110      	movs	r1, #16
 8003172:	4812      	ldr	r0, [pc, #72]	; (80031bc <P_VGA_InitINT+0x54>)
 8003174:	f7fd febc 	bl	8000ef0 <DMA_ITConfig>

  // NVIC config
  NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream5_IRQn;
 8003178:	2344      	movs	r3, #68	; 0x44
 800317a:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800317c:	2300      	movs	r3, #0
 800317e:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8003180:	2300      	movs	r3, #0
 8003182:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8003184:	2301      	movs	r3, #1
 8003186:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 8003188:	1d3b      	adds	r3, r7, #4
 800318a:	4618      	mov	r0, r3
 800318c:	f7fd fd06 	bl	8000b9c <NVIC_Init>
  // init of Timer2 Interrupt
  // for HSync-Counter using Update
  // for DMA Trigger START using CH3
  //---------------------------------------------

  TIM_ITConfig(TIM2,TIM_IT_CC3,ENABLE);
 8003190:	2201      	movs	r2, #1
 8003192:	2108      	movs	r1, #8
 8003194:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003198:	f7fe fb56 	bl	8001848 <TIM_ITConfig>

  // NVIC config
  NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 800319c:	231c      	movs	r3, #28
 800319e:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80031a0:	2300      	movs	r3, #0
 80031a2:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80031a4:	2300      	movs	r3, #0
 80031a6:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80031a8:	2301      	movs	r3, #1
 80031aa:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 80031ac:	1d3b      	adds	r3, r7, #4
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7fd fcf4 	bl	8000b9c <NVIC_Init>
}
 80031b4:	bf00      	nop
 80031b6:	3708      	adds	r7, #8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40026488 	.word	0x40026488

080031c0 <P_VGA_InitDMA>:
//--------------------------------------------------------------
// internal Function
// init DMA
//--------------------------------------------------------------
void P_VGA_InitDMA(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b090      	sub	sp, #64	; 0x40
 80031c4:	af00      	add	r7, sp, #0
  // (look at page 217 of the Ref Manual)
  // DMA=2, Channel=6, Stream=5
  //---------------------------------------------

  // Clock Enable (DMA)
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 80031c6:	2101      	movs	r1, #1
 80031c8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80031cc:	f7fe f908 	bl	80013e0 <RCC_AHB1PeriphClockCmd>

  // DMA init (DMA2, Channel6, Stream5)
  DMA_Cmd(DMA2_Stream5, DISABLE);
 80031d0:	2100      	movs	r1, #0
 80031d2:	481b      	ldr	r0, [pc, #108]	; (8003240 <P_VGA_InitDMA+0x80>)
 80031d4:	f7fd fe70 	bl	8000eb8 <DMA_Cmd>
  DMA_DeInit(DMA2_Stream5);
 80031d8:	4819      	ldr	r0, [pc, #100]	; (8003240 <P_VGA_InitDMA+0x80>)
 80031da:	f7fd fd41 	bl	8000c60 <DMA_DeInit>
  DMA_InitStructure.DMA_Channel = DMA_Channel_6;
 80031de:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 80031e2:	607b      	str	r3, [r7, #4]
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)VGA_GPIOE_ODR_ADDRESS;
 80031e4:	4b17      	ldr	r3, [pc, #92]	; (8003244 <P_VGA_InitDMA+0x84>)
 80031e6:	60bb      	str	r3, [r7, #8]
  DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&VGA_RAM1;
 80031e8:	4b17      	ldr	r3, [pc, #92]	; (8003248 <P_VGA_InitDMA+0x88>)
 80031ea:	60fb      	str	r3, [r7, #12]
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 80031ec:	2340      	movs	r3, #64	; 0x40
 80031ee:	613b      	str	r3, [r7, #16]
  DMA_InitStructure.DMA_BufferSize = VGA_DISPLAY_X+1;
 80031f0:	f240 1341 	movw	r3, #321	; 0x141
 80031f4:	617b      	str	r3, [r7, #20]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80031f6:	2300      	movs	r3, #0
 80031f8:	61bb      	str	r3, [r7, #24]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80031fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031fe:	61fb      	str	r3, [r7, #28]
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8003200:	2300      	movs	r3, #0
 8003202:	623b      	str	r3, [r7, #32]
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8003204:	2300      	movs	r3, #0
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8003208:	2300      	movs	r3, #0
 800320a:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 800320c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003210:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 8003212:	2300      	movs	r3, #0
 8003214:	633b      	str	r3, [r7, #48]	; 0x30
  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 8003216:	2301      	movs	r3, #1
 8003218:	637b      	str	r3, [r7, #52]	; 0x34
  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800321a:	2300      	movs	r3, #0
 800321c:	63bb      	str	r3, [r7, #56]	; 0x38
  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800321e:	2300      	movs	r3, #0
 8003220:	63fb      	str	r3, [r7, #60]	; 0x3c
  DMA_Init(DMA2_Stream5, &DMA_InitStructure);
 8003222:	1d3b      	adds	r3, r7, #4
 8003224:	4619      	mov	r1, r3
 8003226:	4806      	ldr	r0, [pc, #24]	; (8003240 <P_VGA_InitDMA+0x80>)
 8003228:	f7fd fdee 	bl	8000e08 <DMA_Init>

  // DMA-Timer1 enable
  TIM_DMACmd(TIM1,TIM_DMA_Update,ENABLE);
 800322c:	2201      	movs	r2, #1
 800322e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003232:	4806      	ldr	r0, [pc, #24]	; (800324c <P_VGA_InitDMA+0x8c>)
 8003234:	f7fe fb3d 	bl	80018b2 <TIM_DMACmd>
}
 8003238:	bf00      	nop
 800323a:	3740      	adds	r7, #64	; 0x40
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40026488 	.word	0x40026488
 8003244:	40021015 	.word	0x40021015
 8003248:	20000234 	.word	0x20000234
 800324c:	40010000 	.word	0x40010000

08003250 <TIM2_IRQHandler>:
//
//   CC3-Interrupt    -> starts from DMA
// Watch it.. higher troughput when interrupt flag is left alone
//--------------------------------------------------------------
void TIM2_IRQHandler(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0

  // Interrupt of Timer2 CH3 occurred (for Trigger start)
  TIM_ClearITPendingBit(TIM2, TIM_IT_CC3);
 8003254:	2108      	movs	r1, #8
 8003256:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800325a:	f7fe fb19 	bl	8001890 <TIM_ClearITPendingBit>

  VGA.hsync_cnt++;
 800325e:	4b26      	ldr	r3, [pc, #152]	; (80032f8 <TIM2_IRQHandler+0xa8>)
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	3301      	adds	r3, #1
 8003264:	b29a      	uxth	r2, r3
 8003266:	4b24      	ldr	r3, [pc, #144]	; (80032f8 <TIM2_IRQHandler+0xa8>)
 8003268:	801a      	strh	r2, [r3, #0]
  if(VGA.hsync_cnt>=VGA_VSYNC_PERIODE) {
 800326a:	4b23      	ldr	r3, [pc, #140]	; (80032f8 <TIM2_IRQHandler+0xa8>)
 800326c:	881b      	ldrh	r3, [r3, #0]
 800326e:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8003272:	d905      	bls.n	8003280 <TIM2_IRQHandler+0x30>
    // -----------
    VGA.hsync_cnt=0;
 8003274:	4b20      	ldr	r3, [pc, #128]	; (80032f8 <TIM2_IRQHandler+0xa8>)
 8003276:	2200      	movs	r2, #0
 8003278:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr=(uint32_t)(&VGA_RAM1[0]);
 800327a:	4a20      	ldr	r2, [pc, #128]	; (80032fc <TIM2_IRQHandler+0xac>)
 800327c:	4b1e      	ldr	r3, [pc, #120]	; (80032f8 <TIM2_IRQHandler+0xa8>)
 800327e:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  if(VGA.hsync_cnt<VGA_VSYNC_IMP) {
 8003280:	4b1d      	ldr	r3, [pc, #116]	; (80032f8 <TIM2_IRQHandler+0xa8>)
 8003282:	881b      	ldrh	r3, [r3, #0]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d804      	bhi.n	8003292 <TIM2_IRQHandler+0x42>
    // HSync low
    GPIOB->BSRRH = GPIO_Pin_12;
 8003288:	4b1d      	ldr	r3, [pc, #116]	; (8003300 <TIM2_IRQHandler+0xb0>)
 800328a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800328e:	835a      	strh	r2, [r3, #26]
 8003290:	e003      	b.n	800329a <TIM2_IRQHandler+0x4a>
  }
  else {
    // HSync High
    GPIOB->BSRRL = GPIO_Pin_12;
 8003292:	4b1b      	ldr	r3, [pc, #108]	; (8003300 <TIM2_IRQHandler+0xb0>)
 8003294:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003298:	831a      	strh	r2, [r3, #24]
  }

  // Test for DMA start
  if((VGA.hsync_cnt>=VGA_VSYNC_BILD_START) && (VGA.hsync_cnt<=VGA_VSYNC_BILD_STOP)) {
 800329a:	4b17      	ldr	r3, [pc, #92]	; (80032f8 <TIM2_IRQHandler+0xa8>)
 800329c:	881b      	ldrh	r3, [r3, #0]
 800329e:	2b23      	cmp	r3, #35	; 0x23
 80032a0:	d927      	bls.n	80032f2 <TIM2_IRQHandler+0xa2>
 80032a2:	4b15      	ldr	r3, [pc, #84]	; (80032f8 <TIM2_IRQHandler+0xa8>)
 80032a4:	881b      	ldrh	r3, [r3, #0]
 80032a6:	f240 2202 	movw	r2, #514	; 0x202
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d821      	bhi.n	80032f2 <TIM2_IRQHandler+0xa2>
    // after FP start => DMA Transfer

    // DMA2 init
	DMA2_Stream5->CR=VGA.dma2_cr_reg;
 80032ae:	4a15      	ldr	r2, [pc, #84]	; (8003304 <TIM2_IRQHandler+0xb4>)
 80032b0:	4b11      	ldr	r3, [pc, #68]	; (80032f8 <TIM2_IRQHandler+0xa8>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR=VGA.start_adr;
 80032b6:	4a13      	ldr	r2, [pc, #76]	; (8003304 <TIM2_IRQHandler+0xb4>)
 80032b8:	4b0f      	ldr	r3, [pc, #60]	; (80032f8 <TIM2_IRQHandler+0xa8>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1|=TIM_CR1_CEN;
 80032be:	4a12      	ldr	r2, [pc, #72]	; (8003308 <TIM2_IRQHandler+0xb8>)
 80032c0:	4b11      	ldr	r3, [pc, #68]	; (8003308 <TIM2_IRQHandler+0xb8>)
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	f043 0301 	orr.w	r3, r3, #1
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	8013      	strh	r3, [r2, #0]
    // DMA2 enable
    DMA2_Stream5->CR|=DMA_SxCR_EN;
 80032ce:	4a0d      	ldr	r2, [pc, #52]	; (8003304 <TIM2_IRQHandler+0xb4>)
 80032d0:	4b0c      	ldr	r3, [pc, #48]	; (8003304 <TIM2_IRQHandler+0xb4>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f043 0301 	orr.w	r3, r3, #1
 80032d8:	6013      	str	r3, [r2, #0]

    // Test Adrespointer for high
    if((VGA.hsync_cnt & 0x01)!=0) {
 80032da:	4b07      	ldr	r3, [pc, #28]	; (80032f8 <TIM2_IRQHandler+0xa8>)
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d005      	beq.n	80032f2 <TIM2_IRQHandler+0xa2>
      // inc after Hsync
      VGA.start_adr+=(VGA_DISPLAY_X+1);
 80032e6:	4b04      	ldr	r3, [pc, #16]	; (80032f8 <TIM2_IRQHandler+0xa8>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f203 1341 	addw	r3, r3, #321	; 0x141
 80032ee:	4a02      	ldr	r2, [pc, #8]	; (80032f8 <TIM2_IRQHandler+0xa8>)
 80032f0:	6053      	str	r3, [r2, #4]
    }
  }
}
 80032f2:	bf00      	nop
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	20000228 	.word	0x20000228
 80032fc:	20000234 	.word	0x20000234
 8003300:	40020400 	.word	0x40020400
 8003304:	40026488 	.word	0x40026488
 8003308:	40010000 	.word	0x40010000

0800330c <DMA2_Stream5_IRQHandler>:
//   after TransferCompleteInterrupt -> stop DMA
//
// still a bit buggy
//--------------------------------------------------------------
void DMA2_Stream5_IRQHandler(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  if(DMA_GetITStatus(DMA2_Stream5, DMA_IT_TCIF5))
 8003310:	490d      	ldr	r1, [pc, #52]	; (8003348 <DMA2_Stream5_IRQHandler+0x3c>)
 8003312:	480e      	ldr	r0, [pc, #56]	; (800334c <DMA2_Stream5_IRQHandler+0x40>)
 8003314:	f7fd fe26 	bl	8000f64 <DMA_GetITStatus>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d012      	beq.n	8003344 <DMA2_Stream5_IRQHandler+0x38>
  {
    // TransferInterruptComplete Interrupt from DMA2
    DMA_ClearITPendingBit(DMA2_Stream5, DMA_IT_TCIF5);
 800331e:	490a      	ldr	r1, [pc, #40]	; (8003348 <DMA2_Stream5_IRQHandler+0x3c>)
 8003320:	480a      	ldr	r0, [pc, #40]	; (800334c <DMA2_Stream5_IRQHandler+0x40>)
 8003322:	f7fd fe77 	bl	8001014 <DMA_ClearITPendingBit>
    // stop after all pixels => DMA Transfer stop

    // Timer1 stop
    TIM1->CR1&=~TIM_CR1_CEN;
 8003326:	4a0a      	ldr	r2, [pc, #40]	; (8003350 <DMA2_Stream5_IRQHandler+0x44>)
 8003328:	4b09      	ldr	r3, [pc, #36]	; (8003350 <DMA2_Stream5_IRQHandler+0x44>)
 800332a:	881b      	ldrh	r3, [r3, #0]
 800332c:	b29b      	uxth	r3, r3
 800332e:	f023 0301 	bic.w	r3, r3, #1
 8003332:	b29b      	uxth	r3, r3
 8003334:	8013      	strh	r3, [r2, #0]
    // DMA2 disable
    DMA2_Stream5->CR=0;
 8003336:	4b05      	ldr	r3, [pc, #20]	; (800334c <DMA2_Stream5_IRQHandler+0x40>)
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]
    // switch on black
    GPIOE->BSRRH = VGA_GPIO_HINIBBLE;
 800333c:	4b05      	ldr	r3, [pc, #20]	; (8003354 <DMA2_Stream5_IRQHandler+0x48>)
 800333e:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8003342:	835a      	strh	r2, [r3, #26]
  }
}
 8003344:	bf00      	nop
 8003346:	bd80      	pop	{r7, pc}
 8003348:	20008800 	.word	0x20008800
 800334c:	40026488 	.word	0x40026488
 8003350:	40010000 	.word	0x40010000
 8003354:	40021000 	.word	0x40021000

08003358 <UART_tokens>:

/* Get input commands, split them and return them
 * Call UART_tokens_clear() after calling this function
 */
char ** UART_tokens()
{
 8003358:	b590      	push	{r4, r7, lr}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
	char **array = NULL; // By using NULL, the first time realloc will run, it will act as a malloc function.
 800335e:	2300      	movs	r3, #0
 8003360:	60fb      	str	r3, [r7, #12]

	unsigned char i = 0;
 8003362:	2300      	movs	r3, #0
 8003364:	72fb      	strb	r3, [r7, #11]
	char *str = (char *) malloc(255); // Allocate memory for the input buffer
 8003366:	20ff      	movs	r0, #255	; 0xff
 8003368:	f000 f9d6 	bl	8003718 <malloc>
 800336c:	4603      	mov	r3, r0
 800336e:	603b      	str	r3, [r7, #0]
	UART_gets(str, 1); // Grab terminal input commands
 8003370:	2101      	movs	r1, #1
 8003372:	6838      	ldr	r0, [r7, #0]
 8003374:	f7ff fc7e 	bl	8002c74 <UART_gets>
	UART_puts("UART_tokens function:\n");
	UART_puts("Nr:\tUART\tArray\n");
	#endif

	// Extract each variable from the input buffer
	for (char* p = strtok(str, ","); p != NULL; p = strtok(NULL, ",")) {
 8003378:	4921      	ldr	r1, [pc, #132]	; (8003400 <UART_tokens+0xa8>)
 800337a:	6838      	ldr	r0, [r7, #0]
 800337c:	f000 fabc 	bl	80038f8 <strtok>
 8003380:	6078      	str	r0, [r7, #4]
 8003382:	e029      	b.n	80033d8 <UART_tokens+0x80>
		// Write to a new buffer
		// More info at: https://stackoverflow.com/a/1095006
		array = realloc(array, (i + 1) * sizeof(char*)); // Dynamically increase the size of the array // Doesn't work correctly yet
 8003384:	7afb      	ldrb	r3, [r7, #11]
 8003386:	3301      	adds	r3, #1
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4619      	mov	r1, r3
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f000 fa7f 	bl	8003890 <realloc>
 8003392:	60f8      	str	r0, [r7, #12]
		array[i] = (char *) malloc(strlen(p) + 1); // Dynamically allocate buffer size of each string
 8003394:	7afb      	ldrb	r3, [r7, #11]
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	18d4      	adds	r4, r2, r3
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f7fc ff1d 	bl	80001dc <strlen>
 80033a2:	4603      	mov	r3, r0
 80033a4:	3301      	adds	r3, #1
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 f9b6 	bl	8003718 <malloc>
 80033ac:	4603      	mov	r3, r0
 80033ae:	6023      	str	r3, [r4, #0]
		strlwr(p); // Lowercase the string
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 fa8d 	bl	80038d0 <strlwr>
		strcpy(array[i], p); // Copy the string to the array
 80033b6:	7afb      	ldrb	r3, [r7, #11]
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	4413      	add	r3, r2
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 fa7c 	bl	80038c0 <strcpy>
		UART_puts("\t");
		UART_puts(array[i]); // Copy to array
		UART_puts("\n");
		#endif

		i++;
 80033c8:	7afb      	ldrb	r3, [r7, #11]
 80033ca:	3301      	adds	r3, #1
 80033cc:	72fb      	strb	r3, [r7, #11]
	for (char* p = strtok(str, ","); p != NULL; p = strtok(NULL, ",")) {
 80033ce:	490c      	ldr	r1, [pc, #48]	; (8003400 <UART_tokens+0xa8>)
 80033d0:	2000      	movs	r0, #0
 80033d2:	f000 fa91 	bl	80038f8 <strtok>
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1d2      	bne.n	8003384 <UART_tokens+0x2c>
	}

	array[i] = NULL; // Add Null to the end so you can easily iterate; check the cleararray() function
 80033de:	7afb      	ldrb	r3, [r7, #11]
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	4413      	add	r3, r2
 80033e6:	2200      	movs	r2, #0
 80033e8:	601a      	str	r2, [r3, #0]

	free(str); // Input buffer isn't needed anymore
 80033ea:	6838      	ldr	r0, [r7, #0]
 80033ec:	f000 f99c 	bl	8003728 <free>
	str = NULL;
 80033f0:	2300      	movs	r3, #0
 80033f2:	603b      	str	r3, [r7, #0]

	return array;
 80033f4:	68fb      	ldr	r3, [r7, #12]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3714      	adds	r7, #20
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd90      	pop	{r4, r7, pc}
 80033fe:	bf00      	nop
 8003400:	08003d9c 	.word	0x08003d9c

08003404 <UART_tokens_clear>:

/* Clears the input commands array to prevent memory leaks
 * Always call this function when you're done with the array.
 */
void UART_tokens_clear(char **array)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
	for(unsigned char i = 0; array[i] != NULL; i++)
 800340c:	2300      	movs	r3, #0
 800340e:	73fb      	strb	r3, [r7, #15]
 8003410:	e00a      	b.n	8003428 <UART_tokens_clear+0x24>
	    free(array[i]);
 8003412:	7bfb      	ldrb	r3, [r7, #15]
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	4413      	add	r3, r2
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f000 f983 	bl	8003728 <free>
	for(unsigned char i = 0; array[i] != NULL; i++)
 8003422:	7bfb      	ldrb	r3, [r7, #15]
 8003424:	3301      	adds	r3, #1
 8003426:	73fb      	strb	r3, [r7, #15]
 8003428:	7bfb      	ldrb	r3, [r7, #15]
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	4413      	add	r3, r2
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1ed      	bne.n	8003412 <UART_tokens_clear+0xe>
	free(array);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f976 	bl	8003728 <free>
}
 800343c:	bf00      	nop
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <UART_control>:

/* UART control
 * This function will call the functions
 */
void UART_control(char **array)
{
 8003444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003446:	b089      	sub	sp, #36	; 0x24
 8003448:	af04      	add	r7, sp, #16
 800344a:	6078      	str	r0, [r7, #4]
	uint8_t err = 0;
 800344c:	2300      	movs	r3, #0
 800344e:	73fb      	strb	r3, [r7, #15]

	if 		(strcmp(array[0], "lijn") == 0)			err = line((int) array[1], (int) array[2], (int) array[3], (int) array[4], (int) array[5], array[6]);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4993      	ldr	r1, [pc, #588]	; (80036a4 <UART_control+0x260>)
 8003456:	4618      	mov	r0, r3
 8003458:	f7fc feb6 	bl	80001c8 <strcmp>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d11f      	bne.n	80034a2 <UART_control+0x5e>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3304      	adds	r3, #4
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	b2d8      	uxtb	r0, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	3308      	adds	r3, #8
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	b2d9      	uxtb	r1, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	330c      	adds	r3, #12
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	b2dc      	uxtb	r4, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	3310      	adds	r3, #16
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	b2dd      	uxtb	r5, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	3314      	adds	r3, #20
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	b2db      	uxtb	r3, r3
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	3218      	adds	r2, #24
 800348e:	6812      	ldr	r2, [r2, #0]
 8003490:	9201      	str	r2, [sp, #4]
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	462b      	mov	r3, r5
 8003496:	4622      	mov	r2, r4
 8003498:	f7fe fcd0 	bl	8001e3c <line>
 800349c:	4603      	mov	r3, r0
 800349e:	73fb      	strb	r3, [r7, #15]
 80034a0:	e0ee      	b.n	8003680 <UART_control+0x23c>
	else if (strcmp(array[0], "arrow") == 0)		err = arrow((int) array[1], (int) array[2], (int) array[3], (int) array[4], (int) array[5], array[6]);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4980      	ldr	r1, [pc, #512]	; (80036a8 <UART_control+0x264>)
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7fc fe8d 	bl	80001c8 <strcmp>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d11f      	bne.n	80034f4 <UART_control+0xb0>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3304      	adds	r3, #4
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	b2d8      	uxtb	r0, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3308      	adds	r3, #8
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	b2d9      	uxtb	r1, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	330c      	adds	r3, #12
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	b2dc      	uxtb	r4, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3310      	adds	r3, #16
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	b2dd      	uxtb	r5, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3314      	adds	r3, #20
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	3218      	adds	r2, #24
 80034e0:	6812      	ldr	r2, [r2, #0]
 80034e2:	9201      	str	r2, [sp, #4]
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	462b      	mov	r3, r5
 80034e8:	4622      	mov	r2, r4
 80034ea:	f7fe fdd7 	bl	800209c <arrow>
 80034ee:	4603      	mov	r3, r0
 80034f0:	73fb      	strb	r3, [r7, #15]
 80034f2:	e0c5      	b.n	8003680 <UART_control+0x23c>
	else if (strcmp(array[0], "ellips") == 0)		err = ellipse((int) array[1], (int) array[2], (int) array[3], (int) array[4], array[5]);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	496c      	ldr	r1, [pc, #432]	; (80036ac <UART_control+0x268>)
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fc fe64 	bl	80001c8 <strcmp>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d119      	bne.n	800353a <UART_control+0xf6>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3304      	adds	r3, #4
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	b2d8      	uxtb	r0, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	3308      	adds	r3, #8
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	b2d9      	uxtb	r1, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	330c      	adds	r3, #12
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	b2da      	uxtb	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	3310      	adds	r3, #16
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	b2dc      	uxtb	r4, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3314      	adds	r3, #20
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	4623      	mov	r3, r4
 8003530:	f7fe fdcc 	bl	80020cc <ellipse>
 8003534:	4603      	mov	r3, r0
 8003536:	73fb      	strb	r3, [r7, #15]
 8003538:	e0a2      	b.n	8003680 <UART_control+0x23c>
	else if (strcmp(array[0], "rechthoek") == 0)	err = rectangular((int) array[1], (int) array[2], (int) array[3], (int) array[4], array[5]);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	495c      	ldr	r1, [pc, #368]	; (80036b0 <UART_control+0x26c>)
 8003540:	4618      	mov	r0, r3
 8003542:	f7fc fe41 	bl	80001c8 <strcmp>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d119      	bne.n	8003580 <UART_control+0x13c>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	3304      	adds	r3, #4
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	b2d8      	uxtb	r0, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3308      	adds	r3, #8
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	b2d9      	uxtb	r1, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	330c      	adds	r3, #12
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	b2da      	uxtb	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3310      	adds	r3, #16
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	b2dc      	uxtb	r4, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3314      	adds	r3, #20
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	9300      	str	r3, [sp, #0]
 8003574:	4623      	mov	r3, r4
 8003576:	f7fe fe33 	bl	80021e0 <rectangular>
 800357a:	4603      	mov	r3, r0
 800357c:	73fb      	strb	r3, [r7, #15]
 800357e:	e07f      	b.n	8003680 <UART_control+0x23c>
	else if (strcmp(array[0], "driehoek") == 0)		err = triangle((int) array[1], (int) array[2], (int) array[3], (int) array[4], (int) array[5], (int) array[6], array[7]);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	494b      	ldr	r1, [pc, #300]	; (80036b4 <UART_control+0x270>)
 8003586:	4618      	mov	r0, r3
 8003588:	f7fc fe1e 	bl	80001c8 <strcmp>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d125      	bne.n	80035de <UART_control+0x19a>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	3304      	adds	r3, #4
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	b2d8      	uxtb	r0, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	3308      	adds	r3, #8
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	b2dc      	uxtb	r4, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	330c      	adds	r3, #12
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	b2dd      	uxtb	r5, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	3310      	adds	r3, #16
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	b2de      	uxtb	r6, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	3314      	adds	r3, #20
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	3218      	adds	r2, #24
 80035be:	6812      	ldr	r2, [r2, #0]
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	311c      	adds	r1, #28
 80035c6:	6809      	ldr	r1, [r1, #0]
 80035c8:	9102      	str	r1, [sp, #8]
 80035ca:	9201      	str	r2, [sp, #4]
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	4633      	mov	r3, r6
 80035d0:	462a      	mov	r2, r5
 80035d2:	4621      	mov	r1, r4
 80035d4:	f7fe fe3d 	bl	8002252 <triangle>
 80035d8:	4603      	mov	r3, r0
 80035da:	73fb      	strb	r3, [r7, #15]
 80035dc:	e050      	b.n	8003680 <UART_control+0x23c>
	else if (strcmp(array[0], "tekst") == 0)		err = text((int) array[1], (int) array[2], array[3], array[4], array[5]);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4935      	ldr	r1, [pc, #212]	; (80036b8 <UART_control+0x274>)
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7fc fdef 	bl	80001c8 <strcmp>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d117      	bne.n	8003620 <UART_control+0x1dc>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	3304      	adds	r3, #4
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	b2d8      	uxtb	r0, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3308      	adds	r3, #8
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	b2d9      	uxtb	r1, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	330c      	adds	r3, #12
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	3310      	adds	r3, #16
 800360a:	681c      	ldr	r4, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3314      	adds	r3, #20
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	4623      	mov	r3, r4
 8003616:	f7fe fe34 	bl	8002282 <text>
 800361a:	4603      	mov	r3, r0
 800361c:	73fb      	strb	r3, [r7, #15]
 800361e:	e02f      	b.n	8003680 <UART_control+0x23c>
	else if (strcmp(array[0], "bitmap") == 0)		err = bitmap((int) array[1], (int) array[2], (int) array[3]);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4925      	ldr	r1, [pc, #148]	; (80036bc <UART_control+0x278>)
 8003626:	4618      	mov	r0, r3
 8003628:	f7fc fdce 	bl	80001c8 <strcmp>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d111      	bne.n	8003656 <UART_control+0x212>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	3304      	adds	r3, #4
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	b2d8      	uxtb	r0, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	3308      	adds	r3, #8
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	b2d9      	uxtb	r1, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	330c      	adds	r3, #12
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	b2db      	uxtb	r3, r3
 800364a:	461a      	mov	r2, r3
 800364c:	f7fe fe2b 	bl	80022a6 <bitmap>
 8003650:	4603      	mov	r3, r0
 8003652:	73fb      	strb	r3, [r7, #15]
 8003654:	e014      	b.n	8003680 <UART_control+0x23c>
//	else if (strcmp(array[0], "wacht") == 0)		err = delay_ms((int) array[1]);
	else if (strcmp(array[0], "clearscherm") == 0)	err = fill_screen(array[1]);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4919      	ldr	r1, [pc, #100]	; (80036c0 <UART_control+0x27c>)
 800365c:	4618      	mov	r0, r3
 800365e:	f7fc fdb3 	bl	80001c8 <strcmp>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d108      	bne.n	800367a <UART_control+0x236>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3304      	adds	r3, #4
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f7fe fe29 	bl	80022c6 <fill_screen>
 8003674:	4603      	mov	r3, r0
 8003676:	73fb      	strb	r3, [r7, #15]
 8003678:	e002      	b.n	8003680 <UART_control+0x23c>
	else UART_puts("Invalid command!\n");
 800367a:	4812      	ldr	r0, [pc, #72]	; (80036c4 <UART_control+0x280>)
 800367c:	f7ff fa06 	bl	8002a8c <UART_puts>

	if (err != 0){
 8003680:	7bfb      	ldrb	r3, [r7, #15]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d009      	beq.n	800369a <UART_control+0x256>
		UART_puts("\nError code: ");
 8003686:	4810      	ldr	r0, [pc, #64]	; (80036c8 <UART_control+0x284>)
 8003688:	f7ff fa00 	bl	8002a8c <UART_puts>
		UART_putint(err);
 800368c:	7bfb      	ldrb	r3, [r7, #15]
 800368e:	4618      	mov	r0, r3
 8003690:	f7ff fa72 	bl	8002b78 <UART_putint>
		UART_puts("\n");
 8003694:	480d      	ldr	r0, [pc, #52]	; (80036cc <UART_control+0x288>)
 8003696:	f7ff f9f9 	bl	8002a8c <UART_puts>
	}
}
 800369a:	bf00      	nop
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036a2:	bf00      	nop
 80036a4:	08003da0 	.word	0x08003da0
 80036a8:	08003da8 	.word	0x08003da8
 80036ac:	08003db0 	.word	0x08003db0
 80036b0:	08003db8 	.word	0x08003db8
 80036b4:	08003dc4 	.word	0x08003dc4
 80036b8:	08003dd0 	.word	0x08003dd0
 80036bc:	08003dd8 	.word	0x08003dd8
 80036c0:	08003de0 	.word	0x08003de0
 80036c4:	08003dec 	.word	0x08003dec
 80036c8:	08003e00 	.word	0x08003e00
 80036cc:	08003e10 	.word	0x08003e10

080036d0 <__libc_init_array>:
 80036d0:	b570      	push	{r4, r5, r6, lr}
 80036d2:	4e0d      	ldr	r6, [pc, #52]	; (8003708 <__libc_init_array+0x38>)
 80036d4:	4c0d      	ldr	r4, [pc, #52]	; (800370c <__libc_init_array+0x3c>)
 80036d6:	1ba4      	subs	r4, r4, r6
 80036d8:	10a4      	asrs	r4, r4, #2
 80036da:	2500      	movs	r5, #0
 80036dc:	42a5      	cmp	r5, r4
 80036de:	d109      	bne.n	80036f4 <__libc_init_array+0x24>
 80036e0:	4e0b      	ldr	r6, [pc, #44]	; (8003710 <__libc_init_array+0x40>)
 80036e2:	4c0c      	ldr	r4, [pc, #48]	; (8003714 <__libc_init_array+0x44>)
 80036e4:	f000 fae6 	bl	8003cb4 <_init>
 80036e8:	1ba4      	subs	r4, r4, r6
 80036ea:	10a4      	asrs	r4, r4, #2
 80036ec:	2500      	movs	r5, #0
 80036ee:	42a5      	cmp	r5, r4
 80036f0:	d105      	bne.n	80036fe <__libc_init_array+0x2e>
 80036f2:	bd70      	pop	{r4, r5, r6, pc}
 80036f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036f8:	4798      	blx	r3
 80036fa:	3501      	adds	r5, #1
 80036fc:	e7ee      	b.n	80036dc <__libc_init_array+0xc>
 80036fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003702:	4798      	blx	r3
 8003704:	3501      	adds	r5, #1
 8003706:	e7f2      	b.n	80036ee <__libc_init_array+0x1e>
 8003708:	08003f24 	.word	0x08003f24
 800370c:	08003f24 	.word	0x08003f24
 8003710:	08003f24 	.word	0x08003f24
 8003714:	08003f28 	.word	0x08003f28

08003718 <malloc>:
 8003718:	4b02      	ldr	r3, [pc, #8]	; (8003724 <malloc+0xc>)
 800371a:	4601      	mov	r1, r0
 800371c:	6818      	ldr	r0, [r3, #0]
 800371e:	f000 b859 	b.w	80037d4 <_malloc_r>
 8003722:	bf00      	nop
 8003724:	20000024 	.word	0x20000024

08003728 <free>:
 8003728:	4b02      	ldr	r3, [pc, #8]	; (8003734 <free+0xc>)
 800372a:	4601      	mov	r1, r0
 800372c:	6818      	ldr	r0, [r3, #0]
 800372e:	f000 b803 	b.w	8003738 <_free_r>
 8003732:	bf00      	nop
 8003734:	20000024 	.word	0x20000024

08003738 <_free_r>:
 8003738:	b538      	push	{r3, r4, r5, lr}
 800373a:	4605      	mov	r5, r0
 800373c:	2900      	cmp	r1, #0
 800373e:	d045      	beq.n	80037cc <_free_r+0x94>
 8003740:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003744:	1f0c      	subs	r4, r1, #4
 8003746:	2b00      	cmp	r3, #0
 8003748:	bfb8      	it	lt
 800374a:	18e4      	addlt	r4, r4, r3
 800374c:	f000 f948 	bl	80039e0 <__malloc_lock>
 8003750:	4a1f      	ldr	r2, [pc, #124]	; (80037d0 <_free_r+0x98>)
 8003752:	6813      	ldr	r3, [r2, #0]
 8003754:	4610      	mov	r0, r2
 8003756:	b933      	cbnz	r3, 8003766 <_free_r+0x2e>
 8003758:	6063      	str	r3, [r4, #4]
 800375a:	6014      	str	r4, [r2, #0]
 800375c:	4628      	mov	r0, r5
 800375e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003762:	f000 b93e 	b.w	80039e2 <__malloc_unlock>
 8003766:	42a3      	cmp	r3, r4
 8003768:	d90c      	bls.n	8003784 <_free_r+0x4c>
 800376a:	6821      	ldr	r1, [r4, #0]
 800376c:	1862      	adds	r2, r4, r1
 800376e:	4293      	cmp	r3, r2
 8003770:	bf04      	itt	eq
 8003772:	681a      	ldreq	r2, [r3, #0]
 8003774:	685b      	ldreq	r3, [r3, #4]
 8003776:	6063      	str	r3, [r4, #4]
 8003778:	bf04      	itt	eq
 800377a:	1852      	addeq	r2, r2, r1
 800377c:	6022      	streq	r2, [r4, #0]
 800377e:	6004      	str	r4, [r0, #0]
 8003780:	e7ec      	b.n	800375c <_free_r+0x24>
 8003782:	4613      	mov	r3, r2
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	b10a      	cbz	r2, 800378c <_free_r+0x54>
 8003788:	42a2      	cmp	r2, r4
 800378a:	d9fa      	bls.n	8003782 <_free_r+0x4a>
 800378c:	6819      	ldr	r1, [r3, #0]
 800378e:	1858      	adds	r0, r3, r1
 8003790:	42a0      	cmp	r0, r4
 8003792:	d10b      	bne.n	80037ac <_free_r+0x74>
 8003794:	6820      	ldr	r0, [r4, #0]
 8003796:	4401      	add	r1, r0
 8003798:	1858      	adds	r0, r3, r1
 800379a:	4282      	cmp	r2, r0
 800379c:	6019      	str	r1, [r3, #0]
 800379e:	d1dd      	bne.n	800375c <_free_r+0x24>
 80037a0:	6810      	ldr	r0, [r2, #0]
 80037a2:	6852      	ldr	r2, [r2, #4]
 80037a4:	605a      	str	r2, [r3, #4]
 80037a6:	4401      	add	r1, r0
 80037a8:	6019      	str	r1, [r3, #0]
 80037aa:	e7d7      	b.n	800375c <_free_r+0x24>
 80037ac:	d902      	bls.n	80037b4 <_free_r+0x7c>
 80037ae:	230c      	movs	r3, #12
 80037b0:	602b      	str	r3, [r5, #0]
 80037b2:	e7d3      	b.n	800375c <_free_r+0x24>
 80037b4:	6820      	ldr	r0, [r4, #0]
 80037b6:	1821      	adds	r1, r4, r0
 80037b8:	428a      	cmp	r2, r1
 80037ba:	bf04      	itt	eq
 80037bc:	6811      	ldreq	r1, [r2, #0]
 80037be:	6852      	ldreq	r2, [r2, #4]
 80037c0:	6062      	str	r2, [r4, #4]
 80037c2:	bf04      	itt	eq
 80037c4:	1809      	addeq	r1, r1, r0
 80037c6:	6021      	streq	r1, [r4, #0]
 80037c8:	605c      	str	r4, [r3, #4]
 80037ca:	e7c7      	b.n	800375c <_free_r+0x24>
 80037cc:	bd38      	pop	{r3, r4, r5, pc}
 80037ce:	bf00      	nop
 80037d0:	2000021c 	.word	0x2000021c

080037d4 <_malloc_r>:
 80037d4:	b570      	push	{r4, r5, r6, lr}
 80037d6:	1ccd      	adds	r5, r1, #3
 80037d8:	f025 0503 	bic.w	r5, r5, #3
 80037dc:	3508      	adds	r5, #8
 80037de:	2d0c      	cmp	r5, #12
 80037e0:	bf38      	it	cc
 80037e2:	250c      	movcc	r5, #12
 80037e4:	2d00      	cmp	r5, #0
 80037e6:	4606      	mov	r6, r0
 80037e8:	db01      	blt.n	80037ee <_malloc_r+0x1a>
 80037ea:	42a9      	cmp	r1, r5
 80037ec:	d903      	bls.n	80037f6 <_malloc_r+0x22>
 80037ee:	230c      	movs	r3, #12
 80037f0:	6033      	str	r3, [r6, #0]
 80037f2:	2000      	movs	r0, #0
 80037f4:	bd70      	pop	{r4, r5, r6, pc}
 80037f6:	f000 f8f3 	bl	80039e0 <__malloc_lock>
 80037fa:	4a23      	ldr	r2, [pc, #140]	; (8003888 <_malloc_r+0xb4>)
 80037fc:	6814      	ldr	r4, [r2, #0]
 80037fe:	4621      	mov	r1, r4
 8003800:	b991      	cbnz	r1, 8003828 <_malloc_r+0x54>
 8003802:	4c22      	ldr	r4, [pc, #136]	; (800388c <_malloc_r+0xb8>)
 8003804:	6823      	ldr	r3, [r4, #0]
 8003806:	b91b      	cbnz	r3, 8003810 <_malloc_r+0x3c>
 8003808:	4630      	mov	r0, r6
 800380a:	f000 f849 	bl	80038a0 <_sbrk_r>
 800380e:	6020      	str	r0, [r4, #0]
 8003810:	4629      	mov	r1, r5
 8003812:	4630      	mov	r0, r6
 8003814:	f000 f844 	bl	80038a0 <_sbrk_r>
 8003818:	1c43      	adds	r3, r0, #1
 800381a:	d126      	bne.n	800386a <_malloc_r+0x96>
 800381c:	230c      	movs	r3, #12
 800381e:	6033      	str	r3, [r6, #0]
 8003820:	4630      	mov	r0, r6
 8003822:	f000 f8de 	bl	80039e2 <__malloc_unlock>
 8003826:	e7e4      	b.n	80037f2 <_malloc_r+0x1e>
 8003828:	680b      	ldr	r3, [r1, #0]
 800382a:	1b5b      	subs	r3, r3, r5
 800382c:	d41a      	bmi.n	8003864 <_malloc_r+0x90>
 800382e:	2b0b      	cmp	r3, #11
 8003830:	d90f      	bls.n	8003852 <_malloc_r+0x7e>
 8003832:	600b      	str	r3, [r1, #0]
 8003834:	50cd      	str	r5, [r1, r3]
 8003836:	18cc      	adds	r4, r1, r3
 8003838:	4630      	mov	r0, r6
 800383a:	f000 f8d2 	bl	80039e2 <__malloc_unlock>
 800383e:	f104 000b 	add.w	r0, r4, #11
 8003842:	1d23      	adds	r3, r4, #4
 8003844:	f020 0007 	bic.w	r0, r0, #7
 8003848:	1ac3      	subs	r3, r0, r3
 800384a:	d01b      	beq.n	8003884 <_malloc_r+0xb0>
 800384c:	425a      	negs	r2, r3
 800384e:	50e2      	str	r2, [r4, r3]
 8003850:	bd70      	pop	{r4, r5, r6, pc}
 8003852:	428c      	cmp	r4, r1
 8003854:	bf0d      	iteet	eq
 8003856:	6863      	ldreq	r3, [r4, #4]
 8003858:	684b      	ldrne	r3, [r1, #4]
 800385a:	6063      	strne	r3, [r4, #4]
 800385c:	6013      	streq	r3, [r2, #0]
 800385e:	bf18      	it	ne
 8003860:	460c      	movne	r4, r1
 8003862:	e7e9      	b.n	8003838 <_malloc_r+0x64>
 8003864:	460c      	mov	r4, r1
 8003866:	6849      	ldr	r1, [r1, #4]
 8003868:	e7ca      	b.n	8003800 <_malloc_r+0x2c>
 800386a:	1cc4      	adds	r4, r0, #3
 800386c:	f024 0403 	bic.w	r4, r4, #3
 8003870:	42a0      	cmp	r0, r4
 8003872:	d005      	beq.n	8003880 <_malloc_r+0xac>
 8003874:	1a21      	subs	r1, r4, r0
 8003876:	4630      	mov	r0, r6
 8003878:	f000 f812 	bl	80038a0 <_sbrk_r>
 800387c:	3001      	adds	r0, #1
 800387e:	d0cd      	beq.n	800381c <_malloc_r+0x48>
 8003880:	6025      	str	r5, [r4, #0]
 8003882:	e7d9      	b.n	8003838 <_malloc_r+0x64>
 8003884:	bd70      	pop	{r4, r5, r6, pc}
 8003886:	bf00      	nop
 8003888:	2000021c 	.word	0x2000021c
 800388c:	20000220 	.word	0x20000220

08003890 <realloc>:
 8003890:	4b02      	ldr	r3, [pc, #8]	; (800389c <realloc+0xc>)
 8003892:	460a      	mov	r2, r1
 8003894:	4601      	mov	r1, r0
 8003896:	6818      	ldr	r0, [r3, #0]
 8003898:	f000 b8a4 	b.w	80039e4 <_realloc_r>
 800389c:	20000024 	.word	0x20000024

080038a0 <_sbrk_r>:
 80038a0:	b538      	push	{r3, r4, r5, lr}
 80038a2:	4c06      	ldr	r4, [pc, #24]	; (80038bc <_sbrk_r+0x1c>)
 80038a4:	2300      	movs	r3, #0
 80038a6:	4605      	mov	r5, r0
 80038a8:	4608      	mov	r0, r1
 80038aa:	6023      	str	r3, [r4, #0]
 80038ac:	f000 f9f4 	bl	8003c98 <_sbrk>
 80038b0:	1c43      	adds	r3, r0, #1
 80038b2:	d102      	bne.n	80038ba <_sbrk_r+0x1a>
 80038b4:	6823      	ldr	r3, [r4, #0]
 80038b6:	b103      	cbz	r3, 80038ba <_sbrk_r+0x1a>
 80038b8:	602b      	str	r3, [r5, #0]
 80038ba:	bd38      	pop	{r3, r4, r5, pc}
 80038bc:	20012f98 	.word	0x20012f98

080038c0 <strcpy>:
 80038c0:	4603      	mov	r3, r0
 80038c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038c6:	f803 2b01 	strb.w	r2, [r3], #1
 80038ca:	2a00      	cmp	r2, #0
 80038cc:	d1f9      	bne.n	80038c2 <strcpy+0x2>
 80038ce:	4770      	bx	lr

080038d0 <strlwr>:
 80038d0:	b570      	push	{r4, r5, r6, lr}
 80038d2:	4606      	mov	r6, r0
 80038d4:	4605      	mov	r5, r0
 80038d6:	782c      	ldrb	r4, [r5, #0]
 80038d8:	b90c      	cbnz	r4, 80038de <strlwr+0xe>
 80038da:	4630      	mov	r0, r6
 80038dc:	bd70      	pop	{r4, r5, r6, pc}
 80038de:	f000 f85f 	bl	80039a0 <__locale_ctype_ptr>
 80038e2:	4420      	add	r0, r4
 80038e4:	7843      	ldrb	r3, [r0, #1]
 80038e6:	f003 0303 	and.w	r3, r3, #3
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	bf08      	it	eq
 80038ee:	3420      	addeq	r4, #32
 80038f0:	f805 4b01 	strb.w	r4, [r5], #1
 80038f4:	e7ef      	b.n	80038d6 <strlwr+0x6>
	...

080038f8 <strtok>:
 80038f8:	4b13      	ldr	r3, [pc, #76]	; (8003948 <strtok+0x50>)
 80038fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038fe:	681d      	ldr	r5, [r3, #0]
 8003900:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8003902:	4606      	mov	r6, r0
 8003904:	460f      	mov	r7, r1
 8003906:	b9b4      	cbnz	r4, 8003936 <strtok+0x3e>
 8003908:	2050      	movs	r0, #80	; 0x50
 800390a:	f7ff ff05 	bl	8003718 <malloc>
 800390e:	65a8      	str	r0, [r5, #88]	; 0x58
 8003910:	6004      	str	r4, [r0, #0]
 8003912:	6044      	str	r4, [r0, #4]
 8003914:	6084      	str	r4, [r0, #8]
 8003916:	60c4      	str	r4, [r0, #12]
 8003918:	6104      	str	r4, [r0, #16]
 800391a:	6144      	str	r4, [r0, #20]
 800391c:	6184      	str	r4, [r0, #24]
 800391e:	6284      	str	r4, [r0, #40]	; 0x28
 8003920:	62c4      	str	r4, [r0, #44]	; 0x2c
 8003922:	6304      	str	r4, [r0, #48]	; 0x30
 8003924:	6344      	str	r4, [r0, #52]	; 0x34
 8003926:	6384      	str	r4, [r0, #56]	; 0x38
 8003928:	63c4      	str	r4, [r0, #60]	; 0x3c
 800392a:	6404      	str	r4, [r0, #64]	; 0x40
 800392c:	6444      	str	r4, [r0, #68]	; 0x44
 800392e:	6484      	str	r4, [r0, #72]	; 0x48
 8003930:	64c4      	str	r4, [r0, #76]	; 0x4c
 8003932:	7704      	strb	r4, [r0, #28]
 8003934:	6244      	str	r4, [r0, #36]	; 0x24
 8003936:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8003938:	4639      	mov	r1, r7
 800393a:	4630      	mov	r0, r6
 800393c:	2301      	movs	r3, #1
 800393e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003942:	f000 b803 	b.w	800394c <__strtok_r>
 8003946:	bf00      	nop
 8003948:	20000024 	.word	0x20000024

0800394c <__strtok_r>:
 800394c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800394e:	b918      	cbnz	r0, 8003958 <__strtok_r+0xc>
 8003950:	6810      	ldr	r0, [r2, #0]
 8003952:	b908      	cbnz	r0, 8003958 <__strtok_r+0xc>
 8003954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003956:	4620      	mov	r0, r4
 8003958:	4604      	mov	r4, r0
 800395a:	460f      	mov	r7, r1
 800395c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003960:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003964:	b91e      	cbnz	r6, 800396e <__strtok_r+0x22>
 8003966:	b965      	cbnz	r5, 8003982 <__strtok_r+0x36>
 8003968:	6015      	str	r5, [r2, #0]
 800396a:	4628      	mov	r0, r5
 800396c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800396e:	42b5      	cmp	r5, r6
 8003970:	d1f6      	bne.n	8003960 <__strtok_r+0x14>
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1ef      	bne.n	8003956 <__strtok_r+0xa>
 8003976:	6014      	str	r4, [r2, #0]
 8003978:	7003      	strb	r3, [r0, #0]
 800397a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800397c:	461c      	mov	r4, r3
 800397e:	e00c      	b.n	800399a <__strtok_r+0x4e>
 8003980:	b915      	cbnz	r5, 8003988 <__strtok_r+0x3c>
 8003982:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003986:	460e      	mov	r6, r1
 8003988:	f816 5b01 	ldrb.w	r5, [r6], #1
 800398c:	42ab      	cmp	r3, r5
 800398e:	d1f7      	bne.n	8003980 <__strtok_r+0x34>
 8003990:	2b00      	cmp	r3, #0
 8003992:	d0f3      	beq.n	800397c <__strtok_r+0x30>
 8003994:	2300      	movs	r3, #0
 8003996:	f804 3c01 	strb.w	r3, [r4, #-1]
 800399a:	6014      	str	r4, [r2, #0]
 800399c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080039a0 <__locale_ctype_ptr>:
 80039a0:	4b04      	ldr	r3, [pc, #16]	; (80039b4 <__locale_ctype_ptr+0x14>)
 80039a2:	4a05      	ldr	r2, [pc, #20]	; (80039b8 <__locale_ctype_ptr+0x18>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	bf08      	it	eq
 80039ac:	4613      	moveq	r3, r2
 80039ae:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80039b2:	4770      	bx	lr
 80039b4:	20000024 	.word	0x20000024
 80039b8:	20000088 	.word	0x20000088

080039bc <__ascii_mbtowc>:
 80039bc:	b082      	sub	sp, #8
 80039be:	b901      	cbnz	r1, 80039c2 <__ascii_mbtowc+0x6>
 80039c0:	a901      	add	r1, sp, #4
 80039c2:	b142      	cbz	r2, 80039d6 <__ascii_mbtowc+0x1a>
 80039c4:	b14b      	cbz	r3, 80039da <__ascii_mbtowc+0x1e>
 80039c6:	7813      	ldrb	r3, [r2, #0]
 80039c8:	600b      	str	r3, [r1, #0]
 80039ca:	7812      	ldrb	r2, [r2, #0]
 80039cc:	1c10      	adds	r0, r2, #0
 80039ce:	bf18      	it	ne
 80039d0:	2001      	movne	r0, #1
 80039d2:	b002      	add	sp, #8
 80039d4:	4770      	bx	lr
 80039d6:	4610      	mov	r0, r2
 80039d8:	e7fb      	b.n	80039d2 <__ascii_mbtowc+0x16>
 80039da:	f06f 0001 	mvn.w	r0, #1
 80039de:	e7f8      	b.n	80039d2 <__ascii_mbtowc+0x16>

080039e0 <__malloc_lock>:
 80039e0:	4770      	bx	lr

080039e2 <__malloc_unlock>:
 80039e2:	4770      	bx	lr

080039e4 <_realloc_r>:
 80039e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039e6:	4607      	mov	r7, r0
 80039e8:	4614      	mov	r4, r2
 80039ea:	460e      	mov	r6, r1
 80039ec:	b921      	cbnz	r1, 80039f8 <_realloc_r+0x14>
 80039ee:	4611      	mov	r1, r2
 80039f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80039f4:	f7ff beee 	b.w	80037d4 <_malloc_r>
 80039f8:	b922      	cbnz	r2, 8003a04 <_realloc_r+0x20>
 80039fa:	f7ff fe9d 	bl	8003738 <_free_r>
 80039fe:	4625      	mov	r5, r4
 8003a00:	4628      	mov	r0, r5
 8003a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a04:	f000 f82c 	bl	8003a60 <_malloc_usable_size_r>
 8003a08:	4284      	cmp	r4, r0
 8003a0a:	d90f      	bls.n	8003a2c <_realloc_r+0x48>
 8003a0c:	4621      	mov	r1, r4
 8003a0e:	4638      	mov	r0, r7
 8003a10:	f7ff fee0 	bl	80037d4 <_malloc_r>
 8003a14:	4605      	mov	r5, r0
 8003a16:	2800      	cmp	r0, #0
 8003a18:	d0f2      	beq.n	8003a00 <_realloc_r+0x1c>
 8003a1a:	4631      	mov	r1, r6
 8003a1c:	4622      	mov	r2, r4
 8003a1e:	f000 f814 	bl	8003a4a <memcpy>
 8003a22:	4631      	mov	r1, r6
 8003a24:	4638      	mov	r0, r7
 8003a26:	f7ff fe87 	bl	8003738 <_free_r>
 8003a2a:	e7e9      	b.n	8003a00 <_realloc_r+0x1c>
 8003a2c:	4635      	mov	r5, r6
 8003a2e:	e7e7      	b.n	8003a00 <_realloc_r+0x1c>

08003a30 <__ascii_wctomb>:
 8003a30:	b149      	cbz	r1, 8003a46 <__ascii_wctomb+0x16>
 8003a32:	2aff      	cmp	r2, #255	; 0xff
 8003a34:	bf85      	ittet	hi
 8003a36:	238a      	movhi	r3, #138	; 0x8a
 8003a38:	6003      	strhi	r3, [r0, #0]
 8003a3a:	700a      	strbls	r2, [r1, #0]
 8003a3c:	f04f 30ff 	movhi.w	r0, #4294967295
 8003a40:	bf98      	it	ls
 8003a42:	2001      	movls	r0, #1
 8003a44:	4770      	bx	lr
 8003a46:	4608      	mov	r0, r1
 8003a48:	4770      	bx	lr

08003a4a <memcpy>:
 8003a4a:	b510      	push	{r4, lr}
 8003a4c:	1e43      	subs	r3, r0, #1
 8003a4e:	440a      	add	r2, r1
 8003a50:	4291      	cmp	r1, r2
 8003a52:	d100      	bne.n	8003a56 <memcpy+0xc>
 8003a54:	bd10      	pop	{r4, pc}
 8003a56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a5e:	e7f7      	b.n	8003a50 <memcpy+0x6>

08003a60 <_malloc_usable_size_r>:
 8003a60:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003a64:	2800      	cmp	r0, #0
 8003a66:	f1a0 0004 	sub.w	r0, r0, #4
 8003a6a:	bfbc      	itt	lt
 8003a6c:	580b      	ldrlt	r3, [r1, r0]
 8003a6e:	18c0      	addlt	r0, r0, r3
 8003a70:	4770      	bx	lr
	...

08003a74 <sqrt>:
 8003a74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a78:	ed2d 8b02 	vpush	{d8}
 8003a7c:	b08b      	sub	sp, #44	; 0x2c
 8003a7e:	ec55 4b10 	vmov	r4, r5, d0
 8003a82:	f000 f851 	bl	8003b28 <__ieee754_sqrt>
 8003a86:	4b26      	ldr	r3, [pc, #152]	; (8003b20 <sqrt+0xac>)
 8003a88:	eeb0 8a40 	vmov.f32	s16, s0
 8003a8c:	eef0 8a60 	vmov.f32	s17, s1
 8003a90:	f993 6000 	ldrsb.w	r6, [r3]
 8003a94:	1c73      	adds	r3, r6, #1
 8003a96:	d02a      	beq.n	8003aee <sqrt+0x7a>
 8003a98:	4622      	mov	r2, r4
 8003a9a:	462b      	mov	r3, r5
 8003a9c:	4620      	mov	r0, r4
 8003a9e:	4629      	mov	r1, r5
 8003aa0:	f7fc fff6 	bl	8000a90 <__aeabi_dcmpun>
 8003aa4:	4607      	mov	r7, r0
 8003aa6:	bb10      	cbnz	r0, 8003aee <sqrt+0x7a>
 8003aa8:	f04f 0800 	mov.w	r8, #0
 8003aac:	f04f 0900 	mov.w	r9, #0
 8003ab0:	4642      	mov	r2, r8
 8003ab2:	464b      	mov	r3, r9
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	4629      	mov	r1, r5
 8003ab8:	f7fc ffc2 	bl	8000a40 <__aeabi_dcmplt>
 8003abc:	b1b8      	cbz	r0, 8003aee <sqrt+0x7a>
 8003abe:	2301      	movs	r3, #1
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	4b18      	ldr	r3, [pc, #96]	; (8003b24 <sqrt+0xb0>)
 8003ac4:	9301      	str	r3, [sp, #4]
 8003ac6:	9708      	str	r7, [sp, #32]
 8003ac8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8003acc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003ad0:	b9b6      	cbnz	r6, 8003b00 <sqrt+0x8c>
 8003ad2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003ad6:	4668      	mov	r0, sp
 8003ad8:	f000 f8d6 	bl	8003c88 <matherr>
 8003adc:	b1d0      	cbz	r0, 8003b14 <sqrt+0xa0>
 8003ade:	9b08      	ldr	r3, [sp, #32]
 8003ae0:	b11b      	cbz	r3, 8003aea <sqrt+0x76>
 8003ae2:	f000 f8d3 	bl	8003c8c <__errno>
 8003ae6:	9b08      	ldr	r3, [sp, #32]
 8003ae8:	6003      	str	r3, [r0, #0]
 8003aea:	ed9d 8b06 	vldr	d8, [sp, #24]
 8003aee:	eeb0 0a48 	vmov.f32	s0, s16
 8003af2:	eef0 0a68 	vmov.f32	s1, s17
 8003af6:	b00b      	add	sp, #44	; 0x2c
 8003af8:	ecbd 8b02 	vpop	{d8}
 8003afc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003b00:	4642      	mov	r2, r8
 8003b02:	464b      	mov	r3, r9
 8003b04:	4640      	mov	r0, r8
 8003b06:	4649      	mov	r1, r9
 8003b08:	f7fc fe52 	bl	80007b0 <__aeabi_ddiv>
 8003b0c:	2e02      	cmp	r6, #2
 8003b0e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003b12:	d1e0      	bne.n	8003ad6 <sqrt+0x62>
 8003b14:	f000 f8ba 	bl	8003c8c <__errno>
 8003b18:	2321      	movs	r3, #33	; 0x21
 8003b1a:	6003      	str	r3, [r0, #0]
 8003b1c:	e7df      	b.n	8003ade <sqrt+0x6a>
 8003b1e:	bf00      	nop
 8003b20:	200001f4 	.word	0x200001f4
 8003b24:	08003f1d 	.word	0x08003f1d

08003b28 <__ieee754_sqrt>:
 8003b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b2c:	ec55 4b10 	vmov	r4, r5, d0
 8003b30:	4e54      	ldr	r6, [pc, #336]	; (8003c84 <__ieee754_sqrt+0x15c>)
 8003b32:	43ae      	bics	r6, r5
 8003b34:	ee10 0a10 	vmov	r0, s0
 8003b38:	462b      	mov	r3, r5
 8003b3a:	462a      	mov	r2, r5
 8003b3c:	4621      	mov	r1, r4
 8003b3e:	d113      	bne.n	8003b68 <__ieee754_sqrt+0x40>
 8003b40:	ee10 2a10 	vmov	r2, s0
 8003b44:	462b      	mov	r3, r5
 8003b46:	ee10 0a10 	vmov	r0, s0
 8003b4a:	4629      	mov	r1, r5
 8003b4c:	f7fc fd06 	bl	800055c <__aeabi_dmul>
 8003b50:	4602      	mov	r2, r0
 8003b52:	460b      	mov	r3, r1
 8003b54:	4620      	mov	r0, r4
 8003b56:	4629      	mov	r1, r5
 8003b58:	f7fc fb4e 	bl	80001f8 <__adddf3>
 8003b5c:	4604      	mov	r4, r0
 8003b5e:	460d      	mov	r5, r1
 8003b60:	ec45 4b10 	vmov	d0, r4, r5
 8003b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b68:	2d00      	cmp	r5, #0
 8003b6a:	dc10      	bgt.n	8003b8e <__ieee754_sqrt+0x66>
 8003b6c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8003b70:	4330      	orrs	r0, r6
 8003b72:	d0f5      	beq.n	8003b60 <__ieee754_sqrt+0x38>
 8003b74:	b15d      	cbz	r5, 8003b8e <__ieee754_sqrt+0x66>
 8003b76:	ee10 2a10 	vmov	r2, s0
 8003b7a:	462b      	mov	r3, r5
 8003b7c:	4620      	mov	r0, r4
 8003b7e:	4629      	mov	r1, r5
 8003b80:	f7fc fb38 	bl	80001f4 <__aeabi_dsub>
 8003b84:	4602      	mov	r2, r0
 8003b86:	460b      	mov	r3, r1
 8003b88:	f7fc fe12 	bl	80007b0 <__aeabi_ddiv>
 8003b8c:	e7e6      	b.n	8003b5c <__ieee754_sqrt+0x34>
 8003b8e:	151b      	asrs	r3, r3, #20
 8003b90:	d10c      	bne.n	8003bac <__ieee754_sqrt+0x84>
 8003b92:	2a00      	cmp	r2, #0
 8003b94:	d06d      	beq.n	8003c72 <__ieee754_sqrt+0x14a>
 8003b96:	2000      	movs	r0, #0
 8003b98:	02d6      	lsls	r6, r2, #11
 8003b9a:	d56e      	bpl.n	8003c7a <__ieee754_sqrt+0x152>
 8003b9c:	1e44      	subs	r4, r0, #1
 8003b9e:	1b1b      	subs	r3, r3, r4
 8003ba0:	f1c0 0420 	rsb	r4, r0, #32
 8003ba4:	fa21 f404 	lsr.w	r4, r1, r4
 8003ba8:	4322      	orrs	r2, r4
 8003baa:	4081      	lsls	r1, r0
 8003bac:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003bb0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8003bb4:	07dd      	lsls	r5, r3, #31
 8003bb6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003bba:	bf42      	ittt	mi
 8003bbc:	0052      	lslmi	r2, r2, #1
 8003bbe:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8003bc2:	0049      	lslmi	r1, r1, #1
 8003bc4:	1058      	asrs	r0, r3, #1
 8003bc6:	2500      	movs	r5, #0
 8003bc8:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8003bcc:	441a      	add	r2, r3
 8003bce:	0049      	lsls	r1, r1, #1
 8003bd0:	2316      	movs	r3, #22
 8003bd2:	462c      	mov	r4, r5
 8003bd4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8003bd8:	19a7      	adds	r7, r4, r6
 8003bda:	4297      	cmp	r7, r2
 8003bdc:	bfde      	ittt	le
 8003bde:	1bd2      	suble	r2, r2, r7
 8003be0:	19bc      	addle	r4, r7, r6
 8003be2:	19ad      	addle	r5, r5, r6
 8003be4:	0052      	lsls	r2, r2, #1
 8003be6:	3b01      	subs	r3, #1
 8003be8:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8003bec:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003bf0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8003bf4:	d1f0      	bne.n	8003bd8 <__ieee754_sqrt+0xb0>
 8003bf6:	f04f 0e20 	mov.w	lr, #32
 8003bfa:	469c      	mov	ip, r3
 8003bfc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8003c00:	42a2      	cmp	r2, r4
 8003c02:	eb06 070c 	add.w	r7, r6, ip
 8003c06:	dc02      	bgt.n	8003c0e <__ieee754_sqrt+0xe6>
 8003c08:	d112      	bne.n	8003c30 <__ieee754_sqrt+0x108>
 8003c0a:	428f      	cmp	r7, r1
 8003c0c:	d810      	bhi.n	8003c30 <__ieee754_sqrt+0x108>
 8003c0e:	2f00      	cmp	r7, #0
 8003c10:	eb07 0c06 	add.w	ip, r7, r6
 8003c14:	da34      	bge.n	8003c80 <__ieee754_sqrt+0x158>
 8003c16:	f1bc 0f00 	cmp.w	ip, #0
 8003c1a:	db31      	blt.n	8003c80 <__ieee754_sqrt+0x158>
 8003c1c:	f104 0801 	add.w	r8, r4, #1
 8003c20:	1b12      	subs	r2, r2, r4
 8003c22:	428f      	cmp	r7, r1
 8003c24:	bf88      	it	hi
 8003c26:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8003c2a:	1bc9      	subs	r1, r1, r7
 8003c2c:	4433      	add	r3, r6
 8003c2e:	4644      	mov	r4, r8
 8003c30:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8003c34:	f1be 0e01 	subs.w	lr, lr, #1
 8003c38:	443a      	add	r2, r7
 8003c3a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8003c3e:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003c42:	d1dd      	bne.n	8003c00 <__ieee754_sqrt+0xd8>
 8003c44:	430a      	orrs	r2, r1
 8003c46:	d006      	beq.n	8003c56 <__ieee754_sqrt+0x12e>
 8003c48:	1c5c      	adds	r4, r3, #1
 8003c4a:	bf13      	iteet	ne
 8003c4c:	3301      	addne	r3, #1
 8003c4e:	3501      	addeq	r5, #1
 8003c50:	4673      	moveq	r3, lr
 8003c52:	f023 0301 	bicne.w	r3, r3, #1
 8003c56:	106a      	asrs	r2, r5, #1
 8003c58:	085b      	lsrs	r3, r3, #1
 8003c5a:	07e9      	lsls	r1, r5, #31
 8003c5c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8003c60:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8003c64:	bf48      	it	mi
 8003c66:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8003c6a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8003c6e:	461c      	mov	r4, r3
 8003c70:	e776      	b.n	8003b60 <__ieee754_sqrt+0x38>
 8003c72:	0aca      	lsrs	r2, r1, #11
 8003c74:	3b15      	subs	r3, #21
 8003c76:	0549      	lsls	r1, r1, #21
 8003c78:	e78b      	b.n	8003b92 <__ieee754_sqrt+0x6a>
 8003c7a:	0052      	lsls	r2, r2, #1
 8003c7c:	3001      	adds	r0, #1
 8003c7e:	e78b      	b.n	8003b98 <__ieee754_sqrt+0x70>
 8003c80:	46a0      	mov	r8, r4
 8003c82:	e7cd      	b.n	8003c20 <__ieee754_sqrt+0xf8>
 8003c84:	7ff00000 	.word	0x7ff00000

08003c88 <matherr>:
 8003c88:	2000      	movs	r0, #0
 8003c8a:	4770      	bx	lr

08003c8c <__errno>:
 8003c8c:	4b01      	ldr	r3, [pc, #4]	; (8003c94 <__errno+0x8>)
 8003c8e:	6818      	ldr	r0, [r3, #0]
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	20000024 	.word	0x20000024

08003c98 <_sbrk>:
 8003c98:	4b04      	ldr	r3, [pc, #16]	; (8003cac <_sbrk+0x14>)
 8003c9a:	6819      	ldr	r1, [r3, #0]
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	b909      	cbnz	r1, 8003ca4 <_sbrk+0xc>
 8003ca0:	4903      	ldr	r1, [pc, #12]	; (8003cb0 <_sbrk+0x18>)
 8003ca2:	6019      	str	r1, [r3, #0]
 8003ca4:	6818      	ldr	r0, [r3, #0]
 8003ca6:	4402      	add	r2, r0
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	4770      	bx	lr
 8003cac:	20000224 	.word	0x20000224
 8003cb0:	20012f9c 	.word	0x20012f9c

08003cb4 <_init>:
 8003cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cb6:	bf00      	nop
 8003cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cba:	bc08      	pop	{r3}
 8003cbc:	469e      	mov	lr, r3
 8003cbe:	4770      	bx	lr

08003cc0 <_fini>:
 8003cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc2:	bf00      	nop
 8003cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cc6:	bc08      	pop	{r3}
 8003cc8:	469e      	mov	lr, r3
 8003cca:	4770      	bx	lr
