
VGA_core_M4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bb0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004b50  08004d38  08004d38  00014d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009888  08009888  00019888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800988c  0800988c  0001988c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000003c8  20000000  08009890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000203c8  2**0
                  CONTENTS
  7 .bss          00012da4  200003c8  200003c8  000203c8  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2001316c  2001316c  000203c8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000203c8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000b4fb  00000000  00000000  000203f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001d01  00000000  00000000  0002b8f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a40  00000000  00000000  0002d5f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000938  00000000  00000000  0002e038  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004522  00000000  00000000  0002e970  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000030dd  00000000  00000000  00032e92  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00035f6f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000032f8  00000000  00000000  00035fec  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  000392e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200003c8 	.word	0x200003c8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004d20 	.word	0x08004d20

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200003cc 	.word	0x200003cc
 80001c4:	08004d20 	.word	0x08004d20

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032a:	f1a4 0401 	sub.w	r4, r4, #1
 800032e:	d1e9      	bne.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f092 0f00 	teq	r2, #0
 80004d6:	bf14      	ite	ne
 80004d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	e720      	b.n	8000330 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_ul2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f04f 0500 	mov.w	r5, #0
 80004fe:	e00a      	b.n	8000516 <__aeabi_l2d+0x16>

08000500 <__aeabi_l2d>:
 8000500:	ea50 0201 	orrs.w	r2, r0, r1
 8000504:	bf08      	it	eq
 8000506:	4770      	bxeq	lr
 8000508:	b530      	push	{r4, r5, lr}
 800050a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050e:	d502      	bpl.n	8000516 <__aeabi_l2d+0x16>
 8000510:	4240      	negs	r0, r0
 8000512:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000516:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000522:	f43f aedc 	beq.w	80002de <__adddf3+0xe6>
 8000526:	f04f 0203 	mov.w	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053e:	f1c2 0320 	rsb	r3, r2, #32
 8000542:	fa00 fc03 	lsl.w	ip, r0, r3
 8000546:	fa20 f002 	lsr.w	r0, r0, r2
 800054a:	fa01 fe03 	lsl.w	lr, r1, r3
 800054e:	ea40 000e 	orr.w	r0, r0, lr
 8000552:	fa21 f102 	lsr.w	r1, r1, r2
 8000556:	4414      	add	r4, r2
 8000558:	e6c1      	b.n	80002de <__adddf3+0xe6>
 800055a:	bf00      	nop

0800055c <__aeabi_dmul>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000562:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000566:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056a:	bf1d      	ittte	ne
 800056c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000570:	ea94 0f0c 	teqne	r4, ip
 8000574:	ea95 0f0c 	teqne	r5, ip
 8000578:	f000 f8de 	bleq	8000738 <__aeabi_dmul+0x1dc>
 800057c:	442c      	add	r4, r5
 800057e:	ea81 0603 	eor.w	r6, r1, r3
 8000582:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000586:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058e:	bf18      	it	ne
 8000590:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800059c:	d038      	beq.n	8000610 <__aeabi_dmul+0xb4>
 800059e:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a2:	f04f 0500 	mov.w	r5, #0
 80005a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b2:	f04f 0600 	mov.w	r6, #0
 80005b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ba:	f09c 0f00 	teq	ip, #0
 80005be:	bf18      	it	ne
 80005c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d0:	d204      	bcs.n	80005dc <__aeabi_dmul+0x80>
 80005d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d6:	416d      	adcs	r5, r5
 80005d8:	eb46 0606 	adc.w	r6, r6, r6
 80005dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f4:	bf88      	it	hi
 80005f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fa:	d81e      	bhi.n	800063a <__aeabi_dmul+0xde>
 80005fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000614:	ea46 0101 	orr.w	r1, r6, r1
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	ea81 0103 	eor.w	r1, r1, r3
 8000620:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000624:	bfc2      	ittt	gt
 8000626:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062e:	bd70      	popgt	{r4, r5, r6, pc}
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f04f 0e00 	mov.w	lr, #0
 8000638:	3c01      	subs	r4, #1
 800063a:	f300 80ab 	bgt.w	8000794 <__aeabi_dmul+0x238>
 800063e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000642:	bfde      	ittt	le
 8000644:	2000      	movle	r0, #0
 8000646:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064a:	bd70      	pople	{r4, r5, r6, pc}
 800064c:	f1c4 0400 	rsb	r4, r4, #0
 8000650:	3c20      	subs	r4, #32
 8000652:	da35      	bge.n	80006c0 <__aeabi_dmul+0x164>
 8000654:	340c      	adds	r4, #12
 8000656:	dc1b      	bgt.n	8000690 <__aeabi_dmul+0x134>
 8000658:	f104 0414 	add.w	r4, r4, #20
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f305 	lsl.w	r3, r0, r5
 8000664:	fa20 f004 	lsr.w	r0, r0, r4
 8000668:	fa01 f205 	lsl.w	r2, r1, r5
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000678:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800067c:	fa21 f604 	lsr.w	r6, r1, r4
 8000680:	eb42 0106 	adc.w	r1, r2, r6
 8000684:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000688:	bf08      	it	eq
 800068a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f1c4 040c 	rsb	r4, r4, #12
 8000694:	f1c4 0520 	rsb	r5, r4, #32
 8000698:	fa00 f304 	lsl.w	r3, r0, r4
 800069c:	fa20 f005 	lsr.w	r0, r0, r5
 80006a0:	fa01 f204 	lsl.w	r2, r1, r4
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	f141 0100 	adc.w	r1, r1, #0
 80006b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b8:	bf08      	it	eq
 80006ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f205 	lsl.w	r2, r0, r5
 80006c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006cc:	fa20 f304 	lsr.w	r3, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea43 0302 	orr.w	r3, r3, r2
 80006d8:	fa21 f004 	lsr.w	r0, r1, r4
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	fa21 f204 	lsr.w	r2, r1, r4
 80006e4:	ea20 0002 	bic.w	r0, r0, r2
 80006e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f094 0f00 	teq	r4, #0
 80006fc:	d10f      	bne.n	800071e <__aeabi_dmul+0x1c2>
 80006fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000702:	0040      	lsls	r0, r0, #1
 8000704:	eb41 0101 	adc.w	r1, r1, r1
 8000708:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800070c:	bf08      	it	eq
 800070e:	3c01      	subeq	r4, #1
 8000710:	d0f7      	beq.n	8000702 <__aeabi_dmul+0x1a6>
 8000712:	ea41 0106 	orr.w	r1, r1, r6
 8000716:	f095 0f00 	teq	r5, #0
 800071a:	bf18      	it	ne
 800071c:	4770      	bxne	lr
 800071e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000722:	0052      	lsls	r2, r2, #1
 8000724:	eb43 0303 	adc.w	r3, r3, r3
 8000728:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800072c:	bf08      	it	eq
 800072e:	3d01      	subeq	r5, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1c6>
 8000732:	ea43 0306 	orr.w	r3, r3, r6
 8000736:	4770      	bx	lr
 8000738:	ea94 0f0c 	teq	r4, ip
 800073c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000740:	bf18      	it	ne
 8000742:	ea95 0f0c 	teqne	r5, ip
 8000746:	d00c      	beq.n	8000762 <__aeabi_dmul+0x206>
 8000748:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074c:	bf18      	it	ne
 800074e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000752:	d1d1      	bne.n	80006f8 <__aeabi_dmul+0x19c>
 8000754:	ea81 0103 	eor.w	r1, r1, r3
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	f04f 0000 	mov.w	r0, #0
 8000760:	bd70      	pop	{r4, r5, r6, pc}
 8000762:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000766:	bf06      	itte	eq
 8000768:	4610      	moveq	r0, r2
 800076a:	4619      	moveq	r1, r3
 800076c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000770:	d019      	beq.n	80007a6 <__aeabi_dmul+0x24a>
 8000772:	ea94 0f0c 	teq	r4, ip
 8000776:	d102      	bne.n	800077e <__aeabi_dmul+0x222>
 8000778:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800077c:	d113      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 800077e:	ea95 0f0c 	teq	r5, ip
 8000782:	d105      	bne.n	8000790 <__aeabi_dmul+0x234>
 8000784:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000788:	bf1c      	itt	ne
 800078a:	4610      	movne	r0, r2
 800078c:	4619      	movne	r1, r3
 800078e:	d10a      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ae:	bd70      	pop	{r4, r5, r6, pc}

080007b0 <__aeabi_ddiv>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007be:	bf1d      	ittte	ne
 80007c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c4:	ea94 0f0c 	teqne	r4, ip
 80007c8:	ea95 0f0c 	teqne	r5, ip
 80007cc:	f000 f8a7 	bleq	800091e <__aeabi_ddiv+0x16e>
 80007d0:	eba4 0405 	sub.w	r4, r4, r5
 80007d4:	ea81 0e03 	eor.w	lr, r1, r3
 80007d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e0:	f000 8088 	beq.w	80008f4 <__aeabi_ddiv+0x144>
 80007e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000800:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000804:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000808:	429d      	cmp	r5, r3
 800080a:	bf08      	it	eq
 800080c:	4296      	cmpeq	r6, r2
 800080e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000812:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000816:	d202      	bcs.n	800081e <__aeabi_ddiv+0x6e>
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	1ab6      	subs	r6, r6, r2
 8000820:	eb65 0503 	sbc.w	r5, r5, r3
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 000c 	orrcs.w	r0, r0, ip
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800088c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000890:	d018      	beq.n	80008c4 <__aeabi_ddiv+0x114>
 8000892:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000896:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ae:	d1c0      	bne.n	8000832 <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	d10b      	bne.n	80008ce <__aeabi_ddiv+0x11e>
 80008b6:	ea41 0100 	orr.w	r1, r1, r0
 80008ba:	f04f 0000 	mov.w	r0, #0
 80008be:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c2:	e7b6      	b.n	8000832 <__aeabi_ddiv+0x82>
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	bf04      	itt	eq
 80008ca:	4301      	orreq	r1, r0
 80008cc:	2000      	moveq	r0, #0
 80008ce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d2:	bf88      	it	hi
 80008d4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d8:	f63f aeaf 	bhi.w	800063a <__aeabi_dmul+0xde>
 80008dc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e0:	bf04      	itt	eq
 80008e2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ea:	f150 0000 	adcs.w	r0, r0, #0
 80008ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	pop	{r4, r5, r6, pc}
 80008f4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000900:	bfc2      	ittt	gt
 8000902:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000906:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090a:	bd70      	popgt	{r4, r5, r6, pc}
 800090c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000910:	f04f 0e00 	mov.w	lr, #0
 8000914:	3c01      	subs	r4, #1
 8000916:	e690      	b.n	800063a <__aeabi_dmul+0xde>
 8000918:	ea45 0e06 	orr.w	lr, r5, r6
 800091c:	e68d      	b.n	800063a <__aeabi_dmul+0xde>
 800091e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000922:	ea94 0f0c 	teq	r4, ip
 8000926:	bf08      	it	eq
 8000928:	ea95 0f0c 	teqeq	r5, ip
 800092c:	f43f af3b 	beq.w	80007a6 <__aeabi_dmul+0x24a>
 8000930:	ea94 0f0c 	teq	r4, ip
 8000934:	d10a      	bne.n	800094c <__aeabi_ddiv+0x19c>
 8000936:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093a:	f47f af34 	bne.w	80007a6 <__aeabi_dmul+0x24a>
 800093e:	ea95 0f0c 	teq	r5, ip
 8000942:	f47f af25 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e72c      	b.n	80007a6 <__aeabi_dmul+0x24a>
 800094c:	ea95 0f0c 	teq	r5, ip
 8000950:	d106      	bne.n	8000960 <__aeabi_ddiv+0x1b0>
 8000952:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000956:	f43f aefd 	beq.w	8000754 <__aeabi_dmul+0x1f8>
 800095a:	4610      	mov	r0, r2
 800095c:	4619      	mov	r1, r3
 800095e:	e722      	b.n	80007a6 <__aeabi_dmul+0x24a>
 8000960:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096a:	f47f aec5 	bne.w	80006f8 <__aeabi_dmul+0x19c>
 800096e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000972:	f47f af0d 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000976:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097a:	f47f aeeb 	bne.w	8000754 <__aeabi_dmul+0x1f8>
 800097e:	e712      	b.n	80007a6 <__aeabi_dmul+0x24a>

08000980 <__gedf2>:
 8000980:	f04f 3cff 	mov.w	ip, #4294967295
 8000984:	e006      	b.n	8000994 <__cmpdf2+0x4>
 8000986:	bf00      	nop

08000988 <__ledf2>:
 8000988:	f04f 0c01 	mov.w	ip, #1
 800098c:	e002      	b.n	8000994 <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__cmpdf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000998:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	bf18      	it	ne
 80009a6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009aa:	d01b      	beq.n	80009e4 <__cmpdf2+0x54>
 80009ac:	b001      	add	sp, #4
 80009ae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b2:	bf0c      	ite	eq
 80009b4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b8:	ea91 0f03 	teqne	r1, r3
 80009bc:	bf02      	ittt	eq
 80009be:	ea90 0f02 	teqeq	r0, r2
 80009c2:	2000      	moveq	r0, #0
 80009c4:	4770      	bxeq	lr
 80009c6:	f110 0f00 	cmn.w	r0, #0
 80009ca:	ea91 0f03 	teq	r1, r3
 80009ce:	bf58      	it	pl
 80009d0:	4299      	cmppl	r1, r3
 80009d2:	bf08      	it	eq
 80009d4:	4290      	cmpeq	r0, r2
 80009d6:	bf2c      	ite	cs
 80009d8:	17d8      	asrcs	r0, r3, #31
 80009da:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009de:	f040 0001 	orr.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	d102      	bne.n	80009f4 <__cmpdf2+0x64>
 80009ee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f2:	d107      	bne.n	8000a04 <__cmpdf2+0x74>
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	d1d6      	bne.n	80009ac <__cmpdf2+0x1c>
 80009fe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a02:	d0d3      	beq.n	80009ac <__cmpdf2+0x1c>
 8000a04:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_cdrcmple>:
 8000a0c:	4684      	mov	ip, r0
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4662      	mov	r2, ip
 8000a12:	468c      	mov	ip, r1
 8000a14:	4619      	mov	r1, r3
 8000a16:	4663      	mov	r3, ip
 8000a18:	e000      	b.n	8000a1c <__aeabi_cdcmpeq>
 8000a1a:	bf00      	nop

08000a1c <__aeabi_cdcmpeq>:
 8000a1c:	b501      	push	{r0, lr}
 8000a1e:	f7ff ffb7 	bl	8000990 <__cmpdf2>
 8000a22:	2800      	cmp	r0, #0
 8000a24:	bf48      	it	mi
 8000a26:	f110 0f00 	cmnmi.w	r0, #0
 8000a2a:	bd01      	pop	{r0, pc}

08000a2c <__aeabi_dcmpeq>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff fff4 	bl	8000a1c <__aeabi_cdcmpeq>
 8000a34:	bf0c      	ite	eq
 8000a36:	2001      	moveq	r0, #1
 8000a38:	2000      	movne	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmplt>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffea 	bl	8000a1c <__aeabi_cdcmpeq>
 8000a48:	bf34      	ite	cc
 8000a4a:	2001      	movcc	r0, #1
 8000a4c:	2000      	movcs	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmple>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffe0 	bl	8000a1c <__aeabi_cdcmpeq>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpge>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffce 	bl	8000a0c <__aeabi_cdrcmple>
 8000a70:	bf94      	ite	ls
 8000a72:	2001      	movls	r0, #1
 8000a74:	2000      	movhi	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpgt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffc4 	bl	8000a0c <__aeabi_cdrcmple>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmpun>:
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__aeabi_dcmpun+0x10>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d10a      	bne.n	8000ab6 <__aeabi_dcmpun+0x26>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__aeabi_dcmpun+0x20>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d102      	bne.n	8000ab6 <__aeabi_dcmpun+0x26>
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	f04f 0001 	mov.w	r0, #1
 8000aba:	4770      	bx	lr

08000abc <__aeabi_d2uiz>:
 8000abc:	004a      	lsls	r2, r1, #1
 8000abe:	d211      	bcs.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac4:	d211      	bcs.n	8000aea <__aeabi_d2uiz+0x2e>
 8000ac6:	d50d      	bpl.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000acc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad0:	d40e      	bmi.n	8000af0 <__aeabi_d2uiz+0x34>
 8000ad2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ada:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d102      	bne.n	8000af6 <__aeabi_d2uiz+0x3a>
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	4770      	bx	lr
 8000af6:	f04f 0000 	mov.w	r0, #0
 8000afa:	4770      	bx	lr

08000afc <__aeabi_d2f>:
 8000afc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b04:	bf24      	itt	cs
 8000b06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0e:	d90d      	bls.n	8000b2c <__aeabi_d2f+0x30>
 8000b10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b24:	bf08      	it	eq
 8000b26:	f020 0001 	biceq.w	r0, r0, #1
 8000b2a:	4770      	bx	lr
 8000b2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b30:	d121      	bne.n	8000b76 <__aeabi_d2f+0x7a>
 8000b32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b36:	bfbc      	itt	lt
 8000b38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b3c:	4770      	bxlt	lr
 8000b3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b46:	f1c2 0218 	rsb	r2, r2, #24
 8000b4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b52:	fa20 f002 	lsr.w	r0, r0, r2
 8000b56:	bf18      	it	ne
 8000b58:	f040 0001 	orrne.w	r0, r0, #1
 8000b5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b68:	ea40 000c 	orr.w	r0, r0, ip
 8000b6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b74:	e7cc      	b.n	8000b10 <__aeabi_d2f+0x14>
 8000b76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7a:	d107      	bne.n	8000b8c <__aeabi_d2f+0x90>
 8000b7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b80:	bf1e      	ittt	ne
 8000b82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8a:	4770      	bxne	lr
 8000b8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	73fb      	strb	r3, [r7, #15]
 8000ba8:	2300      	movs	r3, #0
 8000baa:	73bb      	strb	r3, [r7, #14]
 8000bac:	230f      	movs	r3, #15
 8000bae:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	78db      	ldrb	r3, [r3, #3]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d039      	beq.n	8000c2c <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000bb8:	4b27      	ldr	r3, [pc, #156]	; (8000c58 <NVIC_Init+0xbc>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	0a1b      	lsrs	r3, r3, #8
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000bc8:	7bfb      	ldrb	r3, [r7, #15]
 8000bca:	f1c3 0304 	rsb	r3, r3, #4
 8000bce:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000bd0:	7b7a      	ldrb	r2, [r7, #13]
 8000bd2:	7bfb      	ldrb	r3, [r7, #15]
 8000bd4:	fa42 f303 	asr.w	r3, r2, r3
 8000bd8:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	785b      	ldrb	r3, [r3, #1]
 8000bde:	461a      	mov	r2, r3
 8000be0:	7bbb      	ldrb	r3, [r7, #14]
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	789a      	ldrb	r2, [r3, #2]
 8000bec:	7b7b      	ldrb	r3, [r7, #13]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	7bfb      	ldrb	r3, [r7, #15]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000bf8:	7bfb      	ldrb	r3, [r7, #15]
 8000bfa:	011b      	lsls	r3, r3, #4
 8000bfc:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000bfe:	4a17      	ldr	r2, [pc, #92]	; (8000c5c <NVIC_Init+0xc0>)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	4413      	add	r3, r2
 8000c06:	7bfa      	ldrb	r2, [r7, #15]
 8000c08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000c0c:	4a13      	ldr	r2, [pc, #76]	; (8000c5c <NVIC_Init+0xc0>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	095b      	lsrs	r3, r3, #5
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	f003 031f 	and.w	r3, r3, #31
 8000c20:	2101      	movs	r1, #1
 8000c22:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000c26:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000c2a:	e00f      	b.n	8000c4c <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000c2c:	490b      	ldr	r1, [pc, #44]	; (8000c5c <NVIC_Init+0xc0>)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	095b      	lsrs	r3, r3, #5
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	f003 031f 	and.w	r3, r3, #31
 8000c40:	2201      	movs	r2, #1
 8000c42:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000c44:	f100 0320 	add.w	r3, r0, #32
 8000c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c4c:	bf00      	nop
 8000c4e:	3714      	adds	r7, #20
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000ed00 	.word	0xe000ed00
 8000c5c:	e000e100 	.word	0xe000e100

08000c60 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f023 0201 	bic.w	r2, r3, #1
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2200      	movs	r2, #0
 8000c8a:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2221      	movs	r2, #33	; 0x21
 8000c96:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4a46      	ldr	r2, [pc, #280]	; (8000db4 <DMA_DeInit+0x154>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d103      	bne.n	8000ca8 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8000ca0:	4b45      	ldr	r3, [pc, #276]	; (8000db8 <DMA_DeInit+0x158>)
 8000ca2:	223d      	movs	r2, #61	; 0x3d
 8000ca4:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000ca6:	e07e      	b.n	8000da6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4a44      	ldr	r2, [pc, #272]	; (8000dbc <DMA_DeInit+0x15c>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d104      	bne.n	8000cba <DMA_DeInit+0x5a>
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8000cb0:	4b41      	ldr	r3, [pc, #260]	; (8000db8 <DMA_DeInit+0x158>)
 8000cb2:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8000cb6:	609a      	str	r2, [r3, #8]
}
 8000cb8:	e075      	b.n	8000da6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a40      	ldr	r2, [pc, #256]	; (8000dc0 <DMA_DeInit+0x160>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d104      	bne.n	8000ccc <DMA_DeInit+0x6c>
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8000cc2:	4b3d      	ldr	r3, [pc, #244]	; (8000db8 <DMA_DeInit+0x158>)
 8000cc4:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8000cc8:	609a      	str	r2, [r3, #8]
}
 8000cca:	e06c      	b.n	8000da6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a3d      	ldr	r2, [pc, #244]	; (8000dc4 <DMA_DeInit+0x164>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d104      	bne.n	8000cde <DMA_DeInit+0x7e>
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8000cd4:	4b38      	ldr	r3, [pc, #224]	; (8000db8 <DMA_DeInit+0x158>)
 8000cd6:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8000cda:	609a      	str	r2, [r3, #8]
}
 8000cdc:	e063      	b.n	8000da6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a39      	ldr	r2, [pc, #228]	; (8000dc8 <DMA_DeInit+0x168>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d103      	bne.n	8000cee <DMA_DeInit+0x8e>
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8000ce6:	4b34      	ldr	r3, [pc, #208]	; (8000db8 <DMA_DeInit+0x158>)
 8000ce8:	4a38      	ldr	r2, [pc, #224]	; (8000dcc <DMA_DeInit+0x16c>)
 8000cea:	60da      	str	r2, [r3, #12]
}
 8000cec:	e05b      	b.n	8000da6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a37      	ldr	r2, [pc, #220]	; (8000dd0 <DMA_DeInit+0x170>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d103      	bne.n	8000cfe <DMA_DeInit+0x9e>
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8000cf6:	4b30      	ldr	r3, [pc, #192]	; (8000db8 <DMA_DeInit+0x158>)
 8000cf8:	4a36      	ldr	r2, [pc, #216]	; (8000dd4 <DMA_DeInit+0x174>)
 8000cfa:	60da      	str	r2, [r3, #12]
}
 8000cfc:	e053      	b.n	8000da6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a35      	ldr	r2, [pc, #212]	; (8000dd8 <DMA_DeInit+0x178>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d103      	bne.n	8000d0e <DMA_DeInit+0xae>
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8000d06:	4b2c      	ldr	r3, [pc, #176]	; (8000db8 <DMA_DeInit+0x158>)
 8000d08:	4a34      	ldr	r2, [pc, #208]	; (8000ddc <DMA_DeInit+0x17c>)
 8000d0a:	60da      	str	r2, [r3, #12]
}
 8000d0c:	e04b      	b.n	8000da6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a33      	ldr	r2, [pc, #204]	; (8000de0 <DMA_DeInit+0x180>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d104      	bne.n	8000d20 <DMA_DeInit+0xc0>
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8000d16:	4b28      	ldr	r3, [pc, #160]	; (8000db8 <DMA_DeInit+0x158>)
 8000d18:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8000d1c:	60da      	str	r2, [r3, #12]
}
 8000d1e:	e042      	b.n	8000da6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a30      	ldr	r2, [pc, #192]	; (8000de4 <DMA_DeInit+0x184>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d103      	bne.n	8000d30 <DMA_DeInit+0xd0>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8000d28:	4b2f      	ldr	r3, [pc, #188]	; (8000de8 <DMA_DeInit+0x188>)
 8000d2a:	223d      	movs	r2, #61	; 0x3d
 8000d2c:	609a      	str	r2, [r3, #8]
}
 8000d2e:	e03a      	b.n	8000da6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a2e      	ldr	r2, [pc, #184]	; (8000dec <DMA_DeInit+0x18c>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d104      	bne.n	8000d42 <DMA_DeInit+0xe2>
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8000d38:	4b2b      	ldr	r3, [pc, #172]	; (8000de8 <DMA_DeInit+0x188>)
 8000d3a:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8000d3e:	609a      	str	r2, [r3, #8]
}
 8000d40:	e031      	b.n	8000da6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a2a      	ldr	r2, [pc, #168]	; (8000df0 <DMA_DeInit+0x190>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d104      	bne.n	8000d54 <DMA_DeInit+0xf4>
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8000d4a:	4b27      	ldr	r3, [pc, #156]	; (8000de8 <DMA_DeInit+0x188>)
 8000d4c:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8000d50:	609a      	str	r2, [r3, #8]
}
 8000d52:	e028      	b.n	8000da6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a27      	ldr	r2, [pc, #156]	; (8000df4 <DMA_DeInit+0x194>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d104      	bne.n	8000d66 <DMA_DeInit+0x106>
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8000d5c:	4b22      	ldr	r3, [pc, #136]	; (8000de8 <DMA_DeInit+0x188>)
 8000d5e:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8000d62:	609a      	str	r2, [r3, #8]
}
 8000d64:	e01f      	b.n	8000da6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a23      	ldr	r2, [pc, #140]	; (8000df8 <DMA_DeInit+0x198>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d103      	bne.n	8000d76 <DMA_DeInit+0x116>
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8000d6e:	4b1e      	ldr	r3, [pc, #120]	; (8000de8 <DMA_DeInit+0x188>)
 8000d70:	4a16      	ldr	r2, [pc, #88]	; (8000dcc <DMA_DeInit+0x16c>)
 8000d72:	60da      	str	r2, [r3, #12]
}
 8000d74:	e017      	b.n	8000da6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a20      	ldr	r2, [pc, #128]	; (8000dfc <DMA_DeInit+0x19c>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d103      	bne.n	8000d86 <DMA_DeInit+0x126>
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8000d7e:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <DMA_DeInit+0x188>)
 8000d80:	4a14      	ldr	r2, [pc, #80]	; (8000dd4 <DMA_DeInit+0x174>)
 8000d82:	60da      	str	r2, [r3, #12]
}
 8000d84:	e00f      	b.n	8000da6 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream6)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a1d      	ldr	r2, [pc, #116]	; (8000e00 <DMA_DeInit+0x1a0>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d103      	bne.n	8000d96 <DMA_DeInit+0x136>
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8000d8e:	4b16      	ldr	r3, [pc, #88]	; (8000de8 <DMA_DeInit+0x188>)
 8000d90:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <DMA_DeInit+0x17c>)
 8000d92:	60da      	str	r2, [r3, #12]
}
 8000d94:	e007      	b.n	8000da6 <DMA_DeInit+0x146>
    if (DMAy_Streamx == DMA2_Stream7)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a1a      	ldr	r2, [pc, #104]	; (8000e04 <DMA_DeInit+0x1a4>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d103      	bne.n	8000da6 <DMA_DeInit+0x146>
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8000d9e:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <DMA_DeInit+0x188>)
 8000da0:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8000da4:	60da      	str	r2, [r3, #12]
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	40026010 	.word	0x40026010
 8000db8:	40026000 	.word	0x40026000
 8000dbc:	40026028 	.word	0x40026028
 8000dc0:	40026040 	.word	0x40026040
 8000dc4:	40026058 	.word	0x40026058
 8000dc8:	40026070 	.word	0x40026070
 8000dcc:	2000003d 	.word	0x2000003d
 8000dd0:	40026088 	.word	0x40026088
 8000dd4:	20000f40 	.word	0x20000f40
 8000dd8:	400260a0 	.word	0x400260a0
 8000ddc:	203d0000 	.word	0x203d0000
 8000de0:	400260b8 	.word	0x400260b8
 8000de4:	40026410 	.word	0x40026410
 8000de8:	40026400 	.word	0x40026400
 8000dec:	40026428 	.word	0x40026428
 8000df0:	40026440 	.word	0x40026440
 8000df4:	40026458 	.word	0x40026458
 8000df8:	40026470 	.word	0x40026470
 8000dfc:	40026488 	.word	0x40026488
 8000e00:	400264a0 	.word	0x400264a0
 8000e04:	400264b8 	.word	0x400264b8

08000e08 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000e1c:	68fa      	ldr	r2, [r7, #12]
 8000e1e:	4b25      	ldr	r3, [pc, #148]	; (8000eb4 <DMA_Init+0xac>)
 8000e20:	4013      	ands	r3, r2
 8000e22:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000e32:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000e3e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	6a1b      	ldr	r3, [r3, #32]
 8000e44:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000e4a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e50:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000e56:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e5c:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f023 0307 	bic.w	r3, r3, #7
 8000e76:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e80:	4313      	orrs	r3, r2
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	691a      	ldr	r2, [r3, #16]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685a      	ldr	r2, [r3, #4]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	689a      	ldr	r2, [r3, #8]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	60da      	str	r2, [r3, #12]
}
 8000ea6:	bf00      	nop
 8000ea8:	3714      	adds	r7, #20
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	f01c803f 	.word	0xf01c803f

08000eb8 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ec4:	78fb      	ldrb	r3, [r7, #3]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d006      	beq.n	8000ed8 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f043 0201 	orr.w	r2, r3, #1
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000ed6:	e005      	b.n	8000ee4 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f023 0201 	bic.w	r2, r3, #1
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	601a      	str	r2, [r3, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	4613      	mov	r3, r2
 8000efc:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d00f      	beq.n	8000f28 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d006      	beq.n	8000f1c <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	615a      	str	r2, [r3, #20]
 8000f1a:	e005      	b.n	8000f28 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	695b      	ldr	r3, [r3, #20]
 8000f20:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	2b80      	cmp	r3, #128	; 0x80
 8000f2c:	d014      	beq.n	8000f58 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d008      	beq.n	8000f46 <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	f003 031e 	and.w	r3, r3, #30
 8000f3e:	431a      	orrs	r2, r3
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 8000f44:	e008      	b.n	8000f58 <DMA_ITConfig+0x68>
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	f003 031e 	and.w	r3, r3, #30
 8000f50:	43db      	mvns	r3, r3
 8000f52:	401a      	ands	r2, r3
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	601a      	str	r2, [r3, #0]
}
 8000f58:	bf00      	nop
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b087      	sub	sp, #28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	2300      	movs	r3, #0
 8000f78:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a22      	ldr	r2, [pc, #136]	; (8001008 <DMA_GetITStatus+0xa4>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d802      	bhi.n	8000f88 <DMA_GetITStatus+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000f82:	4b22      	ldr	r3, [pc, #136]	; (800100c <DMA_GetITStatus+0xa8>)
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	e001      	b.n	8000f8c <DMA_GetITStatus+0x28>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000f88:	4b21      	ldr	r3, [pc, #132]	; (8001010 <DMA_GetITStatus+0xac>)
 8000f8a:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000f92:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d00a      	beq.n	8000fb0 <DMA_GetITStatus+0x4c>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	0adb      	lsrs	r3, r3, #11
 8000f9e:	f003 031e 	and.w	r3, r3, #30
 8000fa2:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4013      	ands	r3, r2
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	e004      	b.n	8000fba <DMA_GetITStatus+0x56>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	695b      	ldr	r3, [r3, #20]
 8000fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fb8:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d003      	beq.n	8000fcc <DMA_GetITStatus+0x68>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	e002      	b.n	8000fd2 <DMA_GetITStatus+0x6e>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000fd8:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000fdc:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d005      	beq.n	8000ff4 <DMA_GetITStatus+0x90>
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d002      	beq.n	8000ff4 <DMA_GetITStatus+0x90>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	75fb      	strb	r3, [r7, #23]
 8000ff2:	e001      	b.n	8000ff8 <DMA_GetITStatus+0x94>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 8000ff8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	371c      	adds	r7, #28
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	4002640f 	.word	0x4002640f
 800100c:	40026000 	.word	0x40026000
 8001010:	40026400 	.word	0x40026400

08001014 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a10      	ldr	r2, [pc, #64]	; (8001064 <DMA_ClearITPendingBit+0x50>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d802      	bhi.n	800102c <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <DMA_ClearITPendingBit+0x54>)
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	e001      	b.n	8001030 <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800102c:	4b0f      	ldr	r3, [pc, #60]	; (800106c <DMA_ClearITPendingBit+0x58>)
 800102e:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d007      	beq.n	800104a <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001040:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }   
}
 8001048:	e006      	b.n	8001058 <DMA_ClearITPendingBit+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001050:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001054:	68fa      	ldr	r2, [r7, #12]
 8001056:	6093      	str	r3, [r2, #8]
}
 8001058:	bf00      	nop
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	4002640f 	.word	0x4002640f
 8001068:	40026000 	.word	0x40026000
 800106c:	40026400 	.word	0x40026400

08001070 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001070:	b480      	push	{r7}
 8001072:	b087      	sub	sp, #28
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
 800108a:	e076      	b.n	800117a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800108c:	2201      	movs	r2, #1
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	4013      	ands	r3, r2
 800109e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80010a0:	68fa      	ldr	r2, [r7, #12]
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d165      	bne.n	8001174 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	2103      	movs	r1, #3
 80010b2:	fa01 f303 	lsl.w	r3, r1, r3
 80010b6:	43db      	mvns	r3, r3
 80010b8:	401a      	ands	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	791b      	ldrb	r3, [r3, #4]
 80010c6:	4619      	mov	r1, r3
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	fa01 f303 	lsl.w	r3, r1, r3
 80010d0:	431a      	orrs	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	791b      	ldrb	r3, [r3, #4]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d003      	beq.n	80010e6 <GPIO_Init+0x76>
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	791b      	ldrb	r3, [r3, #4]
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d12e      	bne.n	8001144 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	689a      	ldr	r2, [r3, #8]
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	2103      	movs	r1, #3
 80010f0:	fa01 f303 	lsl.w	r3, r1, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	401a      	ands	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	689a      	ldr	r2, [r3, #8]
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	795b      	ldrb	r3, [r3, #5]
 8001104:	4619      	mov	r1, r3
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	fa01 f303 	lsl.w	r3, r1, r3
 800110e:	431a      	orrs	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685a      	ldr	r2, [r3, #4]
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	b29b      	uxth	r3, r3
 800111c:	4619      	mov	r1, r3
 800111e:	2301      	movs	r3, #1
 8001120:	408b      	lsls	r3, r1
 8001122:	43db      	mvns	r3, r3
 8001124:	401a      	ands	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	683a      	ldr	r2, [r7, #0]
 8001130:	7992      	ldrb	r2, [r2, #6]
 8001132:	4611      	mov	r1, r2
 8001134:	697a      	ldr	r2, [r7, #20]
 8001136:	b292      	uxth	r2, r2
 8001138:	fa01 f202 	lsl.w	r2, r1, r2
 800113c:	b292      	uxth	r2, r2
 800113e:	431a      	orrs	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	68da      	ldr	r2, [r3, #12]
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	b29b      	uxth	r3, r3
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	2103      	movs	r1, #3
 8001150:	fa01 f303 	lsl.w	r3, r1, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	401a      	ands	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	68da      	ldr	r2, [r3, #12]
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	79db      	ldrb	r3, [r3, #7]
 8001164:	4619      	mov	r1, r3
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	fa01 f303 	lsl.w	r3, r1, r3
 800116e:	431a      	orrs	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	3301      	adds	r3, #1
 8001178:	617b      	str	r3, [r7, #20]
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	2b0f      	cmp	r3, #15
 800117e:	d985      	bls.n	800108c <GPIO_Init+0x1c>
    }
  }
}
 8001180:	bf00      	nop
 8001182:	371c      	adds	r7, #28
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8001198:	2300      	movs	r3, #0
 800119a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	691a      	ldr	r2, [r3, #16]
 80011a0:	887b      	ldrh	r3, [r7, #2]
 80011a2:	4013      	ands	r3, r2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d002      	beq.n	80011ae <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80011a8:	2301      	movs	r3, #1
 80011aa:	73fb      	strb	r3, [r7, #15]
 80011ac:	e001      	b.n	80011b2 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80011ae:	2300      	movs	r3, #0
 80011b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	887a      	ldrh	r2, [r7, #2]
 80011d0:	831a      	strh	r2, [r3, #24]
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011de:	b480      	push	{r7}
 80011e0:	b083      	sub	sp, #12
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
 80011e6:	460b      	mov	r3, r1
 80011e8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	887a      	ldrh	r2, [r7, #2]
 80011ee:	835a      	strh	r2, [r3, #26]
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	807b      	strh	r3, [r7, #2]
 8001208:	4613      	mov	r3, r2
 800120a:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8001210:	2300      	movs	r3, #0
 8001212:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001214:	787a      	ldrb	r2, [r7, #1]
 8001216:	887b      	ldrh	r3, [r7, #2]
 8001218:	f003 0307 	and.w	r3, r3, #7
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001224:	887b      	ldrh	r3, [r7, #2]
 8001226:	08db      	lsrs	r3, r3, #3
 8001228:	b29b      	uxth	r3, r3
 800122a:	4618      	mov	r0, r3
 800122c:	887b      	ldrh	r3, [r7, #2]
 800122e:	08db      	lsrs	r3, r3, #3
 8001230:	b29b      	uxth	r3, r3
 8001232:	461a      	mov	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3208      	adds	r2, #8
 8001238:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800123c:	887b      	ldrh	r3, [r7, #2]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	210f      	movs	r1, #15
 8001246:	fa01 f303 	lsl.w	r3, r1, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	ea02 0103 	and.w	r1, r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f100 0208 	add.w	r2, r0, #8
 8001256:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800125a:	887b      	ldrh	r3, [r7, #2]
 800125c:	08db      	lsrs	r3, r3, #3
 800125e:	b29b      	uxth	r3, r3
 8001260:	461a      	mov	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	3208      	adds	r2, #8
 8001266:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	4313      	orrs	r3, r2
 800126e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001270:	887b      	ldrh	r3, [r7, #2]
 8001272:	08db      	lsrs	r3, r3, #3
 8001274:	b29b      	uxth	r3, r3
 8001276:	461a      	mov	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3208      	adds	r2, #8
 800127c:	68b9      	ldr	r1, [r7, #8]
 800127e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001282:	bf00      	nop
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001290:	b480      	push	{r7}
 8001292:	b089      	sub	sp, #36	; 0x24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001298:	2300      	movs	r3, #0
 800129a:	61bb      	str	r3, [r7, #24]
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	2300      	movs	r3, #0
 80012a2:	61fb      	str	r3, [r7, #28]
 80012a4:	2302      	movs	r3, #2
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	2302      	movs	r3, #2
 80012ae:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80012b0:	4b47      	ldr	r3, [pc, #284]	; (80013d0 <RCC_GetClocksFreq+0x140>)
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f003 030c 	and.w	r3, r3, #12
 80012b8:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	2b04      	cmp	r3, #4
 80012be:	d007      	beq.n	80012d0 <RCC_GetClocksFreq+0x40>
 80012c0:	2b08      	cmp	r3, #8
 80012c2:	d009      	beq.n	80012d8 <RCC_GetClocksFreq+0x48>
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d13d      	bne.n	8001344 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a42      	ldr	r2, [pc, #264]	; (80013d4 <RCC_GetClocksFreq+0x144>)
 80012cc:	601a      	str	r2, [r3, #0]
      break;
 80012ce:	e03d      	b.n	800134c <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a41      	ldr	r2, [pc, #260]	; (80013d8 <RCC_GetClocksFreq+0x148>)
 80012d4:	601a      	str	r2, [r3, #0]
      break;
 80012d6:	e039      	b.n	800134c <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80012d8:	4b3d      	ldr	r3, [pc, #244]	; (80013d0 <RCC_GetClocksFreq+0x140>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	0d9b      	lsrs	r3, r3, #22
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012e4:	4b3a      	ldr	r3, [pc, #232]	; (80013d0 <RCC_GetClocksFreq+0x140>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012ec:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d00c      	beq.n	800130e <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80012f4:	4a38      	ldr	r2, [pc, #224]	; (80013d8 <RCC_GetClocksFreq+0x148>)
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fc:	4a34      	ldr	r2, [pc, #208]	; (80013d0 <RCC_GetClocksFreq+0x140>)
 80012fe:	6852      	ldr	r2, [r2, #4]
 8001300:	0992      	lsrs	r2, r2, #6
 8001302:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001306:	fb02 f303 	mul.w	r3, r2, r3
 800130a:	61fb      	str	r3, [r7, #28]
 800130c:	e00b      	b.n	8001326 <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800130e:	4a31      	ldr	r2, [pc, #196]	; (80013d4 <RCC_GetClocksFreq+0x144>)
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	fbb2 f3f3 	udiv	r3, r2, r3
 8001316:	4a2e      	ldr	r2, [pc, #184]	; (80013d0 <RCC_GetClocksFreq+0x140>)
 8001318:	6852      	ldr	r2, [r2, #4]
 800131a:	0992      	lsrs	r2, r2, #6
 800131c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001320:	fb02 f303 	mul.w	r3, r2, r3
 8001324:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001326:	4b2a      	ldr	r3, [pc, #168]	; (80013d0 <RCC_GetClocksFreq+0x140>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	0c1b      	lsrs	r3, r3, #16
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	3301      	adds	r3, #1
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001336:	69fa      	ldr	r2, [r7, #28]
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	fbb2 f2f3 	udiv	r2, r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	601a      	str	r2, [r3, #0]
      break;
 8001342:	e003      	b.n	800134c <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a23      	ldr	r2, [pc, #140]	; (80013d4 <RCC_GetClocksFreq+0x144>)
 8001348:	601a      	str	r2, [r3, #0]
      break;
 800134a:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800134c:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <RCC_GetClocksFreq+0x140>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001354:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	091b      	lsrs	r3, r3, #4
 800135a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800135c:	4a1f      	ldr	r2, [pc, #124]	; (80013dc <RCC_GetClocksFreq+0x14c>)
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	4413      	add	r3, r2
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	b2db      	uxtb	r3, r3
 8001366:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	40da      	lsrs	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001374:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <RCC_GetClocksFreq+0x140>)
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800137c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	0a9b      	lsrs	r3, r3, #10
 8001382:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001384:	4a15      	ldr	r2, [pc, #84]	; (80013dc <RCC_GetClocksFreq+0x14c>)
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	4413      	add	r3, r2
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	b2db      	uxtb	r3, r3
 800138e:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	40da      	lsrs	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800139c:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <RCC_GetClocksFreq+0x140>)
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80013a4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	0b5b      	lsrs	r3, r3, #13
 80013aa:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80013ac:	4a0b      	ldr	r2, [pc, #44]	; (80013dc <RCC_GetClocksFreq+0x14c>)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	4413      	add	r3, r2
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	40da      	lsrs	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	60da      	str	r2, [r3, #12]
}
 80013c4:	bf00      	nop
 80013c6:	3724      	adds	r7, #36	; 0x24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	40023800 	.word	0x40023800
 80013d4:	00f42400 	.word	0x00f42400
 80013d8:	007a1200 	.word	0x007a1200
 80013dc:	20000000 	.word	0x20000000

080013e0 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80013ec:	78fb      	ldrb	r3, [r7, #3]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d006      	beq.n	8001400 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80013f2:	490a      	ldr	r1, [pc, #40]	; (800141c <RCC_AHB1PeriphClockCmd+0x3c>)
 80013f4:	4b09      	ldr	r3, [pc, #36]	; (800141c <RCC_AHB1PeriphClockCmd+0x3c>)
 80013f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80013fe:	e006      	b.n	800140e <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001400:	4906      	ldr	r1, [pc, #24]	; (800141c <RCC_AHB1PeriphClockCmd+0x3c>)
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <RCC_AHB1PeriphClockCmd+0x3c>)
 8001404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	43db      	mvns	r3, r3
 800140a:	4013      	ands	r3, r2
 800140c:	630b      	str	r3, [r1, #48]	; 0x30
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800

08001420 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800142c:	78fb      	ldrb	r3, [r7, #3]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d006      	beq.n	8001440 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001432:	490a      	ldr	r1, [pc, #40]	; (800145c <RCC_APB1PeriphClockCmd+0x3c>)
 8001434:	4b09      	ldr	r3, [pc, #36]	; (800145c <RCC_APB1PeriphClockCmd+0x3c>)
 8001436:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4313      	orrs	r3, r2
 800143c:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800143e:	e006      	b.n	800144e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001440:	4906      	ldr	r1, [pc, #24]	; (800145c <RCC_APB1PeriphClockCmd+0x3c>)
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <RCC_APB1PeriphClockCmd+0x3c>)
 8001444:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	43db      	mvns	r3, r3
 800144a:	4013      	ands	r3, r2
 800144c:	640b      	str	r3, [r1, #64]	; 0x40
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800

08001460 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800146c:	78fb      	ldrb	r3, [r7, #3]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d006      	beq.n	8001480 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001472:	490a      	ldr	r1, [pc, #40]	; (800149c <RCC_APB2PeriphClockCmd+0x3c>)
 8001474:	4b09      	ldr	r3, [pc, #36]	; (800149c <RCC_APB2PeriphClockCmd+0x3c>)
 8001476:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4313      	orrs	r3, r2
 800147c:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800147e:	e006      	b.n	800148e <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001480:	4906      	ldr	r1, [pc, #24]	; (800149c <RCC_APB2PeriphClockCmd+0x3c>)
 8001482:	4b06      	ldr	r3, [pc, #24]	; (800149c <RCC_APB2PeriphClockCmd+0x3c>)
 8001484:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	43db      	mvns	r3, r3
 800148a:	4013      	ands	r3, r2
 800148c:	644b      	str	r3, [r1, #68]	; 0x44
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40023800 	.word	0x40023800

080014a0 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4a29      	ldr	r2, [pc, #164]	; (800155c <TIM_TimeBaseInit+0xbc>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d013      	beq.n	80014e4 <TIM_TimeBaseInit+0x44>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4a28      	ldr	r2, [pc, #160]	; (8001560 <TIM_TimeBaseInit+0xc0>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d00f      	beq.n	80014e4 <TIM_TimeBaseInit+0x44>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014ca:	d00b      	beq.n	80014e4 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4a25      	ldr	r2, [pc, #148]	; (8001564 <TIM_TimeBaseInit+0xc4>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d007      	beq.n	80014e4 <TIM_TimeBaseInit+0x44>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a24      	ldr	r2, [pc, #144]	; (8001568 <TIM_TimeBaseInit+0xc8>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d003      	beq.n	80014e4 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a23      	ldr	r2, [pc, #140]	; (800156c <TIM_TimeBaseInit+0xcc>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d108      	bne.n	80014f6 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80014e4:	89fb      	ldrh	r3, [r7, #14]
 80014e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014ea:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	885a      	ldrh	r2, [r3, #2]
 80014f0:	89fb      	ldrh	r3, [r7, #14]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a1d      	ldr	r2, [pc, #116]	; (8001570 <TIM_TimeBaseInit+0xd0>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d00c      	beq.n	8001518 <TIM_TimeBaseInit+0x78>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a1c      	ldr	r2, [pc, #112]	; (8001574 <TIM_TimeBaseInit+0xd4>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d008      	beq.n	8001518 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8001506:	89fb      	ldrh	r3, [r7, #14]
 8001508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800150c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	891a      	ldrh	r2, [r3, #8]
 8001512:	89fb      	ldrh	r3, [r7, #14]
 8001514:	4313      	orrs	r3, r2
 8001516:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	89fa      	ldrh	r2, [r7, #14]
 800151c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	881a      	ldrh	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a0a      	ldr	r2, [pc, #40]	; (800155c <TIM_TimeBaseInit+0xbc>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d003      	beq.n	800153e <TIM_TimeBaseInit+0x9e>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a09      	ldr	r2, [pc, #36]	; (8001560 <TIM_TimeBaseInit+0xc0>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d104      	bne.n	8001548 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	7a9b      	ldrb	r3, [r3, #10]
 8001542:	b29a      	uxth	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2201      	movs	r2, #1
 800154c:	829a      	strh	r2, [r3, #20]
}
 800154e:	bf00      	nop
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	40010000 	.word	0x40010000
 8001560:	40010400 	.word	0x40010400
 8001564:	40000400 	.word	0x40000400
 8001568:	40000800 	.word	0x40000800
 800156c:	40000c00 	.word	0x40000c00
 8001570:	40001000 	.word	0x40001000
 8001574:	40001400 	.word	0x40001400

08001578 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001584:	78fb      	ldrb	r3, [r7, #3]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d008      	beq.n	800159c <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	881b      	ldrh	r3, [r3, #0]
 800158e:	b29b      	uxth	r3, r3
 8001590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001594:	b29a      	uxth	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
  }
}
 800159a:	e007      	b.n	80015ac <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	801a      	strh	r2, [r3, #0]
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80015c4:	78fb      	ldrb	r3, [r7, #3]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d008      	beq.n	80015dc <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	881b      	ldrh	r3, [r3, #0]
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 80015da:	e007      	b.n	80015ec <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	f023 0301 	bic.w	r3, r3, #1
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	801a      	strh	r2, [r3, #0]
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	817b      	strh	r3, [r7, #10]
 8001606:	2300      	movs	r3, #0
 8001608:	81fb      	strh	r3, [r7, #14]
 800160a:	2300      	movs	r3, #0
 800160c:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	8c1b      	ldrh	r3, [r3, #32]
 8001612:	b29b      	uxth	r3, r3
 8001614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001618:	b29a      	uxth	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	8c1b      	ldrh	r3, [r3, #32]
 8001622:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	889b      	ldrh	r3, [r3, #4]
 8001628:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	8b9b      	ldrh	r3, [r3, #28]
 800162e:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 8001630:	897b      	ldrh	r3, [r7, #10]
 8001632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001636:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8001638:	897b      	ldrh	r3, [r7, #10]
 800163a:	f023 0303 	bic.w	r3, r3, #3
 800163e:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	881a      	ldrh	r2, [r3, #0]
 8001644:	897b      	ldrh	r3, [r7, #10]
 8001646:	4313      	orrs	r3, r2
 8001648:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 800164a:	89fb      	ldrh	r3, [r7, #14]
 800164c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001650:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	899b      	ldrh	r3, [r3, #12]
 8001656:	021b      	lsls	r3, r3, #8
 8001658:	b29a      	uxth	r2, r3
 800165a:	89fb      	ldrh	r3, [r7, #14]
 800165c:	4313      	orrs	r3, r2
 800165e:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	885b      	ldrh	r3, [r3, #2]
 8001664:	021b      	lsls	r3, r3, #8
 8001666:	b29a      	uxth	r2, r3
 8001668:	89fb      	ldrh	r3, [r7, #14]
 800166a:	4313      	orrs	r3, r2
 800166c:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a22      	ldr	r2, [pc, #136]	; (80016fc <TIM_OC3Init+0x104>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d003      	beq.n	800167e <TIM_OC3Init+0x86>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a21      	ldr	r2, [pc, #132]	; (8001700 <TIM_OC3Init+0x108>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d12b      	bne.n	80016d6 <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 800167e:	89fb      	ldrh	r3, [r7, #14]
 8001680:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001684:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	89db      	ldrh	r3, [r3, #14]
 800168a:	021b      	lsls	r3, r3, #8
 800168c:	b29a      	uxth	r2, r3
 800168e:	89fb      	ldrh	r3, [r7, #14]
 8001690:	4313      	orrs	r3, r2
 8001692:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8001694:	89fb      	ldrh	r3, [r7, #14]
 8001696:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800169a:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	889b      	ldrh	r3, [r3, #4]
 80016a0:	021b      	lsls	r3, r3, #8
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	89fb      	ldrh	r3, [r7, #14]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 80016aa:	89bb      	ldrh	r3, [r7, #12]
 80016ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016b0:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 80016b2:	89bb      	ldrh	r3, [r7, #12]
 80016b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80016b8:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	8a1b      	ldrh	r3, [r3, #16]
 80016be:	011b      	lsls	r3, r3, #4
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	89bb      	ldrh	r3, [r7, #12]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	8a5b      	ldrh	r3, [r3, #18]
 80016cc:	011b      	lsls	r3, r3, #4
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	89bb      	ldrh	r3, [r7, #12]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	89ba      	ldrh	r2, [r7, #12]
 80016da:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	897a      	ldrh	r2, [r7, #10]
 80016e0:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	89fa      	ldrh	r2, [r7, #14]
 80016ee:	841a      	strh	r2, [r3, #32]
}
 80016f0:	bf00      	nop
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	40010000 	.word	0x40010000
 8001700:	40010400 	.word	0x40010400

08001704 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	81bb      	strh	r3, [r7, #12]
 8001712:	2300      	movs	r3, #0
 8001714:	817b      	strh	r3, [r7, #10]
 8001716:	2300      	movs	r3, #0
 8001718:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	8c1b      	ldrh	r3, [r3, #32]
 800171e:	b29b      	uxth	r3, r3
 8001720:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001724:	b29a      	uxth	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	8c1b      	ldrh	r3, [r3, #32]
 800172e:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	889b      	ldrh	r3, [r3, #4]
 8001734:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	8b9b      	ldrh	r3, [r3, #28]
 800173a:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 800173c:	89bb      	ldrh	r3, [r7, #12]
 800173e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001742:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8001744:	89bb      	ldrh	r3, [r7, #12]
 8001746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800174a:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	881b      	ldrh	r3, [r3, #0]
 8001750:	021b      	lsls	r3, r3, #8
 8001752:	b29a      	uxth	r2, r3
 8001754:	89bb      	ldrh	r3, [r7, #12]
 8001756:	4313      	orrs	r3, r2
 8001758:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800175a:	897b      	ldrh	r3, [r7, #10]
 800175c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001760:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	899b      	ldrh	r3, [r3, #12]
 8001766:	031b      	lsls	r3, r3, #12
 8001768:	b29a      	uxth	r2, r3
 800176a:	897b      	ldrh	r3, [r7, #10]
 800176c:	4313      	orrs	r3, r2
 800176e:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	885b      	ldrh	r3, [r3, #2]
 8001774:	031b      	lsls	r3, r3, #12
 8001776:	b29a      	uxth	r2, r3
 8001778:	897b      	ldrh	r3, [r7, #10]
 800177a:	4313      	orrs	r3, r2
 800177c:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a12      	ldr	r2, [pc, #72]	; (80017cc <TIM_OC4Init+0xc8>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d003      	beq.n	800178e <TIM_OC4Init+0x8a>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a11      	ldr	r2, [pc, #68]	; (80017d0 <TIM_OC4Init+0xcc>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d10a      	bne.n	80017a4 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 800178e:	89fb      	ldrh	r3, [r7, #14]
 8001790:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001794:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	8a1b      	ldrh	r3, [r3, #16]
 800179a:	019b      	lsls	r3, r3, #6
 800179c:	b29a      	uxth	r2, r3
 800179e:	89fb      	ldrh	r3, [r7, #14]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	89fa      	ldrh	r2, [r7, #14]
 80017a8:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	89ba      	ldrh	r2, [r7, #12]
 80017ae:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	897a      	ldrh	r2, [r7, #10]
 80017bc:	841a      	strh	r2, [r3, #32]
}
 80017be:	bf00      	nop
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	40010000 	.word	0x40010000
 80017d0:	40010400 	.word	0x40010400

080017d4 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	460b      	mov	r3, r1
 80017de:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	8b9b      	ldrh	r3, [r3, #28]
 80017e8:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 80017ea:	89fb      	ldrh	r3, [r7, #14]
 80017ec:	f023 0308 	bic.w	r3, r3, #8
 80017f0:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 80017f2:	89fa      	ldrh	r2, [r7, #14]
 80017f4:	887b      	ldrh	r3, [r7, #2]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	89fa      	ldrh	r2, [r7, #14]
 80017fe:	839a      	strh	r2, [r3, #28]
}
 8001800:	bf00      	nop
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	8b9b      	ldrh	r3, [r3, #28]
 8001820:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8001822:	89fb      	ldrh	r3, [r7, #14]
 8001824:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001828:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 800182a:	887b      	ldrh	r3, [r7, #2]
 800182c:	021b      	lsls	r3, r3, #8
 800182e:	b29a      	uxth	r2, r3
 8001830:	89fb      	ldrh	r3, [r7, #14]
 8001832:	4313      	orrs	r3, r2
 8001834:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	89fa      	ldrh	r2, [r7, #14]
 800183a:	839a      	strh	r2, [r3, #28]
}
 800183c:	bf00      	nop
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	807b      	strh	r3, [r7, #2]
 8001854:	4613      	mov	r3, r2
 8001856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001858:	787b      	ldrb	r3, [r7, #1]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d008      	beq.n	8001870 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	899b      	ldrh	r3, [r3, #12]
 8001862:	b29a      	uxth	r2, r3
 8001864:	887b      	ldrh	r3, [r7, #2]
 8001866:	4313      	orrs	r3, r2
 8001868:	b29a      	uxth	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 800186e:	e009      	b.n	8001884 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	899b      	ldrh	r3, [r3, #12]
 8001874:	b29a      	uxth	r2, r3
 8001876:	887b      	ldrh	r3, [r7, #2]
 8001878:	43db      	mvns	r3, r3
 800187a:	b29b      	uxth	r3, r3
 800187c:	4013      	ands	r3, r2
 800187e:	b29a      	uxth	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	819a      	strh	r2, [r3, #12]
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	460b      	mov	r3, r1
 800189a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800189c:	887b      	ldrh	r3, [r7, #2]
 800189e:	43db      	mvns	r3, r3
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	821a      	strh	r2, [r3, #16]
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	460b      	mov	r3, r1
 80018bc:	807b      	strh	r3, [r7, #2]
 80018be:	4613      	mov	r3, r2
 80018c0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80018c2:	787b      	ldrb	r3, [r7, #1]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d008      	beq.n	80018da <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	899b      	ldrh	r3, [r3, #12]
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	887b      	ldrh	r3, [r7, #2]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
  }
}
 80018d8:	e009      	b.n	80018ee <TIM_DMACmd+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	899b      	ldrh	r3, [r3, #12]
 80018de:	b29a      	uxth	r2, r3
 80018e0:	887b      	ldrh	r3, [r7, #2]
 80018e2:	43db      	mvns	r3, r3
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	4013      	ands	r3, r2
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	819a      	strh	r2, [r3, #12]
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
	...

080018fc <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08a      	sub	sp, #40	; 0x28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8001906:	2300      	movs	r3, #0
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
 800190a:	2300      	movs	r3, #0
 800190c:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8001912:	2300      	movs	r3, #0
 8001914:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	8a1b      	ldrh	r3, [r3, #16]
 800191a:	b29b      	uxth	r3, r3
 800191c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001924:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	88db      	ldrh	r3, [r3, #6]
 800192a:	461a      	mov	r2, r3
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	4313      	orrs	r3, r2
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	b29a      	uxth	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	899b      	ldrh	r3, [r3, #12]
 800193e:	b29b      	uxth	r3, r3
 8001940:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001948:	f023 030c 	bic.w	r3, r3, #12
 800194c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	889a      	ldrh	r2, [r3, #4]
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	891b      	ldrh	r3, [r3, #8]
 8001956:	4313      	orrs	r3, r2
 8001958:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800195e:	4313      	orrs	r3, r2
 8001960:	b29b      	uxth	r3, r3
 8001962:	461a      	mov	r2, r3
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001966:	4313      	orrs	r3, r2
 8001968:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	b29a      	uxth	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	8a9b      	ldrh	r3, [r3, #20]
 8001976:	b29b      	uxth	r3, r3
 8001978:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001980:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	899b      	ldrh	r3, [r3, #12]
 8001986:	461a      	mov	r2, r3
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	4313      	orrs	r3, r2
 800198c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	b29a      	uxth	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001996:	f107 0308 	add.w	r3, r7, #8
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fc78 	bl	8001290 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a30      	ldr	r2, [pc, #192]	; (8001a64 <USART_Init+0x168>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d003      	beq.n	80019b0 <USART_Init+0xb4>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a2f      	ldr	r2, [pc, #188]	; (8001a68 <USART_Init+0x16c>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d102      	bne.n	80019b6 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	623b      	str	r3, [r7, #32]
 80019b4:	e001      	b.n	80019ba <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	899b      	ldrh	r3, [r3, #12]
 80019be:	b29b      	uxth	r3, r3
 80019c0:	b21b      	sxth	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	da0c      	bge.n	80019e0 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80019c6:	6a3a      	ldr	r2, [r7, #32]
 80019c8:	4613      	mov	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	009a      	lsls	r2, r3, #2
 80019d0:	441a      	add	r2, r3
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019dc:	61fb      	str	r3, [r7, #28]
 80019de:	e00b      	b.n	80019f8 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80019e0:	6a3a      	ldr	r2, [r7, #32]
 80019e2:	4613      	mov	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	009a      	lsls	r2, r3, #2
 80019ea:	441a      	add	r2, r3
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f6:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	4a1c      	ldr	r2, [pc, #112]	; (8001a6c <USART_Init+0x170>)
 80019fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001a00:	095b      	lsrs	r3, r3, #5
 8001a02:	011b      	lsls	r3, r3, #4
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	091b      	lsrs	r3, r3, #4
 8001a0a:	2264      	movs	r2, #100	; 0x64
 8001a0c:	fb02 f303 	mul.w	r3, r2, r3
 8001a10:	69fa      	ldr	r2, [r7, #28]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	899b      	ldrh	r3, [r3, #12]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	b21b      	sxth	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	da0c      	bge.n	8001a3c <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	3332      	adds	r3, #50	; 0x32
 8001a28:	4a10      	ldr	r2, [pc, #64]	; (8001a6c <USART_Init+0x170>)
 8001a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2e:	095b      	lsrs	r3, r3, #5
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a36:	4313      	orrs	r3, r2
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24
 8001a3a:	e00b      	b.n	8001a54 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	011b      	lsls	r3, r3, #4
 8001a40:	3332      	adds	r3, #50	; 0x32
 8001a42:	4a0a      	ldr	r2, [pc, #40]	; (8001a6c <USART_Init+0x170>)
 8001a44:	fba2 2303 	umull	r2, r3, r2, r3
 8001a48:	095b      	lsrs	r3, r3, #5
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a50:	4313      	orrs	r3, r2
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	811a      	strh	r2, [r3, #8]
}
 8001a5c:	bf00      	nop
 8001a5e:	3728      	adds	r7, #40	; 0x28
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40011000 	.word	0x40011000
 8001a68:	40011400 	.word	0x40011400
 8001a6c:	51eb851f 	.word	0x51eb851f

08001a70 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001a7c:	78fb      	ldrb	r3, [r7, #3]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d008      	beq.n	8001a94 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	899b      	ldrh	r3, [r3, #12]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8001a92:	e007      	b.n	8001aa4 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	899b      	ldrh	r3, [r3, #12]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	819a      	strh	r2, [r3, #12]
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001abc:	887b      	ldrh	r3, [r7, #2]
 8001abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	809a      	strh	r2, [r3, #4]
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b087      	sub	sp, #28
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	460b      	mov	r3, r1
 8001ade:	807b      	strh	r3, [r7, #2]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	2300      	movs	r3, #0
 8001aee:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001af8:	887b      	ldrh	r3, [r7, #2]
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	095b      	lsrs	r3, r3, #5
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8001b02:	887b      	ldrh	r3, [r7, #2]
 8001b04:	f003 031f 	and.w	r3, r3, #31
 8001b08:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d103      	bne.n	8001b22 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	330c      	adds	r3, #12
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	e009      	b.n	8001b36 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d103      	bne.n	8001b30 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	3310      	adds	r3, #16
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	e002      	b.n	8001b36 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	3314      	adds	r3, #20
 8001b34:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8001b36:	787b      	ldrb	r3, [r7, #1]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d006      	beq.n	8001b4a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	6811      	ldr	r1, [r2, #0]
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	430a      	orrs	r2, r1
 8001b46:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001b48:	e006      	b.n	8001b58 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	697a      	ldr	r2, [r7, #20]
 8001b4e:	6811      	ldr	r1, [r2, #0]
 8001b50:	68ba      	ldr	r2, [r7, #8]
 8001b52:	43d2      	mvns	r2, r2
 8001b54:	400a      	ands	r2, r1
 8001b56:	601a      	str	r2, [r3, #0]
}
 8001b58:	bf00      	nop
 8001b5a:	371c      	adds	r7, #28
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001b70:	2300      	movs	r3, #0
 8001b72:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	887b      	ldrh	r3, [r7, #2]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d002      	beq.n	8001b8a <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8001b84:	2301      	movs	r3, #1
 8001b86:	73fb      	strb	r3, [r7, #15]
 8001b88:	e001      	b.n	8001b8e <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b087      	sub	sp, #28
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001bb8:	887b      	ldrh	r3, [r7, #2]
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	095b      	lsrs	r3, r3, #5
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001bc2:	887b      	ldrh	r3, [r7, #2]
 8001bc4:	f003 031f 	and.w	r3, r3, #31
 8001bc8:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8001bca:	2201      	movs	r2, #1
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d107      	bne.n	8001bea <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	899b      	ldrh	r3, [r3, #12]
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	461a      	mov	r2, r3
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	4013      	ands	r3, r2
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	e011      	b.n	8001c0e <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d107      	bne.n	8001c00 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	8a1b      	ldrh	r3, [r3, #16]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	e006      	b.n	8001c0e <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	8a9b      	ldrh	r3, [r3, #20]
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	461a      	mov	r2, r3
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8001c0e:	887b      	ldrh	r3, [r7, #2]
 8001c10:	0a1b      	lsrs	r3, r3, #8
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8001c16:	2201      	movs	r2, #1
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	881b      	ldrh	r3, [r3, #0]
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	461a      	mov	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d005      	beq.n	8001c40 <USART_GetITStatus+0xa4>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d002      	beq.n	8001c40 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	74fb      	strb	r3, [r7, #19]
 8001c3e:	e001      	b.n	8001c44 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8001c40:	2300      	movs	r3, #0
 8001c42:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001c44:	7cfb      	ldrb	r3, [r7, #19]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	371c      	adds	r7, #28
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b085      	sub	sp, #20
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	81fb      	strh	r3, [r7, #14]
 8001c62:	2300      	movs	r3, #0
 8001c64:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8001c66:	887b      	ldrh	r3, [r7, #2]
 8001c68:	0a1b      	lsrs	r3, r3, #8
 8001c6a:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8001c6c:	89fb      	ldrh	r3, [r7, #14]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8001c76:	89bb      	ldrh	r3, [r7, #12]
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	801a      	strh	r2, [r3, #0]
}
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <change_col>:
#include "font8x8_greek.h"
#include "arial8x8_black.h"
#include "arial8x8_italic.h"
#include "arial8x8_regular.h"

uint8_t change_col(char color[16]){
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
	uint8_t col;
	if 		(strcmp(color, "wit") == 0) 			col = VGA_COL_WHITE;
 8001c94:	4958      	ldr	r1, [pc, #352]	; (8001df8 <change_col+0x16c>)
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7fe fa96 	bl	80001c8 <strcmp>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d102      	bne.n	8001ca8 <change_col+0x1c>
 8001ca2:	23ff      	movs	r3, #255	; 0xff
 8001ca4:	73fb      	strb	r3, [r7, #15]
 8001ca6:	e0a1      	b.n	8001dec <change_col+0x160>
	else if (strcmp(color, "grijs") == 0)			col = VGA_COL_GRAY;
 8001ca8:	4954      	ldr	r1, [pc, #336]	; (8001dfc <change_col+0x170>)
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7fe fa8c 	bl	80001c8 <strcmp>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d102      	bne.n	8001cbc <change_col+0x30>
 8001cb6:	23bf      	movs	r3, #191	; 0xbf
 8001cb8:	73fb      	strb	r3, [r7, #15]
 8001cba:	e097      	b.n	8001dec <change_col+0x160>
	else if (strcmp(color, "zwart") == 0)			col = VGA_COL_BLACK;
 8001cbc:	4950      	ldr	r1, [pc, #320]	; (8001e00 <change_col+0x174>)
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7fe fa82 	bl	80001c8 <strcmp>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d102      	bne.n	8001cd0 <change_col+0x44>
 8001cca:	2300      	movs	r3, #0
 8001ccc:	73fb      	strb	r3, [r7, #15]
 8001cce:	e08d      	b.n	8001dec <change_col+0x160>
	else if (strcmp(color, "bruin") == 0)			col = VGA_COL_BROWN;
 8001cd0:	494c      	ldr	r1, [pc, #304]	; (8001e04 <change_col+0x178>)
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7fe fa78 	bl	80001c8 <strcmp>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d102      	bne.n	8001ce4 <change_col+0x58>
 8001cde:	23ad      	movs	r3, #173	; 0xad
 8001ce0:	73fb      	strb	r3, [r7, #15]
 8001ce2:	e083      	b.n	8001dec <change_col+0x160>
	else if (strcmp(color, "blauw") == 0) 			col = VGA_COL_BLUE;
 8001ce4:	4948      	ldr	r1, [pc, #288]	; (8001e08 <change_col+0x17c>)
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7fe fa6e 	bl	80001c8 <strcmp>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d102      	bne.n	8001cf8 <change_col+0x6c>
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	73fb      	strb	r3, [r7, #15]
 8001cf6:	e079      	b.n	8001dec <change_col+0x160>
	else if (strcmp(color, "lichtblauw") == 0)		col = VGA_COL_LIGHT_BLUE;
 8001cf8:	4944      	ldr	r1, [pc, #272]	; (8001e0c <change_col+0x180>)
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7fe fa64 	bl	80001c8 <strcmp>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d102      	bne.n	8001d0c <change_col+0x80>
 8001d06:	236f      	movs	r3, #111	; 0x6f
 8001d08:	73fb      	strb	r3, [r7, #15]
 8001d0a:	e06f      	b.n	8001dec <change_col+0x160>
	else if (strcmp(color, "groen") == 0)			col = VGA_COL_GREEN;
 8001d0c:	4940      	ldr	r1, [pc, #256]	; (8001e10 <change_col+0x184>)
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f7fe fa5a 	bl	80001c8 <strcmp>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d102      	bne.n	8001d20 <change_col+0x94>
 8001d1a:	231c      	movs	r3, #28
 8001d1c:	73fb      	strb	r3, [r7, #15]
 8001d1e:	e065      	b.n	8001dec <change_col+0x160>
	else if (strcmp(color, "lichtgroen") == 0)		col = VGA_COL_LIGHT_GREEN;
 8001d20:	493c      	ldr	r1, [pc, #240]	; (8001e14 <change_col+0x188>)
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7fe fa50 	bl	80001c8 <strcmp>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d102      	bne.n	8001d34 <change_col+0xa8>
 8001d2e:	239e      	movs	r3, #158	; 0x9e
 8001d30:	73fb      	strb	r3, [r7, #15]
 8001d32:	e05b      	b.n	8001dec <change_col+0x160>
	else if (strcmp(color, "rood") == 0)			col = VGA_COL_RED;
 8001d34:	4938      	ldr	r1, [pc, #224]	; (8001e18 <change_col+0x18c>)
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7fe fa46 	bl	80001c8 <strcmp>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d102      	bne.n	8001d48 <change_col+0xbc>
 8001d42:	23e0      	movs	r3, #224	; 0xe0
 8001d44:	73fb      	strb	r3, [r7, #15]
 8001d46:	e051      	b.n	8001dec <change_col+0x160>
	else if (strcmp(color, "lichtrood") == 0)		col = VGA_COL_LIGHT_RED;
 8001d48:	4934      	ldr	r1, [pc, #208]	; (8001e1c <change_col+0x190>)
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7fe fa3c 	bl	80001c8 <strcmp>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d102      	bne.n	8001d5c <change_col+0xd0>
 8001d56:	23e9      	movs	r3, #233	; 0xe9
 8001d58:	73fb      	strb	r3, [r7, #15]
 8001d5a:	e047      	b.n	8001dec <change_col+0x160>
	else if (strcmp(color, "cyaan") == 0)			col = VGA_COL_CYAN;
 8001d5c:	4930      	ldr	r1, [pc, #192]	; (8001e20 <change_col+0x194>)
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7fe fa32 	bl	80001c8 <strcmp>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d102      	bne.n	8001d70 <change_col+0xe4>
 8001d6a:	231f      	movs	r3, #31
 8001d6c:	73fb      	strb	r3, [r7, #15]
 8001d6e:	e03d      	b.n	8001dec <change_col+0x160>
	else if (strcmp(color, "lichtcyan") == 0)		col = VGA_COL_LIGHT_CYAN;
 8001d70:	492c      	ldr	r1, [pc, #176]	; (8001e24 <change_col+0x198>)
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7fe fa28 	bl	80001c8 <strcmp>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d102      	bne.n	8001d84 <change_col+0xf8>
 8001d7e:	23bf      	movs	r3, #191	; 0xbf
 8001d80:	73fb      	strb	r3, [r7, #15]
 8001d82:	e033      	b.n	8001dec <change_col+0x160>
	else if (strcmp(color, "magenta") == 0)			col = VGA_COL_MAGENTA;
 8001d84:	4928      	ldr	r1, [pc, #160]	; (8001e28 <change_col+0x19c>)
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7fe fa1e 	bl	80001c8 <strcmp>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d102      	bne.n	8001d98 <change_col+0x10c>
 8001d92:	23e3      	movs	r3, #227	; 0xe3
 8001d94:	73fb      	strb	r3, [r7, #15]
 8001d96:	e029      	b.n	8001dec <change_col+0x160>
	else if (strcmp(color, "lichtmagenta") == 0)	col = VGA_COL_LIGHT_MAGENTA;
 8001d98:	4924      	ldr	r1, [pc, #144]	; (8001e2c <change_col+0x1a0>)
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7fe fa14 	bl	80001c8 <strcmp>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d102      	bne.n	8001dac <change_col+0x120>
 8001da6:	23f7      	movs	r3, #247	; 0xf7
 8001da8:	73fb      	strb	r3, [r7, #15]
 8001daa:	e01f      	b.n	8001dec <change_col+0x160>
	else if (strcmp(color, "geel") == 0)			col = VGA_COL_YELLOW;
 8001dac:	4920      	ldr	r1, [pc, #128]	; (8001e30 <change_col+0x1a4>)
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7fe fa0a 	bl	80001c8 <strcmp>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d102      	bne.n	8001dc0 <change_col+0x134>
 8001dba:	23fc      	movs	r3, #252	; 0xfc
 8001dbc:	73fb      	strb	r3, [r7, #15]
 8001dbe:	e015      	b.n	8001dec <change_col+0x160>
	else if (strcmp(color, "roze") == 0)			col = VGA_COL_PINK;
 8001dc0:	491c      	ldr	r1, [pc, #112]	; (8001e34 <change_col+0x1a8>)
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7fe fa00 	bl	80001c8 <strcmp>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d102      	bne.n	8001dd4 <change_col+0x148>
 8001dce:	23ef      	movs	r3, #239	; 0xef
 8001dd0:	73fb      	strb	r3, [r7, #15]
 8001dd2:	e00b      	b.n	8001dec <change_col+0x160>
	else if (strcmp(color, "paars") == 0)			col = VGA_COL_PURPLE;
 8001dd4:	4918      	ldr	r1, [pc, #96]	; (8001e38 <change_col+0x1ac>)
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7fe f9f6 	bl	80001c8 <strcmp>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d102      	bne.n	8001de8 <change_col+0x15c>
 8001de2:	2382      	movs	r3, #130	; 0x82
 8001de4:	73fb      	strb	r3, [r7, #15]
 8001de6:	e001      	b.n	8001dec <change_col+0x160>
	else 											col = VGA_COL_WHITE; // Error?
 8001de8:	23ff      	movs	r3, #255	; 0xff
 8001dea:	73fb      	strb	r3, [r7, #15]
	//enum

	return col;
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
};
 8001dee:	4618      	mov	r0, r3
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	08004d38 	.word	0x08004d38
 8001dfc:	08004d3c 	.word	0x08004d3c
 8001e00:	08004d44 	.word	0x08004d44
 8001e04:	08004d4c 	.word	0x08004d4c
 8001e08:	08004d54 	.word	0x08004d54
 8001e0c:	08004d5c 	.word	0x08004d5c
 8001e10:	08004d68 	.word	0x08004d68
 8001e14:	08004d70 	.word	0x08004d70
 8001e18:	08004d7c 	.word	0x08004d7c
 8001e1c:	08004d84 	.word	0x08004d84
 8001e20:	08004d90 	.word	0x08004d90
 8001e24:	08004d98 	.word	0x08004d98
 8001e28:	08004da4 	.word	0x08004da4
 8001e2c:	08004dac 	.word	0x08004dac
 8001e30:	08004dbc 	.word	0x08004dbc
 8001e34:	08004dc4 	.word	0x08004dc4
 8001e38:	08004dcc 	.word	0x08004dcc

08001e3c <line>:

uint8_t line(int16_t xi, int16_t yi, int16_t xii, int16_t yii, uint8_t thickness, char color[16])
{
 8001e3c:	b590      	push	{r4, r7, lr}
 8001e3e:	b09f      	sub	sp, #124	; 0x7c
 8001e40:	af02      	add	r7, sp, #8
 8001e42:	4604      	mov	r4, r0
 8001e44:	4608      	mov	r0, r1
 8001e46:	4611      	mov	r1, r2
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4623      	mov	r3, r4
 8001e4c:	80fb      	strh	r3, [r7, #6]
 8001e4e:	4603      	mov	r3, r0
 8001e50:	80bb      	strh	r3, [r7, #4]
 8001e52:	460b      	mov	r3, r1
 8001e54:	807b      	strh	r3, [r7, #2]
 8001e56:	4613      	mov	r3, r2
 8001e58:	803b      	strh	r3, [r7, #0]
	len = sizeof(x1) + sizeof(y1) + sizeof(x2) + sizeof(y2) + sizeof(thickness) + strlen(color) + 1;
	UART_printf(len + 6, "\n%d\t%d\t%d\t%d\t%d\t%s", x1, y1, x2, y2, thickness, color);
	#endif

	int16_t x1,x2,y1,y2;
	x1 = xi;
 8001e5a:	88fb      	ldrh	r3, [r7, #6]
 8001e5c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	y1 = yi;
 8001e60:	88bb      	ldrh	r3, [r7, #4]
 8001e62:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	x2 = xii;
 8001e66:	887b      	ldrh	r3, [r7, #2]
 8001e68:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	y2 = yii;
 8001e6c:	883b      	ldrh	r3, [r7, #0]
 8001e6e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
	uint8_t col = change_col(color);
 8001e72:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001e76:	f7ff ff09 	bl	8001c8c <change_col>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	int dx =  abs (x2 - x1), sx = x1 < x2 ? 1 : -1;
 8001e80:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 8001e84:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	bfb8      	it	lt
 8001e8e:	425b      	neglt	r3, r3
 8001e90:	65bb      	str	r3, [r7, #88]	; 0x58
 8001e92:	f9b7 206e 	ldrsh.w	r2, [r7, #110]	; 0x6e
 8001e96:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	da01      	bge.n	8001ea2 <line+0x66>
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e001      	b.n	8001ea6 <line+0x6a>
 8001ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea6:	657b      	str	r3, [r7, #84]	; 0x54
	int dy =  ((-1) * abs (y2 - y1)), sy = y1 < y2 ? 1 : -1;
 8001ea8:	f9b7 2060 	ldrsh.w	r2, [r7, #96]	; 0x60
 8001eac:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	bfb8      	it	lt
 8001eb6:	425b      	neglt	r3, r3
 8001eb8:	425b      	negs	r3, r3
 8001eba:	653b      	str	r3, [r7, #80]	; 0x50
 8001ebc:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 8001ec0:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	da01      	bge.n	8001ecc <line+0x90>
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e001      	b.n	8001ed0 <line+0x94>
 8001ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed0:	64fb      	str	r3, [r7, #76]	; 0x4c
	int err = dx + dy, e2; /* error value e_xy */
 8001ed2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ed4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ed6:	4413      	add	r3, r2
 8001ed8:	66bb      	str	r3, [r7, #104]	; 0x68
	float rc, x_rc, y_rc;
	float x_thick1, y_thick1, x_r, y_r;


	x_r = x2-x1;
 8001eda:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 8001ede:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	ee07 3a90 	vmov	s15, r3
 8001ee8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eec:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	y_r = y2-y1;
 8001ef0:	f9b7 2060 	ldrsh.w	r2, [r7, #96]	; 0x60
 8001ef4:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	ee07 3a90 	vmov	s15, r3
 8001efe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f02:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	x_rc = y_r *-1; //door onderstaande berekening ontstaat er een lijn die 90graden op de te tekenen lijn achterloopt
 8001f06:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f0a:	eef1 7a67 	vneg.f32	s15, s15
 8001f0e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	y_rc = x_r;
 8001f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f14:	63fb      	str	r3, [r7, #60]	; 0x3c
	rc= sqrt((x_rc*x_rc)+(y_rc*y_rc));
 8001f16:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001f1a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001f1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f22:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8001f26:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001f2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f32:	ee17 0a90 	vmov	r0, s15
 8001f36:	f7fe fabd 	bl	80004b4 <__aeabi_f2d>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	460c      	mov	r4, r1
 8001f3e:	ec44 3b10 	vmov	d0, r3, r4
 8001f42:	f002 fdcd 	bl	8004ae0 <sqrt>
 8001f46:	ec54 3b10 	vmov	r3, r4, d0
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	4621      	mov	r1, r4
 8001f4e:	f7fe fdd5 	bl	8000afc <__aeabi_d2f>
 8001f52:	4603      	mov	r3, r0
 8001f54:	63bb      	str	r3, [r7, #56]	; 0x38
	x_thick1= (thickness/rc)*x_rc+x1; // casten misschien?
 8001f56:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8001f5a:	ee07 3a90 	vmov	s15, r3
 8001f5e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f62:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f6a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001f6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f72:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8001f76:	ee07 3a90 	vmov	s15, r3
 8001f7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f82:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	y_thick1= (thickness/rc)*y_rc+y1;
 8001f86:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8001f8a:	ee07 3a90 	vmov	s15, r3
 8001f8e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f92:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f9a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001f9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fa2:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 8001fa6:	ee07 3a90 	vmov	s15, r3
 8001faa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fb2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	char beffer[20];

	UART_puts("\nrc: ");	UART_putint(rc);
 8001fb6:	487b      	ldr	r0, [pc, #492]	; (80021a4 <line+0x368>)
 8001fb8:	f001 fb44 	bl	8003644 <UART_puts>
 8001fbc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001fc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fc4:	ee17 0a90 	vmov	r0, s15
 8001fc8:	f001 fbb2 	bl	8003730 <UART_putint>
	UART_puts("\nx: ");	itoa(x_rc,beffer,10);	UART_puts(beffer);
 8001fcc:	4876      	ldr	r0, [pc, #472]	; (80021a8 <line+0x36c>)
 8001fce:	f001 fb39 	bl	8003644 <UART_puts>
 8001fd2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001fd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fda:	f107 0308 	add.w	r3, r7, #8
 8001fde:	220a      	movs	r2, #10
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	ee17 0a90 	vmov	r0, s15
 8001fe6:	f002 fadf 	bl	80045a8 <itoa>
 8001fea:	f107 0308 	add.w	r3, r7, #8
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f001 fb28 	bl	8003644 <UART_puts>
	UART_puts("\ny: ");	itoa(y_rc,beffer,10);	UART_puts(beffer);
 8001ff4:	486d      	ldr	r0, [pc, #436]	; (80021ac <line+0x370>)
 8001ff6:	f001 fb25 	bl	8003644 <UART_puts>
 8001ffa:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001ffe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002002:	f107 0308 	add.w	r3, r7, #8
 8002006:	220a      	movs	r2, #10
 8002008:	4619      	mov	r1, r3
 800200a:	ee17 0a90 	vmov	r0, s15
 800200e:	f002 facb 	bl	80045a8 <itoa>
 8002012:	f107 0308 	add.w	r3, r7, #8
 8002016:	4618      	mov	r0, r3
 8002018:	f001 fb14 	bl	8003644 <UART_puts>
	UART_puts("\nthickX: ");	itoa(x_thick1,beffer,10);	UART_puts(beffer);
 800201c:	4864      	ldr	r0, [pc, #400]	; (80021b0 <line+0x374>)
 800201e:	f001 fb11 	bl	8003644 <UART_puts>
 8002022:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002026:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800202a:	f107 0308 	add.w	r3, r7, #8
 800202e:	220a      	movs	r2, #10
 8002030:	4619      	mov	r1, r3
 8002032:	ee17 0a90 	vmov	r0, s15
 8002036:	f002 fab7 	bl	80045a8 <itoa>
 800203a:	f107 0308 	add.w	r3, r7, #8
 800203e:	4618      	mov	r0, r3
 8002040:	f001 fb00 	bl	8003644 <UART_puts>
	UART_puts("\nthickY: ");	itoa(y_thick1,beffer,10);	UART_puts(beffer);
 8002044:	485b      	ldr	r0, [pc, #364]	; (80021b4 <line+0x378>)
 8002046:	f001 fafd 	bl	8003644 <UART_puts>
 800204a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800204e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002052:	f107 0308 	add.w	r3, r7, #8
 8002056:	220a      	movs	r2, #10
 8002058:	4619      	mov	r1, r3
 800205a:	ee17 0a90 	vmov	r0, s15
 800205e:	f002 faa3 	bl	80045a8 <itoa>
 8002062:	f107 0308 	add.w	r3, r7, #8
 8002066:	4618      	mov	r0, r3
 8002068:	f001 faec 	bl	8003644 <UART_puts>

	while(1){  /* loop */
		UB_VGA_SetPixel(x1,y1,col);
 800206c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8002070:	f8b7 106c 	ldrh.w	r1, [r7, #108]	; 0x6c
 8002074:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8002078:	4618      	mov	r0, r3
 800207a:	f001 fd6f 	bl	8003b5c <UB_VGA_SetPixel>
	  if(x1 == x2 && y1 == y2) break;
 800207e:	f9b7 206e 	ldrsh.w	r2, [r7, #110]	; 0x6e
 8002082:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8002086:	429a      	cmp	r2, r3
 8002088:	d105      	bne.n	8002096 <line+0x25a>
 800208a:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800208e:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8002092:	429a      	cmp	r2, r3
 8002094:	d023      	beq.n	80020de <line+0x2a2>
	  e2 = 2 * err;
 8002096:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if (e2 >= dy) { err += dy; x1 += sx; } /* e_xy+e_x > 0 */
 800209c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800209e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020a0:	429a      	cmp	r2, r3
 80020a2:	db0b      	blt.n	80020bc <line+0x280>
 80020a4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80020a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020a8:	4413      	add	r3, r2
 80020aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80020ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80020b4:	4413      	add	r3, r2
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	  if (e2 <= dx) { err += dx; y1 += sy; } /* e_xy+e_y < 0 */
 80020bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020c0:	429a      	cmp	r2, r3
 80020c2:	dcd3      	bgt.n	800206c <line+0x230>
 80020c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80020c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020c8:	4413      	add	r3, r2
 80020ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80020cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80020d4:	4413      	add	r3, r2
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
		UB_VGA_SetPixel(x1,y1,col);
 80020dc:	e7c6      	b.n	800206c <line+0x230>
	  if(x1 == x2 && y1 == y2) break;
 80020de:	bf00      	nop
	}

	for (int i=1; i<= thickness; i++) {
 80020e0:	2301      	movs	r3, #1
 80020e2:	667b      	str	r3, [r7, #100]	; 0x64
 80020e4:	e054      	b.n	8002190 <line+0x354>
		int xx= (i/rc)*x_rc+xi; // casten misschien?
 80020e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020e8:	ee07 3a90 	vmov	s15, r3
 80020ec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80020f0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80020f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020f8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80020fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002100:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002104:	ee07 3a90 	vmov	s15, r3
 8002108:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800210c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002110:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002114:	ee17 3a90 	vmov	r3, s15
 8002118:	62bb      	str	r3, [r7, #40]	; 0x28
		int yy= (i/rc)*y_rc+yi;
 800211a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800211c:	ee07 3a90 	vmov	s15, r3
 8002120:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002124:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002128:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800212c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002130:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002134:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002138:	ee07 3a90 	vmov	s15, r3
 800213c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002140:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002144:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002148:	ee17 3a90 	vmov	r3, s15
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
		int x02=  (xx-xi) + xii;
 800214e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002152:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002154:	1ad2      	subs	r2, r2, r3
 8002156:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800215a:	4413      	add	r3, r2
 800215c:	623b      	str	r3, [r7, #32]
		int y02= (yy-yi)+ yii;
 800215e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002164:	1ad2      	subs	r2, r2, r3
 8002166:	f9b7 3000 	ldrsh.w	r3, [r7]
 800216a:	4413      	add	r3, r2
 800216c:	61fb      	str	r3, [r7, #28]
		lijn(xx,yy,x02,y02,color);
 800216e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002170:	b218      	sxth	r0, r3
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	b219      	sxth	r1, r3
 8002176:	6a3b      	ldr	r3, [r7, #32]
 8002178:	b21a      	sxth	r2, r3
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	b21c      	sxth	r4, r3
 800217e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	4623      	mov	r3, r4
 8002186:	f000 f817 	bl	80021b8 <lijn>
	for (int i=1; i<= thickness; i++) {
 800218a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800218c:	3301      	adds	r3, #1
 800218e:	667b      	str	r3, [r7, #100]	; 0x64
 8002190:	f897 2080 	ldrb.w	r2, [r7, #128]	; 0x80
 8002194:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002196:	429a      	cmp	r2, r3
 8002198:	daa5      	bge.n	80020e6 <line+0x2aa>
	}

	return 1;
 800219a:	2301      	movs	r3, #1
};
 800219c:	4618      	mov	r0, r3
 800219e:	3774      	adds	r7, #116	; 0x74
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd90      	pop	{r4, r7, pc}
 80021a4:	08004dd4 	.word	0x08004dd4
 80021a8:	08004ddc 	.word	0x08004ddc
 80021ac:	08004de4 	.word	0x08004de4
 80021b0:	08004dec 	.word	0x08004dec
 80021b4:	08004df8 	.word	0x08004df8

080021b8 <lijn>:

void lijn(int16_t x1, int16_t y1, int16_t x2, int16_t y2, char color[16]){
 80021b8:	b590      	push	{r4, r7, lr}
 80021ba:	b08f      	sub	sp, #60	; 0x3c
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4604      	mov	r4, r0
 80021c0:	4608      	mov	r0, r1
 80021c2:	4611      	mov	r1, r2
 80021c4:	461a      	mov	r2, r3
 80021c6:	4623      	mov	r3, r4
 80021c8:	80fb      	strh	r3, [r7, #6]
 80021ca:	4603      	mov	r3, r0
 80021cc:	80bb      	strh	r3, [r7, #4]
 80021ce:	460b      	mov	r3, r1
 80021d0:	807b      	strh	r3, [r7, #2]
 80021d2:	4613      	mov	r3, r2
 80021d4:	803b      	strh	r3, [r7, #0]
	uint8_t col = change_col(color);
 80021d6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80021d8:	f7ff fd58 	bl	8001c8c <change_col>
 80021dc:	4603      	mov	r3, r0
 80021de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	char beffer[20];
	UART_puts("\nX1: ");	itoa(x1,beffer,10);	UART_puts(beffer);
 80021e2:	4857      	ldr	r0, [pc, #348]	; (8002340 <lijn+0x188>)
 80021e4:	f001 fa2e 	bl	8003644 <UART_puts>
 80021e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021ec:	f107 0108 	add.w	r1, r7, #8
 80021f0:	220a      	movs	r2, #10
 80021f2:	4618      	mov	r0, r3
 80021f4:	f002 f9d8 	bl	80045a8 <itoa>
 80021f8:	f107 0308 	add.w	r3, r7, #8
 80021fc:	4618      	mov	r0, r3
 80021fe:	f001 fa21 	bl	8003644 <UART_puts>
	UART_puts("\nY1: ");	itoa(y1,beffer,10);	UART_puts(beffer);
 8002202:	4850      	ldr	r0, [pc, #320]	; (8002344 <lijn+0x18c>)
 8002204:	f001 fa1e 	bl	8003644 <UART_puts>
 8002208:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800220c:	f107 0108 	add.w	r1, r7, #8
 8002210:	220a      	movs	r2, #10
 8002212:	4618      	mov	r0, r3
 8002214:	f002 f9c8 	bl	80045a8 <itoa>
 8002218:	f107 0308 	add.w	r3, r7, #8
 800221c:	4618      	mov	r0, r3
 800221e:	f001 fa11 	bl	8003644 <UART_puts>
	UART_puts("\nX2: ");	itoa(x2,beffer,10);	UART_puts(beffer);
 8002222:	4849      	ldr	r0, [pc, #292]	; (8002348 <lijn+0x190>)
 8002224:	f001 fa0e 	bl	8003644 <UART_puts>
 8002228:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800222c:	f107 0108 	add.w	r1, r7, #8
 8002230:	220a      	movs	r2, #10
 8002232:	4618      	mov	r0, r3
 8002234:	f002 f9b8 	bl	80045a8 <itoa>
 8002238:	f107 0308 	add.w	r3, r7, #8
 800223c:	4618      	mov	r0, r3
 800223e:	f001 fa01 	bl	8003644 <UART_puts>
	UART_puts("\nY2: ");	itoa(y2,beffer,10);	UART_puts(beffer);
 8002242:	4842      	ldr	r0, [pc, #264]	; (800234c <lijn+0x194>)
 8002244:	f001 f9fe 	bl	8003644 <UART_puts>
 8002248:	f9b7 3000 	ldrsh.w	r3, [r7]
 800224c:	f107 0108 	add.w	r1, r7, #8
 8002250:	220a      	movs	r2, #10
 8002252:	4618      	mov	r0, r3
 8002254:	f002 f9a8 	bl	80045a8 <itoa>
 8002258:	f107 0308 	add.w	r3, r7, #8
 800225c:	4618      	mov	r0, r3
 800225e:	f001 f9f1 	bl	8003644 <UART_puts>
	int dx =  abs (x2 - x1), sx = x1 < x2 ? 1 :  - 1;
 8002262:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002266:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b00      	cmp	r3, #0
 800226e:	bfb8      	it	lt
 8002270:	425b      	neglt	r3, r3
 8002272:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002274:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002278:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800227c:	429a      	cmp	r2, r3
 800227e:	da01      	bge.n	8002284 <lijn+0xcc>
 8002280:	2301      	movs	r3, #1
 8002282:	e001      	b.n	8002288 <lijn+0xd0>
 8002284:	f04f 33ff 	mov.w	r3, #4294967295
 8002288:	62bb      	str	r3, [r7, #40]	; 0x28
	int dy =  - abs (y2 - y1), sy = y1 < y2 ? 1 :  - 1;
 800228a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800228e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b00      	cmp	r3, #0
 8002296:	bfb8      	it	lt
 8002298:	425b      	neglt	r3, r3
 800229a:	425b      	negs	r3, r3
 800229c:	627b      	str	r3, [r7, #36]	; 0x24
 800229e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80022a2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	da01      	bge.n	80022ae <lijn+0xf6>
 80022aa:	2301      	movs	r3, #1
 80022ac:	e001      	b.n	80022b2 <lijn+0xfa>
 80022ae:	f04f 33ff 	mov.w	r3, #4294967295
 80022b2:	623b      	str	r3, [r7, #32]
	int err = dx + dy, e2; /* error value e_xy */
 80022b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	4413      	add	r3, r2
 80022ba:	637b      	str	r3, [r7, #52]	; 0x34

	while(1){  /* loop */
	  UB_VGA_SetPixel(x1, y1, col);
 80022bc:	88fb      	ldrh	r3, [r7, #6]
 80022be:	88b9      	ldrh	r1, [r7, #4]
 80022c0:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80022c4:	4618      	mov	r0, r3
 80022c6:	f001 fc49 	bl	8003b5c <UB_VGA_SetPixel>
	  UB_VGA_SetPixel(x1, y1+1, col);
 80022ca:	88f8      	ldrh	r0, [r7, #6]
 80022cc:	88bb      	ldrh	r3, [r7, #4]
 80022ce:	3301      	adds	r3, #1
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80022d6:	4619      	mov	r1, r3
 80022d8:	f001 fc40 	bl	8003b5c <UB_VGA_SetPixel>
	  if (x1 == x2 && y1 == y2) break;
 80022dc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80022e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d105      	bne.n	80022f4 <lijn+0x13c>
 80022e8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80022ec:	f9b7 3000 	ldrsh.w	r3, [r7]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d01f      	beq.n	8002334 <lijn+0x17c>
	  e2 = 2 * err;
 80022f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	61fb      	str	r3, [r7, #28]
	  if (e2 >= dy) { err += dy; x1 += sx; } /* e_xy + e_x > 0 */
 80022fa:	69fa      	ldr	r2, [r7, #28]
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	429a      	cmp	r2, r3
 8002300:	db09      	blt.n	8002316 <lijn+0x15e>
 8002302:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002306:	4413      	add	r3, r2
 8002308:	637b      	str	r3, [r7, #52]	; 0x34
 800230a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800230c:	b29a      	uxth	r2, r3
 800230e:	88fb      	ldrh	r3, [r7, #6]
 8002310:	4413      	add	r3, r2
 8002312:	b29b      	uxth	r3, r3
 8002314:	80fb      	strh	r3, [r7, #6]
	  if (e2 <= dx) { err += dx; y1 += sy; } /* e_xy + e_y < 0 */
 8002316:	69fa      	ldr	r2, [r7, #28]
 8002318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231a:	429a      	cmp	r2, r3
 800231c:	dcce      	bgt.n	80022bc <lijn+0x104>
 800231e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002322:	4413      	add	r3, r2
 8002324:	637b      	str	r3, [r7, #52]	; 0x34
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	b29a      	uxth	r2, r3
 800232a:	88bb      	ldrh	r3, [r7, #4]
 800232c:	4413      	add	r3, r2
 800232e:	b29b      	uxth	r3, r3
 8002330:	80bb      	strh	r3, [r7, #4]
	  UB_VGA_SetPixel(x1, y1, col);
 8002332:	e7c3      	b.n	80022bc <lijn+0x104>
	  if (x1 == x2 && y1 == y2) break;
 8002334:	bf00      	nop
	}
}
 8002336:	bf00      	nop
 8002338:	373c      	adds	r7, #60	; 0x3c
 800233a:	46bd      	mov	sp, r7
 800233c:	bd90      	pop	{r4, r7, pc}
 800233e:	bf00      	nop
 8002340:	08004e04 	.word	0x08004e04
 8002344:	08004e0c 	.word	0x08004e0c
 8002348:	08004e14 	.word	0x08004e14
 800234c:	08004e1c 	.word	0x08004e1c

08002350 <arrow>:

uint8_t arrow(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint8_t thickness, char color[16])
{
 8002350:	b490      	push	{r4, r7}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	4604      	mov	r4, r0
 8002358:	4608      	mov	r0, r1
 800235a:	4611      	mov	r1, r2
 800235c:	461a      	mov	r2, r3
 800235e:	4623      	mov	r3, r4
 8002360:	80fb      	strh	r3, [r7, #6]
 8002362:	4603      	mov	r3, r0
 8002364:	80bb      	strh	r3, [r7, #4]
 8002366:	460b      	mov	r3, r1
 8002368:	807b      	strh	r3, [r7, #2]
 800236a:	4613      	mov	r3, r2
 800236c:	803b      	strh	r3, [r7, #0]
	len = sizeof(x1) + sizeof(y1) + sizeof(x2) + sizeof(y2) + sizeof(thickness) + strlen(color) + 1;
	UART_printf(len + 6, "\n%d\t%d\t%d\t%d\t%d\t%s", x1, y1, x2, y2, thickness, color);
	#endif
//	uint8_t col = change_col(color);

	return 2;
 800236e:	2302      	movs	r3, #2
};
 8002370:	4618      	mov	r0, r3
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bc90      	pop	{r4, r7}
 8002378:	4770      	bx	lr
	...

0800237c <ellipse_filled>:

	return 3;
};

uint8_t ellipse_filled(int16_t x1, int16_t y1, int16_t xradius, int16_t yradius, char color[16])
{
 800237c:	b5b0      	push	{r4, r5, r7, lr}
 800237e:	b08a      	sub	sp, #40	; 0x28
 8002380:	af00      	add	r7, sp, #0
 8002382:	4604      	mov	r4, r0
 8002384:	4608      	mov	r0, r1
 8002386:	4611      	mov	r1, r2
 8002388:	461a      	mov	r2, r3
 800238a:	4623      	mov	r3, r4
 800238c:	80fb      	strh	r3, [r7, #6]
 800238e:	4603      	mov	r3, r0
 8002390:	80bb      	strh	r3, [r7, #4]
 8002392:	460b      	mov	r3, r1
 8002394:	807b      	strh	r3, [r7, #2]
 8002396:	4613      	mov	r3, r2
 8002398:	803b      	strh	r3, [r7, #0]
	UART_puts("\nEllipse_filled\nX1\tY1\txRadius\tyRadius\tColor");
	len = sizeof(x1) + sizeof(y1) + sizeof(xRadius) + sizeof(yRadius) + strlen(color) + 1;
	UART_printf(len + 5, "\n%d\t%d\t%d\t%d\t%s", x1, y1, xRadius, yRadius, color);
	#endif

	uint8_t col = change_col(color);
 800239a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800239c:	f7ff fc76 	bl	8001c8c <change_col>
 80023a0:	4603      	mov	r3, r0
 80023a2:	77fb      	strb	r3, [r7, #31]

	for(int y= -yradius; y<=yradius; y++) {
 80023a4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80023a8:	425b      	negs	r3, r3
 80023aa:	627b      	str	r3, [r7, #36]	; 0x24
 80023ac:	e067      	b.n	800247e <ellipse_filled+0x102>
	    for(int x= -xradius; x<=xradius; x++) {
 80023ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80023b2:	425b      	negs	r3, r3
 80023b4:	623b      	str	r3, [r7, #32]
 80023b6:	e05a      	b.n	800246e <ellipse_filled+0xf2>
	        double dx = (double)x / (double)xradius;
 80023b8:	6a38      	ldr	r0, [r7, #32]
 80023ba:	f7fe f869 	bl	8000490 <__aeabi_i2d>
 80023be:	4604      	mov	r4, r0
 80023c0:	460d      	mov	r5, r1
 80023c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7fe f862 	bl	8000490 <__aeabi_i2d>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	4620      	mov	r0, r4
 80023d2:	4629      	mov	r1, r5
 80023d4:	f7fe f9ec 	bl	80007b0 <__aeabi_ddiv>
 80023d8:	4603      	mov	r3, r0
 80023da:	460c      	mov	r4, r1
 80023dc:	e9c7 3404 	strd	r3, r4, [r7, #16]
	        double dy = (double)y / (double)yradius;
 80023e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023e2:	f7fe f855 	bl	8000490 <__aeabi_i2d>
 80023e6:	4604      	mov	r4, r0
 80023e8:	460d      	mov	r5, r1
 80023ea:	f9b7 3000 	ldrsh.w	r3, [r7]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe f84e 	bl	8000490 <__aeabi_i2d>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	4620      	mov	r0, r4
 80023fa:	4629      	mov	r1, r5
 80023fc:	f7fe f9d8 	bl	80007b0 <__aeabi_ddiv>
 8002400:	4603      	mov	r3, r0
 8002402:	460c      	mov	r4, r1
 8002404:	e9c7 3402 	strd	r3, r4, [r7, #8]
	        if(dx*dx + dy*dy <= 1)
 8002408:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800240c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002410:	f7fe f8a4 	bl	800055c <__aeabi_dmul>
 8002414:	4603      	mov	r3, r0
 8002416:	460c      	mov	r4, r1
 8002418:	4625      	mov	r5, r4
 800241a:	461c      	mov	r4, r3
 800241c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002420:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002424:	f7fe f89a 	bl	800055c <__aeabi_dmul>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4620      	mov	r0, r4
 800242e:	4629      	mov	r1, r5
 8002430:	f7fd fee2 	bl	80001f8 <__adddf3>
 8002434:	4603      	mov	r3, r0
 8002436:	460c      	mov	r4, r1
 8002438:	4618      	mov	r0, r3
 800243a:	4621      	mov	r1, r4
 800243c:	f04f 0200 	mov.w	r2, #0
 8002440:	4b14      	ldr	r3, [pc, #80]	; (8002494 <ellipse_filled+0x118>)
 8002442:	f7fe fb07 	bl	8000a54 <__aeabi_dcmple>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00d      	beq.n	8002468 <ellipse_filled+0xec>
	        	UB_VGA_SetPixel(x + x1, y + y1, col);
 800244c:	6a3b      	ldr	r3, [r7, #32]
 800244e:	b29a      	uxth	r2, r3
 8002450:	88fb      	ldrh	r3, [r7, #6]
 8002452:	4413      	add	r3, r2
 8002454:	b298      	uxth	r0, r3
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	b29a      	uxth	r2, r3
 800245a:	88bb      	ldrh	r3, [r7, #4]
 800245c:	4413      	add	r3, r2
 800245e:	b29b      	uxth	r3, r3
 8002460:	7ffa      	ldrb	r2, [r7, #31]
 8002462:	4619      	mov	r1, r3
 8002464:	f001 fb7a 	bl	8003b5c <UB_VGA_SetPixel>
	    for(int x= -xradius; x<=xradius; x++) {
 8002468:	6a3b      	ldr	r3, [r7, #32]
 800246a:	3301      	adds	r3, #1
 800246c:	623b      	str	r3, [r7, #32]
 800246e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	429a      	cmp	r2, r3
 8002476:	da9f      	bge.n	80023b8 <ellipse_filled+0x3c>
	for(int y= -yradius; y<=yradius; y++) {
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	3301      	adds	r3, #1
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
 800247e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	429a      	cmp	r2, r3
 8002486:	da92      	bge.n	80023ae <ellipse_filled+0x32>
	    }
	}
	return 4;
 8002488:	2304      	movs	r3, #4
};
 800248a:	4618      	mov	r0, r3
 800248c:	3728      	adds	r7, #40	; 0x28
 800248e:	46bd      	mov	sp, r7
 8002490:	bdb0      	pop	{r4, r5, r7, pc}
 8002492:	bf00      	nop
 8002494:	3ff00000 	.word	0x3ff00000

08002498 <rectangular>:

uint8_t rectangular(uint16_t x1, uint16_t y1, uint16_t xlength, uint16_t ylength, char color[16])
{
 8002498:	b590      	push	{r4, r7, lr}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	4604      	mov	r4, r0
 80024a0:	4608      	mov	r0, r1
 80024a2:	4611      	mov	r1, r2
 80024a4:	461a      	mov	r2, r3
 80024a6:	4623      	mov	r3, r4
 80024a8:	80fb      	strh	r3, [r7, #6]
 80024aa:	4603      	mov	r3, r0
 80024ac:	80bb      	strh	r3, [r7, #4]
 80024ae:	460b      	mov	r3, r1
 80024b0:	807b      	strh	r3, [r7, #2]
 80024b2:	4613      	mov	r3, r2
 80024b4:	803b      	strh	r3, [r7, #0]
	UART_puts("\nRectangular\nX1\tY1\txLength\tyLength\tColor");
	len = sizeof(x1) + sizeof(y1) + sizeof(xlength) + sizeof(ylength) + strlen(color) + 1;
	UART_printf(len + 5, "\n%d\t%d\t%d\t%d\t%s", x1, y1, xlength, ylength, color);
	#endif

	uint8_t col = change_col(color);
 80024b6:	6a38      	ldr	r0, [r7, #32]
 80024b8:	f7ff fbe8 	bl	8001c8c <change_col>
 80024bc:	4603      	mov	r3, r0
 80024be:	737b      	strb	r3, [r7, #13]
	uint16_t i;

	// Out of screen
	if (x1 + xlength > VGA_DISPLAY_X)	xlength = -x1 - VGA_DISPLAY_X;
 80024c0:	88fa      	ldrh	r2, [r7, #6]
 80024c2:	887b      	ldrh	r3, [r7, #2]
 80024c4:	4413      	add	r3, r2
 80024c6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80024ca:	dd08      	ble.n	80024de <rectangular+0x46>
 80024cc:	88fb      	ldrh	r3, [r7, #6]
 80024ce:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80024d2:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80024d6:	f503 437e 	add.w	r3, r3, #65024	; 0xfe00
 80024da:	33c0      	adds	r3, #192	; 0xc0
 80024dc:	807b      	strh	r3, [r7, #2]
	if (y1 + ylength > VGA_DISPLAY_Y)	ylength = -y1 - VGA_DISPLAY_Y;
 80024de:	88ba      	ldrh	r2, [r7, #4]
 80024e0:	883b      	ldrh	r3, [r7, #0]
 80024e2:	4413      	add	r3, r2
 80024e4:	2bf0      	cmp	r3, #240	; 0xf0
 80024e6:	dd06      	ble.n	80024f6 <rectangular+0x5e>
 80024e8:	88bb      	ldrh	r3, [r7, #4]
 80024ea:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 80024ee:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80024f2:	3310      	adds	r3, #16
 80024f4:	803b      	strh	r3, [r7, #0]

	for (i=x1; i<x1 + xlength; i++) {
 80024f6:	88fb      	ldrh	r3, [r7, #6]
 80024f8:	81fb      	strh	r3, [r7, #14]
 80024fa:	e013      	b.n	8002524 <rectangular+0x8c>
		UB_VGA_SetPixel(i, y1, col);
 80024fc:	7b7a      	ldrb	r2, [r7, #13]
 80024fe:	88b9      	ldrh	r1, [r7, #4]
 8002500:	89fb      	ldrh	r3, [r7, #14]
 8002502:	4618      	mov	r0, r3
 8002504:	f001 fb2a 	bl	8003b5c <UB_VGA_SetPixel>
		UB_VGA_SetPixel(i , y1 + ylength - 1, col);
 8002508:	88ba      	ldrh	r2, [r7, #4]
 800250a:	883b      	ldrh	r3, [r7, #0]
 800250c:	4413      	add	r3, r2
 800250e:	b29b      	uxth	r3, r3
 8002510:	3b01      	subs	r3, #1
 8002512:	b299      	uxth	r1, r3
 8002514:	7b7a      	ldrb	r2, [r7, #13]
 8002516:	89fb      	ldrh	r3, [r7, #14]
 8002518:	4618      	mov	r0, r3
 800251a:	f001 fb1f 	bl	8003b5c <UB_VGA_SetPixel>
	for (i=x1; i<x1 + xlength; i++) {
 800251e:	89fb      	ldrh	r3, [r7, #14]
 8002520:	3301      	adds	r3, #1
 8002522:	81fb      	strh	r3, [r7, #14]
 8002524:	89fa      	ldrh	r2, [r7, #14]
 8002526:	88f9      	ldrh	r1, [r7, #6]
 8002528:	887b      	ldrh	r3, [r7, #2]
 800252a:	440b      	add	r3, r1
 800252c:	429a      	cmp	r2, r3
 800252e:	dbe5      	blt.n	80024fc <rectangular+0x64>
	}
	for (i=y1; i<y1 + ylength; i++) {
 8002530:	88bb      	ldrh	r3, [r7, #4]
 8002532:	81fb      	strh	r3, [r7, #14]
 8002534:	e013      	b.n	800255e <rectangular+0xc6>
		UB_VGA_SetPixel(x1, i, col);
 8002536:	7b7a      	ldrb	r2, [r7, #13]
 8002538:	89f9      	ldrh	r1, [r7, #14]
 800253a:	88fb      	ldrh	r3, [r7, #6]
 800253c:	4618      	mov	r0, r3
 800253e:	f001 fb0d 	bl	8003b5c <UB_VGA_SetPixel>
		UB_VGA_SetPixel(x1 + xlength - 1, i, col);
 8002542:	88fa      	ldrh	r2, [r7, #6]
 8002544:	887b      	ldrh	r3, [r7, #2]
 8002546:	4413      	add	r3, r2
 8002548:	b29b      	uxth	r3, r3
 800254a:	3b01      	subs	r3, #1
 800254c:	b29b      	uxth	r3, r3
 800254e:	7b7a      	ldrb	r2, [r7, #13]
 8002550:	89f9      	ldrh	r1, [r7, #14]
 8002552:	4618      	mov	r0, r3
 8002554:	f001 fb02 	bl	8003b5c <UB_VGA_SetPixel>
	for (i=y1; i<y1 + ylength; i++) {
 8002558:	89fb      	ldrh	r3, [r7, #14]
 800255a:	3301      	adds	r3, #1
 800255c:	81fb      	strh	r3, [r7, #14]
 800255e:	89fa      	ldrh	r2, [r7, #14]
 8002560:	88b9      	ldrh	r1, [r7, #4]
 8002562:	883b      	ldrh	r3, [r7, #0]
 8002564:	440b      	add	r3, r1
 8002566:	429a      	cmp	r2, r3
 8002568:	dbe5      	blt.n	8002536 <rectangular+0x9e>
	}

	return 5;
 800256a:	2305      	movs	r3, #5
};
 800256c:	4618      	mov	r0, r3
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	bd90      	pop	{r4, r7, pc}

08002574 <rectangular_thick>:

uint8_t rectangular_thick(uint16_t x1, uint16_t y1, uint16_t xlength, uint16_t ylength, uint8_t tx, uint8_t ty, char color[16])
{
 8002574:	b590      	push	{r4, r7, lr}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	4604      	mov	r4, r0
 800257c:	4608      	mov	r0, r1
 800257e:	4611      	mov	r1, r2
 8002580:	461a      	mov	r2, r3
 8002582:	4623      	mov	r3, r4
 8002584:	80fb      	strh	r3, [r7, #6]
 8002586:	4603      	mov	r3, r0
 8002588:	80bb      	strh	r3, [r7, #4]
 800258a:	460b      	mov	r3, r1
 800258c:	807b      	strh	r3, [r7, #2]
 800258e:	4613      	mov	r3, r2
 8002590:	803b      	strh	r3, [r7, #0]
	UART_puts("\nRectangular_thick\nX1\tY1\txLength\tyLength\tX_thick\tY_thick\tColor");
	len = sizeof(x1) + sizeof(y1) + sizeof(xlength) + sizeof(ylength) + sizeof(tx) + sizeof(ty) + strlen(color) + 1;
	UART_printf(len + 7, "\n%d\t%d\t%d\t%d\t%d\t%d\t%s", x1, y1, xlength, ylength, tx, ty, color);
	#endif

	uint8_t col = change_col(color);
 8002592:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002594:	f7ff fb7a 	bl	8001c8c <change_col>
 8002598:	4603      	mov	r3, r0
 800259a:	72fb      	strb	r3, [r7, #11]
    uint16_t i, t;

	// Out of screen
	if (x1 + xlength > VGA_DISPLAY_X)	xlength = -x1 - VGA_DISPLAY_X;
 800259c:	88fa      	ldrh	r2, [r7, #6]
 800259e:	887b      	ldrh	r3, [r7, #2]
 80025a0:	4413      	add	r3, r2
 80025a2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80025a6:	dd08      	ble.n	80025ba <rectangular_thick+0x46>
 80025a8:	88fb      	ldrh	r3, [r7, #6]
 80025aa:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80025ae:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80025b2:	f503 437e 	add.w	r3, r3, #65024	; 0xfe00
 80025b6:	33c0      	adds	r3, #192	; 0xc0
 80025b8:	807b      	strh	r3, [r7, #2]
	if (y1 + ylength > VGA_DISPLAY_Y)	ylength = -y1 - VGA_DISPLAY_Y;
 80025ba:	88ba      	ldrh	r2, [r7, #4]
 80025bc:	883b      	ldrh	r3, [r7, #0]
 80025be:	4413      	add	r3, r2
 80025c0:	2bf0      	cmp	r3, #240	; 0xf0
 80025c2:	dd06      	ble.n	80025d2 <rectangular_thick+0x5e>
 80025c4:	88bb      	ldrh	r3, [r7, #4]
 80025c6:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 80025ca:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80025ce:	3310      	adds	r3, #16
 80025d0:	803b      	strh	r3, [r7, #0]

	if (tx == 0) tx = 1;
 80025d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d102      	bne.n	80025e0 <rectangular_thick+0x6c>
 80025da:	2301      	movs	r3, #1
 80025dc:	f887 3020 	strb.w	r3, [r7, #32]
	if (ty == 0) ty = 1;
 80025e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d102      	bne.n	80025ee <rectangular_thick+0x7a>
 80025e8:	2301      	movs	r3, #1
 80025ea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	for (i=x1; i<x1 + xlength; i++) {
 80025ee:	88fb      	ldrh	r3, [r7, #6]
 80025f0:	81fb      	strh	r3, [r7, #14]
 80025f2:	e023      	b.n	800263c <rectangular_thick+0xc8>
		for (t=0; t<(ty); t++) {
 80025f4:	2300      	movs	r3, #0
 80025f6:	81bb      	strh	r3, [r7, #12]
 80025f8:	e017      	b.n	800262a <rectangular_thick+0xb6>
			UB_VGA_SetPixel(i, y1 + t, col);
 80025fa:	88ba      	ldrh	r2, [r7, #4]
 80025fc:	89bb      	ldrh	r3, [r7, #12]
 80025fe:	4413      	add	r3, r2
 8002600:	b299      	uxth	r1, r3
 8002602:	7afa      	ldrb	r2, [r7, #11]
 8002604:	89fb      	ldrh	r3, [r7, #14]
 8002606:	4618      	mov	r0, r3
 8002608:	f001 faa8 	bl	8003b5c <UB_VGA_SetPixel>
			UB_VGA_SetPixel(i , y1 + ylength - t, col);
 800260c:	88ba      	ldrh	r2, [r7, #4]
 800260e:	883b      	ldrh	r3, [r7, #0]
 8002610:	4413      	add	r3, r2
 8002612:	b29a      	uxth	r2, r3
 8002614:	89bb      	ldrh	r3, [r7, #12]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	b299      	uxth	r1, r3
 800261a:	7afa      	ldrb	r2, [r7, #11]
 800261c:	89fb      	ldrh	r3, [r7, #14]
 800261e:	4618      	mov	r0, r3
 8002620:	f001 fa9c 	bl	8003b5c <UB_VGA_SetPixel>
		for (t=0; t<(ty); t++) {
 8002624:	89bb      	ldrh	r3, [r7, #12]
 8002626:	3301      	adds	r3, #1
 8002628:	81bb      	strh	r3, [r7, #12]
 800262a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800262e:	b29b      	uxth	r3, r3
 8002630:	89ba      	ldrh	r2, [r7, #12]
 8002632:	429a      	cmp	r2, r3
 8002634:	d3e1      	bcc.n	80025fa <rectangular_thick+0x86>
	for (i=x1; i<x1 + xlength; i++) {
 8002636:	89fb      	ldrh	r3, [r7, #14]
 8002638:	3301      	adds	r3, #1
 800263a:	81fb      	strh	r3, [r7, #14]
 800263c:	89fa      	ldrh	r2, [r7, #14]
 800263e:	88f9      	ldrh	r1, [r7, #6]
 8002640:	887b      	ldrh	r3, [r7, #2]
 8002642:	440b      	add	r3, r1
 8002644:	429a      	cmp	r2, r3
 8002646:	dbd5      	blt.n	80025f4 <rectangular_thick+0x80>
		}
	}
	for (i=y1; i<y1 + ylength; i++) {
 8002648:	88bb      	ldrh	r3, [r7, #4]
 800264a:	81fb      	strh	r3, [r7, #14]
 800264c:	e023      	b.n	8002696 <rectangular_thick+0x122>
		for (t=0; t<(tx); t++) {
 800264e:	2300      	movs	r3, #0
 8002650:	81bb      	strh	r3, [r7, #12]
 8002652:	e017      	b.n	8002684 <rectangular_thick+0x110>
			UB_VGA_SetPixel(x1 + t, i, col);
 8002654:	88fa      	ldrh	r2, [r7, #6]
 8002656:	89bb      	ldrh	r3, [r7, #12]
 8002658:	4413      	add	r3, r2
 800265a:	b29b      	uxth	r3, r3
 800265c:	7afa      	ldrb	r2, [r7, #11]
 800265e:	89f9      	ldrh	r1, [r7, #14]
 8002660:	4618      	mov	r0, r3
 8002662:	f001 fa7b 	bl	8003b5c <UB_VGA_SetPixel>
			UB_VGA_SetPixel(x1 + xlength - t, i, col);
 8002666:	88fa      	ldrh	r2, [r7, #6]
 8002668:	887b      	ldrh	r3, [r7, #2]
 800266a:	4413      	add	r3, r2
 800266c:	b29a      	uxth	r2, r3
 800266e:	89bb      	ldrh	r3, [r7, #12]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	b29b      	uxth	r3, r3
 8002674:	7afa      	ldrb	r2, [r7, #11]
 8002676:	89f9      	ldrh	r1, [r7, #14]
 8002678:	4618      	mov	r0, r3
 800267a:	f001 fa6f 	bl	8003b5c <UB_VGA_SetPixel>
		for (t=0; t<(tx); t++) {
 800267e:	89bb      	ldrh	r3, [r7, #12]
 8002680:	3301      	adds	r3, #1
 8002682:	81bb      	strh	r3, [r7, #12]
 8002684:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002688:	b29b      	uxth	r3, r3
 800268a:	89ba      	ldrh	r2, [r7, #12]
 800268c:	429a      	cmp	r2, r3
 800268e:	d3e1      	bcc.n	8002654 <rectangular_thick+0xe0>
	for (i=y1; i<y1 + ylength; i++) {
 8002690:	89fb      	ldrh	r3, [r7, #14]
 8002692:	3301      	adds	r3, #1
 8002694:	81fb      	strh	r3, [r7, #14]
 8002696:	89fa      	ldrh	r2, [r7, #14]
 8002698:	88b9      	ldrh	r1, [r7, #4]
 800269a:	883b      	ldrh	r3, [r7, #0]
 800269c:	440b      	add	r3, r1
 800269e:	429a      	cmp	r2, r3
 80026a0:	dbd5      	blt.n	800264e <rectangular_thick+0xda>
		}
	}

	return 5;
 80026a2:	2305      	movs	r3, #5
};
 80026a4:	4618      	mov	r0, r3
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd90      	pop	{r4, r7, pc}

080026ac <rectangular_filled>:

uint8_t rectangular_filled(uint16_t x1, uint16_t y1, uint16_t xlength, uint16_t ylength, char color[16])
{
 80026ac:	b590      	push	{r4, r7, lr}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4604      	mov	r4, r0
 80026b4:	4608      	mov	r0, r1
 80026b6:	4611      	mov	r1, r2
 80026b8:	461a      	mov	r2, r3
 80026ba:	4623      	mov	r3, r4
 80026bc:	80fb      	strh	r3, [r7, #6]
 80026be:	4603      	mov	r3, r0
 80026c0:	80bb      	strh	r3, [r7, #4]
 80026c2:	460b      	mov	r3, r1
 80026c4:	807b      	strh	r3, [r7, #2]
 80026c6:	4613      	mov	r3, r2
 80026c8:	803b      	strh	r3, [r7, #0]
	UART_puts("\nRectangular_filled\nX1\tY1\txLength\tyLength\tColor");
	len = sizeof(x1) + sizeof(y1) + sizeof(xlength) + sizeof(ylength) + strlen(color) + 1;
	UART_printf(len + 5, "\n%d\t%d\t%d\t%d\t%s", x1, y1, xlength, ylength, color);
	#endif

	uint8_t col = change_col(color);
 80026ca:	6a38      	ldr	r0, [r7, #32]
 80026cc:	f7ff fade 	bl	8001c8c <change_col>
 80026d0:	4603      	mov	r3, r0
 80026d2:	72fb      	strb	r3, [r7, #11]

	// Out of screen
	if (x1 + xlength > VGA_DISPLAY_X)	xlength = -x1 - VGA_DISPLAY_X;
 80026d4:	88fa      	ldrh	r2, [r7, #6]
 80026d6:	887b      	ldrh	r3, [r7, #2]
 80026d8:	4413      	add	r3, r2
 80026da:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80026de:	dd08      	ble.n	80026f2 <rectangular_filled+0x46>
 80026e0:	88fb      	ldrh	r3, [r7, #6]
 80026e2:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80026e6:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80026ea:	f503 437e 	add.w	r3, r3, #65024	; 0xfe00
 80026ee:	33c0      	adds	r3, #192	; 0xc0
 80026f0:	807b      	strh	r3, [r7, #2]
	if (y1 + ylength > VGA_DISPLAY_Y)	ylength = -y1 - VGA_DISPLAY_Y;
 80026f2:	88ba      	ldrh	r2, [r7, #4]
 80026f4:	883b      	ldrh	r3, [r7, #0]
 80026f6:	4413      	add	r3, r2
 80026f8:	2bf0      	cmp	r3, #240	; 0xf0
 80026fa:	dd06      	ble.n	800270a <rectangular_filled+0x5e>
 80026fc:	88bb      	ldrh	r3, [r7, #4]
 80026fe:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8002702:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8002706:	3310      	adds	r3, #16
 8002708:	803b      	strh	r3, [r7, #0]

	int16_t x, y;
		for (x=x1; x<x1 + xlength; x++) {
 800270a:	88fb      	ldrh	r3, [r7, #6]
 800270c:	81fb      	strh	r3, [r7, #14]
 800270e:	e01b      	b.n	8002748 <rectangular_filled+0x9c>
			for (y=y1; y<y1 + ylength; y++) {
 8002710:	88bb      	ldrh	r3, [r7, #4]
 8002712:	81bb      	strh	r3, [r7, #12]
 8002714:	e00b      	b.n	800272e <rectangular_filled+0x82>
				UB_VGA_SetPixel(x, y, col);
 8002716:	89fb      	ldrh	r3, [r7, #14]
 8002718:	89b9      	ldrh	r1, [r7, #12]
 800271a:	7afa      	ldrb	r2, [r7, #11]
 800271c:	4618      	mov	r0, r3
 800271e:	f001 fa1d 	bl	8003b5c <UB_VGA_SetPixel>
			for (y=y1; y<y1 + ylength; y++) {
 8002722:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002726:	b29b      	uxth	r3, r3
 8002728:	3301      	adds	r3, #1
 800272a:	b29b      	uxth	r3, r3
 800272c:	81bb      	strh	r3, [r7, #12]
 800272e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002732:	88b9      	ldrh	r1, [r7, #4]
 8002734:	883b      	ldrh	r3, [r7, #0]
 8002736:	440b      	add	r3, r1
 8002738:	429a      	cmp	r2, r3
 800273a:	dbec      	blt.n	8002716 <rectangular_filled+0x6a>
		for (x=x1; x<x1 + xlength; x++) {
 800273c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002740:	b29b      	uxth	r3, r3
 8002742:	3301      	adds	r3, #1
 8002744:	b29b      	uxth	r3, r3
 8002746:	81fb      	strh	r3, [r7, #14]
 8002748:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800274c:	88f9      	ldrh	r1, [r7, #6]
 800274e:	887b      	ldrh	r3, [r7, #2]
 8002750:	440b      	add	r3, r1
 8002752:	429a      	cmp	r2, r3
 8002754:	dbdc      	blt.n	8002710 <rectangular_filled+0x64>
		}
	}

	return 6;
 8002756:	2306      	movs	r3, #6
};
 8002758:	4618      	mov	r0, r3
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	bd90      	pop	{r4, r7, pc}

08002760 <triangle>:

uint8_t triangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t x3, int16_t y3, char color[16])
{
 8002760:	b590      	push	{r4, r7, lr}
 8002762:	b085      	sub	sp, #20
 8002764:	af02      	add	r7, sp, #8
 8002766:	4604      	mov	r4, r0
 8002768:	4608      	mov	r0, r1
 800276a:	4611      	mov	r1, r2
 800276c:	461a      	mov	r2, r3
 800276e:	4623      	mov	r3, r4
 8002770:	80fb      	strh	r3, [r7, #6]
 8002772:	4603      	mov	r3, r0
 8002774:	80bb      	strh	r3, [r7, #4]
 8002776:	460b      	mov	r3, r1
 8002778:	807b      	strh	r3, [r7, #2]
 800277a:	4613      	mov	r3, r2
 800277c:	803b      	strh	r3, [r7, #0]
	lijn(x1,y1,x2,y2,color);
 800277e:	f9b7 4000 	ldrsh.w	r4, [r7]
 8002782:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002786:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800278a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	4623      	mov	r3, r4
 8002794:	f7ff fd10 	bl	80021b8 <lijn>
	lijn(x2,y2,x3,y3,color);
 8002798:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 800279c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80027a0:	f9b7 1000 	ldrsh.w	r1, [r7]
 80027a4:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	4623      	mov	r3, r4
 80027ae:	f7ff fd03 	bl	80021b8 <lijn>
	lijn(x3,y3,x1,y1,color);
 80027b2:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80027b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80027ba:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 80027be:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	4623      	mov	r3, r4
 80027c8:	f7ff fcf6 	bl	80021b8 <lijn>
	return 7;
 80027cc:	2307      	movs	r3, #7
};
 80027ce:	4618      	mov	r0, r3
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd90      	pop	{r4, r7, pc}
	...

080027d8 <triangle_filled>:

uint8_t triangle_filled(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t x3, int16_t y3, char color[16])
{
 80027d8:	b590      	push	{r4, r7, lr}
 80027da:	b095      	sub	sp, #84	; 0x54
 80027dc:	af02      	add	r7, sp, #8
 80027de:	4604      	mov	r4, r0
 80027e0:	4608      	mov	r0, r1
 80027e2:	4611      	mov	r1, r2
 80027e4:	461a      	mov	r2, r3
 80027e6:	4623      	mov	r3, r4
 80027e8:	81fb      	strh	r3, [r7, #14]
 80027ea:	4603      	mov	r3, r0
 80027ec:	81bb      	strh	r3, [r7, #12]
 80027ee:	460b      	mov	r3, r1
 80027f0:	817b      	strh	r3, [r7, #10]
 80027f2:	4613      	mov	r3, r2
 80027f4:	813b      	strh	r3, [r7, #8]
	char beffer[20];
	float x_r = x2-x1;
 80027f6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80027fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	ee07 3a90 	vmov	s15, r3
 8002804:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002808:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	UART_puts("\nXr: ");	itoa(x_r,beffer,10);	UART_puts(beffer);
 800280c:	48a0      	ldr	r0, [pc, #640]	; (8002a90 <triangle_filled+0x2b8>)
 800280e:	f000 ff19 	bl	8003644 <UART_puts>
 8002812:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002816:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800281a:	f107 0314 	add.w	r3, r7, #20
 800281e:	220a      	movs	r2, #10
 8002820:	4619      	mov	r1, r3
 8002822:	ee17 0a90 	vmov	r0, s15
 8002826:	f001 febf 	bl	80045a8 <itoa>
 800282a:	f107 0314 	add.w	r3, r7, #20
 800282e:	4618      	mov	r0, r3
 8002830:	f000 ff08 	bl	8003644 <UART_puts>
	float y_r = y2-y1;
 8002834:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002838:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	ee07 3a90 	vmov	s15, r3
 8002842:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002846:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

	UART_puts("\nyr: ");	itoa(y_r,beffer,10);	UART_puts(beffer);
 800284a:	4892      	ldr	r0, [pc, #584]	; (8002a94 <triangle_filled+0x2bc>)
 800284c:	f000 fefa 	bl	8003644 <UART_puts>
 8002850:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002854:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002858:	f107 0314 	add.w	r3, r7, #20
 800285c:	220a      	movs	r2, #10
 800285e:	4619      	mov	r1, r3
 8002860:	ee17 0a90 	vmov	r0, s15
 8002864:	f001 fea0 	bl	80045a8 <itoa>
 8002868:	f107 0314 	add.w	r3, r7, #20
 800286c:	4618      	mov	r0, r3
 800286e:	f000 fee9 	bl	8003644 <UART_puts>
	float rc = (y_r/x_r);
 8002872:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8002876:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800287a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800287e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

 	int rcc = rc*10;
 8002882:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002886:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800288a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800288e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002892:	ee17 3a90 	vmov	r3, s15
 8002896:	633b      	str	r3, [r7, #48]	; 0x30
	UART_puts("\nRC: ");	itoa(rcc,beffer,10);	UART_puts(beffer);
 8002898:	487f      	ldr	r0, [pc, #508]	; (8002a98 <triangle_filled+0x2c0>)
 800289a:	f000 fed3 	bl	8003644 <UART_puts>
 800289e:	f107 0314 	add.w	r3, r7, #20
 80028a2:	220a      	movs	r2, #10
 80028a4:	4619      	mov	r1, r3
 80028a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028a8:	f001 fe7e 	bl	80045a8 <itoa>
 80028ac:	f107 0314 	add.w	r3, r7, #20
 80028b0:	4618      	mov	r0, r3
 80028b2:	f000 fec7 	bl	8003644 <UART_puts>
	if(x_r<0){
 80028b6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80028ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028c2:	d56a      	bpl.n	800299a <triangle_filled+0x1c2>
		for(int i=(x_r*10); i< 0; i++){
 80028c4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80028c8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80028cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028d4:	ee17 3a90 	vmov	r3, s15
 80028d8:	647b      	str	r3, [r7, #68]	; 0x44
 80028da:	e05b      	b.n	8002994 <triangle_filled+0x1bc>

			float yy= ((i/10)*rc)+y1; // casten misschien?
 80028dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028de:	4a6f      	ldr	r2, [pc, #444]	; (8002a9c <triangle_filled+0x2c4>)
 80028e0:	fb82 1203 	smull	r1, r2, r2, r3
 80028e4:	1092      	asrs	r2, r2, #2
 80028e6:	17db      	asrs	r3, r3, #31
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	ee07 3a90 	vmov	s15, r3
 80028ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028f2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80028f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028fa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80028fe:	ee07 3a90 	vmov	s15, r3
 8002902:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002906:	ee77 7a27 	vadd.f32	s15, s14, s15
 800290a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			UART_puts("\nX: ");	itoa(i,beffer,10);	UART_puts(beffer);
 800290e:	4864      	ldr	r0, [pc, #400]	; (8002aa0 <triangle_filled+0x2c8>)
 8002910:	f000 fe98 	bl	8003644 <UART_puts>
 8002914:	f107 0314 	add.w	r3, r7, #20
 8002918:	220a      	movs	r2, #10
 800291a:	4619      	mov	r1, r3
 800291c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800291e:	f001 fe43 	bl	80045a8 <itoa>
 8002922:	f107 0314 	add.w	r3, r7, #20
 8002926:	4618      	mov	r0, r3
 8002928:	f000 fe8c 	bl	8003644 <UART_puts>
			UART_puts("\nY: ");	itoa(yy,beffer,10);	UART_puts(beffer);
 800292c:	485d      	ldr	r0, [pc, #372]	; (8002aa4 <triangle_filled+0x2cc>)
 800292e:	f000 fe89 	bl	8003644 <UART_puts>
 8002932:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002936:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800293a:	f107 0314 	add.w	r3, r7, #20
 800293e:	220a      	movs	r2, #10
 8002940:	4619      	mov	r1, r3
 8002942:	ee17 0a90 	vmov	r0, s15
 8002946:	f001 fe2f 	bl	80045a8 <itoa>
 800294a:	f107 0314 	add.w	r3, r7, #20
 800294e:	4618      	mov	r0, r3
 8002950:	f000 fe78 	bl	8003644 <UART_puts>
			//UART_puts("\nx: ");	itoa(x_rc,beffer,10);	UART_puts(beffer);
			//UART_puts("\ny: ");	itoa(y_rc,beffer,10);	UART_puts(beffer);
			lijn(((i/10)+x1),yy,x3,y3,color);
 8002954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002956:	4a51      	ldr	r2, [pc, #324]	; (8002a9c <triangle_filled+0x2c4>)
 8002958:	fb82 1203 	smull	r1, r2, r2, r3
 800295c:	1092      	asrs	r2, r2, #2
 800295e:	17db      	asrs	r3, r3, #31
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	b29a      	uxth	r2, r3
 8002964:	89fb      	ldrh	r3, [r7, #14]
 8002966:	4413      	add	r3, r2
 8002968:	b29b      	uxth	r3, r3
 800296a:	b218      	sxth	r0, r3
 800296c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002970:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002974:	edc7 7a01 	vstr	s15, [r7, #4]
 8002978:	88bb      	ldrh	r3, [r7, #4]
 800297a:	b219      	sxth	r1, r3
 800297c:	f9b7 405c 	ldrsh.w	r4, [r7, #92]	; 0x5c
 8002980:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 8002984:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	4623      	mov	r3, r4
 800298a:	f7ff fc15 	bl	80021b8 <lijn>
		for(int i=(x_r*10); i< 0; i++){
 800298e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002990:	3301      	adds	r3, #1
 8002992:	647b      	str	r3, [r7, #68]	; 0x44
 8002994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002996:	2b00      	cmp	r3, #0
 8002998:	dba0      	blt.n	80028dc <triangle_filled+0x104>
		}
	}
	if(x_r>0){
 800299a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800299e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029a6:	dd6e      	ble.n	8002a86 <triangle_filled+0x2ae>
		for(int i=0; i<(x_r*10); i++){
 80029a8:	2300      	movs	r3, #0
 80029aa:	643b      	str	r3, [r7, #64]	; 0x40
 80029ac:	e05b      	b.n	8002a66 <triangle_filled+0x28e>

			float yy= ((i/10)*rc)+y1; // casten misschien?
 80029ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029b0:	4a3a      	ldr	r2, [pc, #232]	; (8002a9c <triangle_filled+0x2c4>)
 80029b2:	fb82 1203 	smull	r1, r2, r2, r3
 80029b6:	1092      	asrs	r2, r2, #2
 80029b8:	17db      	asrs	r3, r3, #31
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	ee07 3a90 	vmov	s15, r3
 80029c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029c4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80029c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80029d0:	ee07 3a90 	vmov	s15, r3
 80029d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029dc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			UART_puts("\nX: ");	itoa(i,beffer,10);	UART_puts(beffer);
 80029e0:	482f      	ldr	r0, [pc, #188]	; (8002aa0 <triangle_filled+0x2c8>)
 80029e2:	f000 fe2f 	bl	8003644 <UART_puts>
 80029e6:	f107 0314 	add.w	r3, r7, #20
 80029ea:	220a      	movs	r2, #10
 80029ec:	4619      	mov	r1, r3
 80029ee:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80029f0:	f001 fdda 	bl	80045a8 <itoa>
 80029f4:	f107 0314 	add.w	r3, r7, #20
 80029f8:	4618      	mov	r0, r3
 80029fa:	f000 fe23 	bl	8003644 <UART_puts>
			UART_puts("\nY: ");	itoa(yy,beffer,10);	UART_puts(beffer);
 80029fe:	4829      	ldr	r0, [pc, #164]	; (8002aa4 <triangle_filled+0x2cc>)
 8002a00:	f000 fe20 	bl	8003644 <UART_puts>
 8002a04:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002a08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a0c:	f107 0314 	add.w	r3, r7, #20
 8002a10:	220a      	movs	r2, #10
 8002a12:	4619      	mov	r1, r3
 8002a14:	ee17 0a90 	vmov	r0, s15
 8002a18:	f001 fdc6 	bl	80045a8 <itoa>
 8002a1c:	f107 0314 	add.w	r3, r7, #20
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 fe0f 	bl	8003644 <UART_puts>
			//UART_puts("\nx: ");	itoa(x_rc,beffer,10);	UART_puts(beffer);
			//UART_puts("\ny: ");	itoa(y_rc,beffer,10);	UART_puts(beffer);
			lijn(((i/10)+x1),yy,x3,y3,color);
 8002a26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a28:	4a1c      	ldr	r2, [pc, #112]	; (8002a9c <triangle_filled+0x2c4>)
 8002a2a:	fb82 1203 	smull	r1, r2, r2, r3
 8002a2e:	1092      	asrs	r2, r2, #2
 8002a30:	17db      	asrs	r3, r3, #31
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	89fb      	ldrh	r3, [r7, #14]
 8002a38:	4413      	add	r3, r2
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	b218      	sxth	r0, r3
 8002a3e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002a42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a46:	edc7 7a01 	vstr	s15, [r7, #4]
 8002a4a:	88bb      	ldrh	r3, [r7, #4]
 8002a4c:	b219      	sxth	r1, r3
 8002a4e:	f9b7 405c 	ldrsh.w	r4, [r7, #92]	; 0x5c
 8002a52:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 8002a56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	4623      	mov	r3, r4
 8002a5c:	f7ff fbac 	bl	80021b8 <lijn>
		for(int i=0; i<(x_r*10); i++){
 8002a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a62:	3301      	adds	r3, #1
 8002a64:	643b      	str	r3, [r7, #64]	; 0x40
 8002a66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a68:	ee07 3a90 	vmov	s15, r3
 8002a6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a70:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002a74:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002a78:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a84:	d493      	bmi.n	80029ae <triangle_filled+0x1d6>
		}
	}

	return 13;
 8002a86:	230d      	movs	r3, #13
};
 8002a88:	4618      	mov	r0, r3
 8002a8a:	374c      	adds	r7, #76	; 0x4c
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd90      	pop	{r4, r7, pc}
 8002a90:	08004e24 	.word	0x08004e24
 8002a94:	08004e2c 	.word	0x08004e2c
 8002a98:	08004e34 	.word	0x08004e34
 8002a9c:	66666667 	.word	0x66666667
 8002aa0:	08004e3c 	.word	0x08004e3c
 8002aa4:	08004e44 	.word	0x08004e44

08002aa8 <print_char>:

uint8_t print_char(int16_t x1, int16_t y1, uint8_t chr, char color[16], char font[16])
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	607b      	str	r3, [r7, #4]
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	81fb      	strh	r3, [r7, #14]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	81bb      	strh	r3, [r7, #12]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	72fb      	strb	r3, [r7, #11]
	size_t len;
	UART_puts("\nPrint_char\nX1\tY1\tChar\tColor\tFont");
	len = sizeof(x1) + sizeof(y1) + 1 + strlen(color) + strlen(font) + 1;
	UART_printf(len + 5, "\n%d\t%d\t%c\t%s\t%s", x1, y1, chr, color, font);
	#endif
	uint8_t col = change_col(color);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7ff f8e5 	bl	8001c8c <change_col>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	747b      	strb	r3, [r7, #17]
	uint8_t set;
	uint8_t size = 8; // font size (h and v)
 8002ac6:	2308      	movs	r3, #8
 8002ac8:	743b      	strb	r3, [r7, #16]
	uint16_t x, y;

	// Offscreen
	if (x1 < 0 || x1 > (VGA_DISPLAY_X - size)) return 81;
 8002aca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	db06      	blt.n	8002ae0 <print_char+0x38>
 8002ad2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002ad6:	7c3b      	ldrb	r3, [r7, #16]
 8002ad8:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8002adc:	429a      	cmp	r2, r3
 8002ade:	dd01      	ble.n	8002ae4 <print_char+0x3c>
 8002ae0:	2351      	movs	r3, #81	; 0x51
 8002ae2:	e08c      	b.n	8002bfe <print_char+0x156>
	if (y1 < 0 || y1 > (VGA_DISPLAY_Y - size)) return 82;
 8002ae4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	db06      	blt.n	8002afa <print_char+0x52>
 8002aec:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002af0:	7c3b      	ldrb	r3, [r7, #16]
 8002af2:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002af6:	429a      	cmp	r2, r3
 8002af8:	dd01      	ble.n	8002afe <print_char+0x56>
 8002afa:	2352      	movs	r3, #82	; 0x52
 8002afc:	e07f      	b.n	8002bfe <print_char+0x156>
	y = 0;
 8002afe:	2300      	movs	r3, #0
 8002b00:	827b      	strh	r3, [r7, #18]

	for (x = 0; x < size; x++) { // Horizontal, x-- results into flipping
 8002b02:	2300      	movs	r3, #0
 8002b04:	82bb      	strh	r3, [r7, #20]
 8002b06:	e074      	b.n	8002bf2 <print_char+0x14a>
		for (y = 0; y < size; y++) { // Vertical
 8002b08:	2300      	movs	r3, #0
 8002b0a:	827b      	strh	r3, [r7, #18]
 8002b0c:	e069      	b.n	8002be2 <print_char+0x13a>
			if (strcmp(font, "greek") == 0)
 8002b0e:	493e      	ldr	r1, [pc, #248]	; (8002c08 <print_char+0x160>)
 8002b10:	6a38      	ldr	r0, [r7, #32]
 8002b12:	f7fd fb59 	bl	80001c8 <strcmp>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d110      	bne.n	8002b3e <print_char+0x96>
				set = font8x8_greek[chr][x] & 1 << y;
 8002b1c:	7afa      	ldrb	r2, [r7, #11]
 8002b1e:	8abb      	ldrh	r3, [r7, #20]
 8002b20:	493a      	ldr	r1, [pc, #232]	; (8002c0c <print_char+0x164>)
 8002b22:	00d2      	lsls	r2, r2, #3
 8002b24:	440a      	add	r2, r1
 8002b26:	4413      	add	r3, r2
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	b25a      	sxtb	r2, r3
 8002b2c:	8a7b      	ldrh	r3, [r7, #18]
 8002b2e:	2101      	movs	r1, #1
 8002b30:	fa01 f303 	lsl.w	r3, r1, r3
 8002b34:	b25b      	sxtb	r3, r3
 8002b36:	4013      	ands	r3, r2
 8002b38:	b25b      	sxtb	r3, r3
 8002b3a:	75fb      	strb	r3, [r7, #23]
 8002b3c:	e03f      	b.n	8002bbe <print_char+0x116>
			else if (strcmp(font, "cursief") == 0)
 8002b3e:	4934      	ldr	r1, [pc, #208]	; (8002c10 <print_char+0x168>)
 8002b40:	6a38      	ldr	r0, [r7, #32]
 8002b42:	f7fd fb41 	bl	80001c8 <strcmp>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d110      	bne.n	8002b6e <print_char+0xc6>
				set = arial8x8_italic[chr][x] & 1 << y;
 8002b4c:	7afa      	ldrb	r2, [r7, #11]
 8002b4e:	8abb      	ldrh	r3, [r7, #20]
 8002b50:	4930      	ldr	r1, [pc, #192]	; (8002c14 <print_char+0x16c>)
 8002b52:	00d2      	lsls	r2, r2, #3
 8002b54:	4413      	add	r3, r2
 8002b56:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002b5a:	b25a      	sxtb	r2, r3
 8002b5c:	8a7b      	ldrh	r3, [r7, #18]
 8002b5e:	2101      	movs	r1, #1
 8002b60:	fa01 f303 	lsl.w	r3, r1, r3
 8002b64:	b25b      	sxtb	r3, r3
 8002b66:	4013      	ands	r3, r2
 8002b68:	b25b      	sxtb	r3, r3
 8002b6a:	75fb      	strb	r3, [r7, #23]
 8002b6c:	e027      	b.n	8002bbe <print_char+0x116>
			else if (strcmp(font, "vet") == 0)
 8002b6e:	492a      	ldr	r1, [pc, #168]	; (8002c18 <print_char+0x170>)
 8002b70:	6a38      	ldr	r0, [r7, #32]
 8002b72:	f7fd fb29 	bl	80001c8 <strcmp>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d110      	bne.n	8002b9e <print_char+0xf6>
				set = arial8x8_black[chr][x] & 1 << y;
 8002b7c:	7afa      	ldrb	r2, [r7, #11]
 8002b7e:	8abb      	ldrh	r3, [r7, #20]
 8002b80:	4926      	ldr	r1, [pc, #152]	; (8002c1c <print_char+0x174>)
 8002b82:	00d2      	lsls	r2, r2, #3
 8002b84:	4413      	add	r3, r2
 8002b86:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002b8a:	b25a      	sxtb	r2, r3
 8002b8c:	8a7b      	ldrh	r3, [r7, #18]
 8002b8e:	2101      	movs	r1, #1
 8002b90:	fa01 f303 	lsl.w	r3, r1, r3
 8002b94:	b25b      	sxtb	r3, r3
 8002b96:	4013      	ands	r3, r2
 8002b98:	b25b      	sxtb	r3, r3
 8002b9a:	75fb      	strb	r3, [r7, #23]
 8002b9c:	e00f      	b.n	8002bbe <print_char+0x116>
			else // Normal font
				set = arial8x8_regular[chr][x] & 1 << y;
 8002b9e:	7afa      	ldrb	r2, [r7, #11]
 8002ba0:	8abb      	ldrh	r3, [r7, #20]
 8002ba2:	491f      	ldr	r1, [pc, #124]	; (8002c20 <print_char+0x178>)
 8002ba4:	00d2      	lsls	r2, r2, #3
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002bac:	b25a      	sxtb	r2, r3
 8002bae:	8a7b      	ldrh	r3, [r7, #18]
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb6:	b25b      	sxtb	r3, r3
 8002bb8:	4013      	ands	r3, r2
 8002bba:	b25b      	sxtb	r3, r3
 8002bbc:	75fb      	strb	r3, [r7, #23]
			if (set)
 8002bbe:	7dfb      	ldrb	r3, [r7, #23]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00b      	beq.n	8002bdc <print_char+0x134>
				UB_VGA_SetPixel(x1 + y, y1 + x, col);
 8002bc4:	89fa      	ldrh	r2, [r7, #14]
 8002bc6:	8a7b      	ldrh	r3, [r7, #18]
 8002bc8:	4413      	add	r3, r2
 8002bca:	b298      	uxth	r0, r3
 8002bcc:	89ba      	ldrh	r2, [r7, #12]
 8002bce:	8abb      	ldrh	r3, [r7, #20]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	7c7a      	ldrb	r2, [r7, #17]
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	f000 ffc0 	bl	8003b5c <UB_VGA_SetPixel>
		for (y = 0; y < size; y++) { // Vertical
 8002bdc:	8a7b      	ldrh	r3, [r7, #18]
 8002bde:	3301      	adds	r3, #1
 8002be0:	827b      	strh	r3, [r7, #18]
 8002be2:	7c3b      	ldrb	r3, [r7, #16]
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	8a7a      	ldrh	r2, [r7, #18]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d390      	bcc.n	8002b0e <print_char+0x66>
	for (x = 0; x < size; x++) { // Horizontal, x-- results into flipping
 8002bec:	8abb      	ldrh	r3, [r7, #20]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	82bb      	strh	r3, [r7, #20]
 8002bf2:	7c3b      	ldrb	r3, [r7, #16]
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	8aba      	ldrh	r2, [r7, #20]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d385      	bcc.n	8002b08 <print_char+0x60>
		}
	}

	return 8;
 8002bfc:	2308      	movs	r3, #8
};
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3718      	adds	r7, #24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	08004e4c 	.word	0x08004e4c
 8002c0c:	20000010 	.word	0x20000010
 8002c10:	08004e54 	.word	0x08004e54
 8002c14:	08008750 	.word	0x08008750
 8002c18:	08004e5c 	.word	0x08004e5c
 8002c1c:	08007f50 	.word	0x08007f50
 8002c20:	08008f50 	.word	0x08008f50

08002c24 <print_text>:

uint8_t print_text(int16_t x1, int16_t y1, char str[], char color[16], char font[16])
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b08a      	sub	sp, #40	; 0x28
 8002c28:	af02      	add	r7, sp, #8
 8002c2a:	60ba      	str	r2, [r7, #8]
 8002c2c:	607b      	str	r3, [r7, #4]
 8002c2e:	4603      	mov	r3, r0
 8002c30:	81fb      	strh	r3, [r7, #14]
 8002c32:	460b      	mov	r3, r1
 8002c34:	81bb      	strh	r3, [r7, #12]
	UART_puts("\nColor\tFont");
	len = strlen(color) + strlen(font) +1;
	UART_printf(len + 2, "\n%s\t%s", color, font);
	#endif

	uint8_t margin = 8; // Display margin
 8002c36:	2308      	movs	r3, #8
 8002c38:	75fb      	strb	r3, [r7, #23]
	uint16_t x = 0;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	83fb      	strh	r3, [r7, #30]
	uint16_t y = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	83bb      	strh	r3, [r7, #28]
	char *p = str;
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	61bb      	str	r3, [r7, #24]
	unsigned char current_char;

	if (x1 < margin) x1 = margin;
 8002c46:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002c4a:	7dfb      	ldrb	r3, [r7, #23]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	da01      	bge.n	8002c54 <print_text+0x30>
 8002c50:	7dfb      	ldrb	r3, [r7, #23]
 8002c52:	81fb      	strh	r3, [r7, #14]
	if (y1 < margin) y1 = margin;
 8002c54:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002c58:	7dfb      	ldrb	r3, [r7, #23]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	da01      	bge.n	8002c62 <print_text+0x3e>
 8002c5e:	7dfb      	ldrb	r3, [r7, #23]
 8002c60:	81bb      	strh	r3, [r7, #12]

	// Offscreen
	if (x1 > (VGA_DISPLAY_X - 8 - margin)) return 91;
 8002c62:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002c66:	7dfb      	ldrb	r3, [r7, #23]
 8002c68:	f5c3 739c 	rsb	r3, r3, #312	; 0x138
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	dd01      	ble.n	8002c74 <print_text+0x50>
 8002c70:	235b      	movs	r3, #91	; 0x5b
 8002c72:	e040      	b.n	8002cf6 <print_text+0xd2>
	if (y1 > (VGA_DISPLAY_Y - 8 - margin)) return 92;
 8002c74:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002c78:	7dfb      	ldrb	r3, [r7, #23]
 8002c7a:	f1c3 03e8 	rsb	r3, r3, #232	; 0xe8
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	dd34      	ble.n	8002cec <print_text+0xc8>
 8002c82:	235c      	movs	r3, #92	; 0x5c
 8002c84:	e037      	b.n	8002cf6 <print_text+0xd2>

	while (*p) {
		current_char = *p++; // Take current char and increment it for the next char
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	1c5a      	adds	r2, r3, #1
 8002c8a:	61ba      	str	r2, [r7, #24]
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	75bb      	strb	r3, [r7, #22]
		print_char(x1 + x, y1 + y, current_char, color, font);
 8002c90:	89fa      	ldrh	r2, [r7, #14]
 8002c92:	8bfb      	ldrh	r3, [r7, #30]
 8002c94:	4413      	add	r3, r2
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	b218      	sxth	r0, r3
 8002c9a:	89ba      	ldrh	r2, [r7, #12]
 8002c9c:	8bbb      	ldrh	r3, [r7, #28]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	b219      	sxth	r1, r3
 8002ca4:	7dba      	ldrb	r2, [r7, #22]
 8002ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f7ff fefc 	bl	8002aa8 <print_char>

		// Next character and next line
		if ((x + x1) < (VGA_DISPLAY_X - 8 - margin)) // 8 because the font size is 8 wide
 8002cb0:	8bfa      	ldrh	r2, [r7, #30]
 8002cb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cb6:	441a      	add	r2, r3
 8002cb8:	7dfb      	ldrb	r3, [r7, #23]
 8002cba:	f5c3 739c 	rsb	r3, r3, #312	; 0x138
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	da03      	bge.n	8002cca <print_text+0xa6>
			x += 8; // No spacing needed
 8002cc2:	8bfb      	ldrh	r3, [r7, #30]
 8002cc4:	3308      	adds	r3, #8
 8002cc6:	83fb      	strh	r3, [r7, #30]
 8002cc8:	e010      	b.n	8002cec <print_text+0xc8>
		else {
			x = 0; // cursor position;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	83fb      	strh	r3, [r7, #30]
			if ((y + y1) < (VGA_DISPLAY_Y - 8 - margin))
 8002cce:	8bba      	ldrh	r2, [r7, #28]
 8002cd0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002cd4:	441a      	add	r2, r3
 8002cd6:	7dfb      	ldrb	r3, [r7, #23]
 8002cd8:	f1c3 03e8 	rsb	r3, r3, #232	; 0xe8
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	da03      	bge.n	8002ce8 <print_text+0xc4>
				y += 9; // 8 rows, 1 pixel spacing
 8002ce0:	8bbb      	ldrh	r3, [r7, #28]
 8002ce2:	3309      	adds	r3, #9
 8002ce4:	83bb      	strh	r3, [r7, #28]
 8002ce6:	e001      	b.n	8002cec <print_text+0xc8>
			else
				y = 0; // Error, off screen!
 8002ce8:	2300      	movs	r3, #0
 8002cea:	83bb      	strh	r3, [r7, #28]
	while (*p) {
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1c8      	bne.n	8002c86 <print_text+0x62>
		}
	}
	return 9;
 8002cf4:	2309      	movs	r3, #9
};
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3720      	adds	r7, #32
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
	...

08002d00 <bitmap>:

uint8_t bitmap(uint8_t bitmap, int16_t x1, int16_t y1, uint8_t trans)
{
 8002d00:	b590      	push	{r4, r7, lr}
 8002d02:	b087      	sub	sp, #28
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4604      	mov	r4, r0
 8002d08:	4608      	mov	r0, r1
 8002d0a:	4611      	mov	r1, r2
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	4623      	mov	r3, r4
 8002d10:	71fb      	strb	r3, [r7, #7]
 8002d12:	4603      	mov	r3, r0
 8002d14:	80bb      	strh	r3, [r7, #4]
 8002d16:	460b      	mov	r3, r1
 8002d18:	807b      	strh	r3, [r7, #2]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	71bb      	strb	r3, [r7, #6]
	UART_putint(trans);
	UART_puts("\n");
	#endif
	// This version can only print bitmaps that are squared
	uint16_t x, y;
	uint16_t size = sizeof(bitmaps[bitmap]) / sizeof(bitmaps[bitmap][0]); // Amount of pixels
 8002d1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d22:	827b      	strh	r3, [r7, #18]
	uint16_t x_p = sqrt(size); // Amount of pixels on the x-axis
 8002d24:	8a7b      	ldrh	r3, [r7, #18]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fd fba2 	bl	8000470 <__aeabi_ui2d>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	460c      	mov	r4, r1
 8002d30:	ec44 3b10 	vmov	d0, r3, r4
 8002d34:	f001 fed4 	bl	8004ae0 <sqrt>
 8002d38:	ec54 3b10 	vmov	r3, r4, d0
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	4621      	mov	r1, r4
 8002d40:	f7fd febc 	bl	8000abc <__aeabi_d2uiz>
 8002d44:	4603      	mov	r3, r0
 8002d46:	823b      	strh	r3, [r7, #16]
	uint16_t y_p = x_p; // Amount of pixels on the y-axis
 8002d48:	8a3b      	ldrh	r3, [r7, #16]
 8002d4a:	81fb      	strh	r3, [r7, #14]

	for (x = 0; x < x_p; x++) {
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	82fb      	strh	r3, [r7, #22]
 8002d50:	e04e      	b.n	8002df0 <bitmap+0xf0>
		for (y = 0; y < y_p; y++) {
 8002d52:	2300      	movs	r3, #0
 8002d54:	82bb      	strh	r3, [r7, #20]
 8002d56:	e044      	b.n	8002de2 <bitmap+0xe2>
			if (trans == 1) {
 8002d58:	79bb      	ldrb	r3, [r7, #6]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d122      	bne.n	8002da4 <bitmap+0xa4>
				if (bitmaps[bitmap][size] != 0) // 0 == 0x00, black screen
 8002d5e:	79fa      	ldrb	r2, [r7, #7]
 8002d60:	8a7b      	ldrh	r3, [r7, #18]
 8002d62:	4928      	ldr	r1, [pc, #160]	; (8002e04 <bitmap+0x104>)
 8002d64:	0312      	lsls	r2, r2, #12
 8002d66:	440a      	add	r2, r1
 8002d68:	4413      	add	r3, r2
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d032      	beq.n	8002dd6 <bitmap+0xd6>
					UB_VGA_SetPixel(x1 + y_p - y, y1 + x_p - x, bitmaps[bitmap][size]);
 8002d70:	88ba      	ldrh	r2, [r7, #4]
 8002d72:	89fb      	ldrh	r3, [r7, #14]
 8002d74:	4413      	add	r3, r2
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	8abb      	ldrh	r3, [r7, #20]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	b298      	uxth	r0, r3
 8002d7e:	887a      	ldrh	r2, [r7, #2]
 8002d80:	8a3b      	ldrh	r3, [r7, #16]
 8002d82:	4413      	add	r3, r2
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	8afb      	ldrh	r3, [r7, #22]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	b29c      	uxth	r4, r3
 8002d8c:	79fa      	ldrb	r2, [r7, #7]
 8002d8e:	8a7b      	ldrh	r3, [r7, #18]
 8002d90:	491c      	ldr	r1, [pc, #112]	; (8002e04 <bitmap+0x104>)
 8002d92:	0312      	lsls	r2, r2, #12
 8002d94:	440a      	add	r2, r1
 8002d96:	4413      	add	r3, r2
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	4621      	mov	r1, r4
 8002d9e:	f000 fedd 	bl	8003b5c <UB_VGA_SetPixel>
 8002da2:	e018      	b.n	8002dd6 <bitmap+0xd6>
			}
			else
				UB_VGA_SetPixel(x1 + y_p - y, y1 + x_p - x, bitmaps[bitmap][size]);
 8002da4:	88ba      	ldrh	r2, [r7, #4]
 8002da6:	89fb      	ldrh	r3, [r7, #14]
 8002da8:	4413      	add	r3, r2
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	8abb      	ldrh	r3, [r7, #20]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	b298      	uxth	r0, r3
 8002db2:	887a      	ldrh	r2, [r7, #2]
 8002db4:	8a3b      	ldrh	r3, [r7, #16]
 8002db6:	4413      	add	r3, r2
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	8afb      	ldrh	r3, [r7, #22]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	b29c      	uxth	r4, r3
 8002dc0:	79fa      	ldrb	r2, [r7, #7]
 8002dc2:	8a7b      	ldrh	r3, [r7, #18]
 8002dc4:	490f      	ldr	r1, [pc, #60]	; (8002e04 <bitmap+0x104>)
 8002dc6:	0312      	lsls	r2, r2, #12
 8002dc8:	440a      	add	r2, r1
 8002dca:	4413      	add	r3, r2
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	4621      	mov	r1, r4
 8002dd2:	f000 fec3 	bl	8003b5c <UB_VGA_SetPixel>
			size--;
 8002dd6:	8a7b      	ldrh	r3, [r7, #18]
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	827b      	strh	r3, [r7, #18]
		for (y = 0; y < y_p; y++) {
 8002ddc:	8abb      	ldrh	r3, [r7, #20]
 8002dde:	3301      	adds	r3, #1
 8002de0:	82bb      	strh	r3, [r7, #20]
 8002de2:	8aba      	ldrh	r2, [r7, #20]
 8002de4:	89fb      	ldrh	r3, [r7, #14]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d3b6      	bcc.n	8002d58 <bitmap+0x58>
	for (x = 0; x < x_p; x++) {
 8002dea:	8afb      	ldrh	r3, [r7, #22]
 8002dec:	3301      	adds	r3, #1
 8002dee:	82fb      	strh	r3, [r7, #22]
 8002df0:	8afa      	ldrh	r2, [r7, #22]
 8002df2:	8a3b      	ldrh	r3, [r7, #16]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d3ac      	bcc.n	8002d52 <bitmap+0x52>
		}
	}

	return 10;
 8002df8:	230a      	movs	r3, #10
};
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	371c      	adds	r7, #28
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd90      	pop	{r4, r7, pc}
 8002e02:	bf00      	nop
 8002e04:	08004f50 	.word	0x08004f50

08002e08 <DELAY>:

uint8_t DELAY(uint16_t time)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	80fb      	strh	r3, [r7, #6]
	UART_puts("\nDelay\nMilliseconds: ");
	UART_putint(time);
	UART_puts("\n");
	#endif

	DELAY_ms(time);
 8002e12:	88fb      	ldrh	r3, [r7, #6]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 f93f 	bl	8003098 <DELAY_ms>
	return 11;
 8002e1a:	230b      	movs	r3, #11
};
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <fill_screen>:

uint8_t fill_screen(char color[16])
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
	UART_puts("\nFill_screen\nColor: ");
	UART_puts(color);
	UART_puts("\n");
	#endif

	uint8_t col = change_col(color);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f7fe ff2d 	bl	8001c8c <change_col>
 8002e32:	4603      	mov	r3, r0
 8002e34:	73fb      	strb	r3, [r7, #15]

	UB_VGA_FillScreen(col);
 8002e36:	7bfb      	ldrb	r3, [r7, #15]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f000 fe6d 	bl	8003b18 <UB_VGA_FillScreen>
	return 12;
 8002e3e:	230c      	movs	r3, #12
};
 8002e40:	4618      	mov	r0, r3
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <main>:
#include "draw_API.h"

char *version = "API v0.42";

int main(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af04      	add	r7, sp, #16
	//  uint32_t n;

	// Inits
	SystemInit(); // System speed to 168MHz
 8002e4e:	f000 fd71 	bl	8003934 <SystemInit>
	LCD_init();
 8002e52:	f000 f991 	bl	8003178 <LCD_init>
	UART_init();
 8002e56:	f000 fb91 	bl	800357c <UART_init>
	LED_init();
 8002e5a:	f000 fb13 	bl	8003484 <LED_init>
	DELAY_init();
 8002e5e:	f000 f887 	bl	8002f70 <DELAY_init>
	UB_VGA_Screen_Init(); // Init VGA-Screen
 8002e62:	f000 fe19 	bl	8003a98 <UB_VGA_Screen_Init>

	// LEDs
	LED_put(0xFF);
 8002e66:	20ff      	movs	r0, #255	; 0xff
 8002e68:	f000 fb50 	bl	800350c <LED_put>
	DELAY_ms(500);
 8002e6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e70:	f000 f912 	bl	8003098 <DELAY_ms>
	LED_put(0x00);
 8002e74:	2000      	movs	r0, #0
 8002e76:	f000 fb49 	bl	800350c <LED_put>

	// Screen
	UB_VGA_FillScreen(VGA_COL_BLACK);
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	f000 fe4c 	bl	8003b18 <UB_VGA_FillScreen>
	bitmap(0, 10, 10, 1);
 8002e80:	2301      	movs	r3, #1
 8002e82:	220a      	movs	r2, #10
 8002e84:	210a      	movs	r1, #10
 8002e86:	2000      	movs	r0, #0
 8002e88:	f7ff ff3a 	bl	8002d00 <bitmap>
	bitmap(1, 116, 10, 0);
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	220a      	movs	r2, #10
 8002e90:	2174      	movs	r1, #116	; 0x74
 8002e92:	2001      	movs	r0, #1
 8002e94:	f7ff ff34 	bl	8002d00 <bitmap>
	bitmap(2, 222, 80, 0);
 8002e98:	2300      	movs	r3, #0
 8002e9a:	2250      	movs	r2, #80	; 0x50
 8002e9c:	21de      	movs	r1, #222	; 0xde
 8002e9e:	2002      	movs	r0, #2
 8002ea0:	f7ff ff2e 	bl	8002d00 <bitmap>
	ellipse_filled(40, 190, 15, 15, "rood");
 8002ea4:	4b2c      	ldr	r3, [pc, #176]	; (8002f58 <main+0x110>)
 8002ea6:	9300      	str	r3, [sp, #0]
 8002ea8:	230f      	movs	r3, #15
 8002eaa:	220f      	movs	r2, #15
 8002eac:	21be      	movs	r1, #190	; 0xbe
 8002eae:	2028      	movs	r0, #40	; 0x28
 8002eb0:	f7ff fa64 	bl	800237c <ellipse_filled>
	ellipse_filled(80, 190, 15, 15, "rood");
 8002eb4:	4b28      	ldr	r3, [pc, #160]	; (8002f58 <main+0x110>)
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	230f      	movs	r3, #15
 8002eba:	220f      	movs	r2, #15
 8002ebc:	21be      	movs	r1, #190	; 0xbe
 8002ebe:	2050      	movs	r0, #80	; 0x50
 8002ec0:	f7ff fa5c 	bl	800237c <ellipse_filled>
	ellipse_filled(120, 190, 15, 15, "rood");
 8002ec4:	4b24      	ldr	r3, [pc, #144]	; (8002f58 <main+0x110>)
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	230f      	movs	r3, #15
 8002eca:	220f      	movs	r2, #15
 8002ecc:	21be      	movs	r1, #190	; 0xbe
 8002ece:	2078      	movs	r0, #120	; 0x78
 8002ed0:	f7ff fa54 	bl	800237c <ellipse_filled>
	ellipse_filled(160, 190, 15, 15, "rood");
 8002ed4:	4b20      	ldr	r3, [pc, #128]	; (8002f58 <main+0x110>)
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	230f      	movs	r3, #15
 8002eda:	220f      	movs	r2, #15
 8002edc:	21be      	movs	r1, #190	; 0xbe
 8002ede:	20a0      	movs	r0, #160	; 0xa0
 8002ee0:	f7ff fa4c 	bl	800237c <ellipse_filled>

//	ellipse(70,40,40,30,"lichtrood");
	line(100,140,200,120,20,"bruin"); //x1 y1 x2 y2
 8002ee4:	4b1d      	ldr	r3, [pc, #116]	; (8002f5c <main+0x114>)
 8002ee6:	9301      	str	r3, [sp, #4]
 8002ee8:	2314      	movs	r3, #20
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	2378      	movs	r3, #120	; 0x78
 8002eee:	22c8      	movs	r2, #200	; 0xc8
 8002ef0:	218c      	movs	r1, #140	; 0x8c
 8002ef2:	2064      	movs	r0, #100	; 0x64
 8002ef4:	f7fe ffa2 	bl	8001e3c <line>
//	line(80,80,65,94,1,"wit"); //x1 y1 x2 y2
//	line(200,120,160,80,30,"groen");
//	triangle(120,140,80,160,160,190,"wit");
//	triangle_filled(120,140,80,160,160,190,"wit");
//	triangle_filled(80,160,160,190,120,140,"wit");
	triangle_filled(180,180,100,140,30,180,"groen");
 8002ef8:	4b19      	ldr	r3, [pc, #100]	; (8002f60 <main+0x118>)
 8002efa:	9302      	str	r3, [sp, #8]
 8002efc:	23b4      	movs	r3, #180	; 0xb4
 8002efe:	9301      	str	r3, [sp, #4]
 8002f00:	231e      	movs	r3, #30
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	238c      	movs	r3, #140	; 0x8c
 8002f06:	2264      	movs	r2, #100	; 0x64
 8002f08:	21b4      	movs	r1, #180	; 0xb4
 8002f0a:	20b4      	movs	r0, #180	; 0xb4
 8002f0c:	f7ff fc64 	bl	80027d8 <triangle_filled>
//	print_char(56, 140, 37, "zwart", "greek");
//	print_text(62, 140, "1!", "zwart", "greek");
//	print_text(0, 150, "1234567890!#$&*()-+',.>", "zwart", "greek");

	// LCD Write
	LCD_clear();
 8002f10:	f000 f8f6 	bl	8003100 <LCD_clear>
	LCD_puts("TEET-VESOFTON-16");
 8002f14:	4813      	ldr	r0, [pc, #76]	; (8002f64 <main+0x11c>)
 8002f16:	f000 f9e0 	bl	80032da <LCD_puts>
	LCD_XY(0, 1);
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	2000      	movs	r0, #0
 8002f1e:	f000 f901 	bl	8003124 <LCD_XY>
	LCD_puts(version);
 8002f22:	4b11      	ldr	r3, [pc, #68]	; (8002f68 <main+0x120>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 f9d7 	bl	80032da <LCD_puts>
	LCD_cursor_off();
 8002f2c:	200c      	movs	r0, #12
 8002f2e:	f000 fa3d 	bl	80033ac <LCD_writecontrol>

	// UART
	UART_puts(version);
 8002f32:	4b0d      	ldr	r3, [pc, #52]	; (8002f68 <main+0x120>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 fb84 	bl	8003644 <UART_puts>
	UART_puts("\n\r");
 8002f3c:	480b      	ldr	r0, [pc, #44]	; (8002f6c <main+0x124>)
 8002f3e:	f000 fb81 	bl	8003644 <UART_puts>

	while(1)
	{
		char **arguments = UART_tokens();
 8002f42:	f000 ffe5 	bl	8003f10 <UART_tokens>
 8002f46:	6078      	str	r0, [r7, #4]
		UART_control(arguments);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f001 f849 	bl	8003fe0 <UART_control>

		// ALWAYS clear AFTER you are done with your arguments to prevent memory leaks!
		UART_tokens_clear(arguments);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f001 f826 	bl	8003fa0 <UART_tokens_clear>
	{
 8002f54:	e7f5      	b.n	8002f42 <main+0xfa>
 8002f56:	bf00      	nop
 8002f58:	08004e6c 	.word	0x08004e6c
 8002f5c:	08004e74 	.word	0x08004e74
 8002f60:	08004e7c 	.word	0x08004e7c
 8002f64:	08004e84 	.word	0x08004e84
 8002f68:	200001e0 	.word	0x200001e0
 8002f6c:	08004e98 	.word	0x08004e98

08002f70 <DELAY_init>:
uint32_t D_mS; // Global variable (ms)
uint32_t D_S; // Global variable (s)


void DELAY_init(void)
{
 8002f70:	b590      	push	{r4, r7, lr}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
	RCC_ClocksTypeDef Clocks;
	RCC_GetClocksFreq(&Clocks);
 8002f76:	463b      	mov	r3, r7
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7fe f989 	bl	8001290 <RCC_GetClocksFreq>
	G_CLK = Clocks.SYSCLK_Frequency;	// Read the systemclock
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	4a3f      	ldr	r2, [pc, #252]	; (8003080 <DELAY_init+0x110>)
 8002f82:	6013      	str	r3, [r2, #0]
	D_S  = (G_CLK*1.25)/9/2;	// Number of instructions in one second
 8002f84:	4b3e      	ldr	r3, [pc, #248]	; (8003080 <DELAY_init+0x110>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fd fa71 	bl	8000470 <__aeabi_ui2d>
 8002f8e:	f04f 0200 	mov.w	r2, #0
 8002f92:	4b3c      	ldr	r3, [pc, #240]	; (8003084 <DELAY_init+0x114>)
 8002f94:	f7fd fae2 	bl	800055c <__aeabi_dmul>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	460c      	mov	r4, r1
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	4621      	mov	r1, r4
 8002fa0:	f04f 0200 	mov.w	r2, #0
 8002fa4:	4b38      	ldr	r3, [pc, #224]	; (8003088 <DELAY_init+0x118>)
 8002fa6:	f7fd fc03 	bl	80007b0 <__aeabi_ddiv>
 8002faa:	4603      	mov	r3, r0
 8002fac:	460c      	mov	r4, r1
 8002fae:	4618      	mov	r0, r3
 8002fb0:	4621      	mov	r1, r4
 8002fb2:	f04f 0200 	mov.w	r2, #0
 8002fb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fba:	f7fd fbf9 	bl	80007b0 <__aeabi_ddiv>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	460c      	mov	r4, r1
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	4621      	mov	r1, r4
 8002fc6:	f7fd fd79 	bl	8000abc <__aeabi_d2uiz>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	4b2f      	ldr	r3, [pc, #188]	; (800308c <DELAY_init+0x11c>)
 8002fce:	601a      	str	r2, [r3, #0]
	D_mS = (G_CLK*1.25)/9000/2; // Number of instructions in one millisecond
 8002fd0:	4b2b      	ldr	r3, [pc, #172]	; (8003080 <DELAY_init+0x110>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7fd fa4b 	bl	8000470 <__aeabi_ui2d>
 8002fda:	f04f 0200 	mov.w	r2, #0
 8002fde:	4b29      	ldr	r3, [pc, #164]	; (8003084 <DELAY_init+0x114>)
 8002fe0:	f7fd fabc 	bl	800055c <__aeabi_dmul>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	460c      	mov	r4, r1
 8002fe8:	4618      	mov	r0, r3
 8002fea:	4621      	mov	r1, r4
 8002fec:	a320      	add	r3, pc, #128	; (adr r3, 8003070 <DELAY_init+0x100>)
 8002fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff2:	f7fd fbdd 	bl	80007b0 <__aeabi_ddiv>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	460c      	mov	r4, r1
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	4621      	mov	r1, r4
 8002ffe:	f04f 0200 	mov.w	r2, #0
 8003002:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003006:	f7fd fbd3 	bl	80007b0 <__aeabi_ddiv>
 800300a:	4603      	mov	r3, r0
 800300c:	460c      	mov	r4, r1
 800300e:	4618      	mov	r0, r3
 8003010:	4621      	mov	r1, r4
 8003012:	f7fd fd53 	bl	8000abc <__aeabi_d2uiz>
 8003016:	4602      	mov	r2, r0
 8003018:	4b1d      	ldr	r3, [pc, #116]	; (8003090 <DELAY_init+0x120>)
 800301a:	601a      	str	r2, [r3, #0]
	D_uS = (G_CLK*1.25)/9000000/2; // Number of instructions in one microsecond, largest rounding error
 800301c:	4b18      	ldr	r3, [pc, #96]	; (8003080 <DELAY_init+0x110>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f7fd fa25 	bl	8000470 <__aeabi_ui2d>
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	4b16      	ldr	r3, [pc, #88]	; (8003084 <DELAY_init+0x114>)
 800302c:	f7fd fa96 	bl	800055c <__aeabi_dmul>
 8003030:	4603      	mov	r3, r0
 8003032:	460c      	mov	r4, r1
 8003034:	4618      	mov	r0, r3
 8003036:	4621      	mov	r1, r4
 8003038:	a30f      	add	r3, pc, #60	; (adr r3, 8003078 <DELAY_init+0x108>)
 800303a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303e:	f7fd fbb7 	bl	80007b0 <__aeabi_ddiv>
 8003042:	4603      	mov	r3, r0
 8003044:	460c      	mov	r4, r1
 8003046:	4618      	mov	r0, r3
 8003048:	4621      	mov	r1, r4
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003052:	f7fd fbad 	bl	80007b0 <__aeabi_ddiv>
 8003056:	4603      	mov	r3, r0
 8003058:	460c      	mov	r4, r1
 800305a:	4618      	mov	r0, r3
 800305c:	4621      	mov	r1, r4
 800305e:	f7fd fd2d 	bl	8000abc <__aeabi_d2uiz>
 8003062:	4602      	mov	r2, r0
 8003064:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <DELAY_init+0x124>)
 8003066:	601a      	str	r2, [r3, #0]
}
 8003068:	bf00      	nop
 800306a:	3714      	adds	r7, #20
 800306c:	46bd      	mov	sp, r7
 800306e:	bd90      	pop	{r4, r7, pc}
 8003070:	00000000 	.word	0x00000000
 8003074:	40c19400 	.word	0x40c19400
 8003078:	00000000 	.word	0x00000000
 800307c:	41612a88 	.word	0x41612a88
 8003080:	200003f8 	.word	0x200003f8
 8003084:	3ff40000 	.word	0x3ff40000
 8003088:	40220000 	.word	0x40220000
 800308c:	200003fc 	.word	0x200003fc
 8003090:	20000404 	.word	0x20000404
 8003094:	20000400 	.word	0x20000400

08003098 <DELAY_ms>:
        time--;
    }
}

void DELAY_ms(volatile unsigned int time)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
    volatile unsigned int i;

    while(time>0)		// Run x times 1 millisecond
 80030a0:	e00d      	b.n	80030be <DELAY_ms+0x26>
    {
        for(i=0;i<D_mS;i++);
 80030a2:	2300      	movs	r3, #0
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	e002      	b.n	80030ae <DELAY_ms+0x16>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	3301      	adds	r3, #1
 80030ac:	60fb      	str	r3, [r7, #12]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	4b07      	ldr	r3, [pc, #28]	; (80030d0 <DELAY_ms+0x38>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d3f7      	bcc.n	80030a8 <DELAY_ms+0x10>
        time--;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3b01      	subs	r3, #1
 80030bc:	607b      	str	r3, [r7, #4]
    while(time>0)		// Run x times 1 millisecond
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1ee      	bne.n	80030a2 <DELAY_ms+0xa>
    }
}
 80030c4:	bf00      	nop
 80030c6:	3714      	adds	r7, #20
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	20000404 	.word	0x20000404

080030d4 <ClearBits>:
static void LCD_writebyte(unsigned char data);

unsigned char curpos = 0; // remember cursorposition

void ClearBits(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
	GPIO_ResetBits(LCD_D4);
 80030d8:	2108      	movs	r1, #8
 80030da:	4808      	ldr	r0, [pc, #32]	; (80030fc <ClearBits+0x28>)
 80030dc:	f7fe f87f 	bl	80011de <GPIO_ResetBits>
	GPIO_ResetBits(LCD_D5);
 80030e0:	2110      	movs	r1, #16
 80030e2:	4806      	ldr	r0, [pc, #24]	; (80030fc <ClearBits+0x28>)
 80030e4:	f7fe f87b 	bl	80011de <GPIO_ResetBits>
	GPIO_ResetBits(LCD_D6);
 80030e8:	2120      	movs	r1, #32
 80030ea:	4804      	ldr	r0, [pc, #16]	; (80030fc <ClearBits+0x28>)
 80030ec:	f7fe f877 	bl	80011de <GPIO_ResetBits>
	GPIO_ResetBits(LCD_D7);
 80030f0:	2140      	movs	r1, #64	; 0x40
 80030f2:	4802      	ldr	r0, [pc, #8]	; (80030fc <ClearBits+0x28>)
 80030f4:	f7fe f873 	bl	80011de <GPIO_ResetBits>
}
 80030f8:	bf00      	nop
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40021000 	.word	0x40021000

08003100 <LCD_clear>:
   LCD_writecontrol(0x02); // cursur home
   curpos=0;               // reset position
}

void LCD_clear(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
   LCD_writecontrol(0x01); // clearscreen
 8003104:	2001      	movs	r0, #1
 8003106:	f000 f951 	bl	80033ac <LCD_writecontrol>
   curpos=0;               // reset position
 800310a:	4b05      	ldr	r3, [pc, #20]	; (8003120 <LCD_clear+0x20>)
 800310c:	2200      	movs	r2, #0
 800310e:	701a      	strb	r2, [r3, #0]
   DELAY_ms(5);
 8003110:	2005      	movs	r0, #5
 8003112:	f7ff ffc1 	bl	8003098 <DELAY_ms>
   busyflag();
 8003116:	f000 f95d 	bl	80033d4 <busyflag>

}
 800311a:	bf00      	nop
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	200003e4 	.word	0x200003e4

08003124 <LCD_XY>:

void LCD_XY(unsigned int x, unsigned int y)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
	unsigned char data;

	switch(y)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d009      	beq.n	8003148 <LCD_XY+0x24>
 8003134:	2b01      	cmp	r3, #1
 8003136:	d302      	bcc.n	800313e <LCD_XY+0x1a>
 8003138:	2b02      	cmp	r3, #2
 800313a:	d00a      	beq.n	8003152 <LCD_XY+0x2e>
 800313c:	e00e      	b.n	800315c <LCD_XY+0x38>
	{
	case 0:  data = (1<<7)+0x00+x; break;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	b2db      	uxtb	r3, r3
 8003142:	3b80      	subs	r3, #128	; 0x80
 8003144:	73fb      	strb	r3, [r7, #15]
 8003146:	e00e      	b.n	8003166 <LCD_XY+0x42>
	case 1:  data = (1<<7)+0x40+x; break;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	b2db      	uxtb	r3, r3
 800314c:	3b40      	subs	r3, #64	; 0x40
 800314e:	73fb      	strb	r3, [r7, #15]
 8003150:	e009      	b.n	8003166 <LCD_XY+0x42>
	case 2:  data = (1<<7)+0x14+x; break;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	b2db      	uxtb	r3, r3
 8003156:	3b6c      	subs	r3, #108	; 0x6c
 8003158:	73fb      	strb	r3, [r7, #15]
 800315a:	e004      	b.n	8003166 <LCD_XY+0x42>
	default: data = (1<<7)+0x54+x; break;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	b2db      	uxtb	r3, r3
 8003160:	3b2c      	subs	r3, #44	; 0x2c
 8003162:	73fb      	strb	r3, [r7, #15]
 8003164:	bf00      	nop
	}
	LCD_writecontrol(data);
 8003166:	7bfb      	ldrb	r3, [r7, #15]
 8003168:	4618      	mov	r0, r3
 800316a:	f000 f91f 	bl	80033ac <LCD_writecontrol>
}
 800316e:	bf00      	nop
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
	...

08003178 <LCD_init>:


// init LCD
// Display wordt gebruikt in 4bits modus,2 regels, 5x7 dots font.
void LCD_init(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio;	// GPIO init structure
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE); // Enable Clock for PortE
 800317e:	2101      	movs	r1, #1
 8003180:	2010      	movs	r0, #16
 8003182:	f7fe f92d 	bl	80013e0 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8003186:	2101      	movs	r1, #1
 8003188:	2004      	movs	r0, #4
 800318a:	f7fe f929 	bl	80013e0 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 800318e:	2101      	movs	r1, #1
 8003190:	2008      	movs	r0, #8
 8003192:	f7fe f925 	bl	80013e0 <RCC_AHB1PeriphClockCmd>

	gpio.GPIO_Mode = GPIO_Mode_OUT;
 8003196:	2301      	movs	r3, #1
 8003198:	713b      	strb	r3, [r7, #4]
	gpio.GPIO_OType = GPIO_OType_PP;
 800319a:	2300      	movs	r3, #0
 800319c:	71bb      	strb	r3, [r7, #6]
	gpio.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800319e:	2300      	movs	r3, #0
 80031a0:	71fb      	strb	r3, [r7, #7]
	gpio.GPIO_Speed = GPIO_Speed_50MHz;
 80031a2:	2302      	movs	r3, #2
 80031a4:	717b      	strb	r3, [r7, #5]
	gpio.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6;
 80031a6:	2378      	movs	r3, #120	; 0x78
 80031a8:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOE, &gpio);
 80031aa:	463b      	mov	r3, r7
 80031ac:	4619      	mov	r1, r3
 80031ae:	4828      	ldr	r0, [pc, #160]	; (8003250 <LCD_init+0xd8>)
 80031b0:	f7fd ff5e 	bl	8001070 <GPIO_Init>

	gpio.GPIO_Pin = GPIO_Pin_11 | GPIO_Pin_13;
 80031b4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80031b8:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOC, &gpio);
 80031ba:	463b      	mov	r3, r7
 80031bc:	4619      	mov	r1, r3
 80031be:	4825      	ldr	r0, [pc, #148]	; (8003254 <LCD_init+0xdc>)
 80031c0:	f7fd ff56 	bl	8001070 <GPIO_Init>

	gpio.GPIO_Pin = GPIO_Pin_0;
 80031c4:	2301      	movs	r3, #1
 80031c6:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOD, &gpio);
 80031c8:	463b      	mov	r3, r7
 80031ca:	4619      	mov	r1, r3
 80031cc:	4822      	ldr	r0, [pc, #136]	; (8003258 <LCD_init+0xe0>)
 80031ce:	f7fd ff4f 	bl	8001070 <GPIO_Init>
//	GPIOE -> MODER |= ( 1 << 12 );
//	GPIOC -> MODER |= ( 1 << 26 );
//	GPIOC -> MODER |= ( 1 << 30 );
//	GPIOC -> MODER |= ( 1 << 28 );

	GPIO_ResetBits(LCD_RS);
 80031d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031d6:	481f      	ldr	r0, [pc, #124]	; (8003254 <LCD_init+0xdc>)
 80031d8:	f7fe f801 	bl	80011de <GPIO_ResetBits>
	GPIO_ResetBits(LCD_EN);
 80031dc:	2101      	movs	r1, #1
 80031de:	481e      	ldr	r0, [pc, #120]	; (8003258 <LCD_init+0xe0>)
 80031e0:	f7fd fffd 	bl	80011de <GPIO_ResetBits>
	GPIO_ResetBits(LCD_RW);
 80031e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80031e8:	481a      	ldr	r0, [pc, #104]	; (8003254 <LCD_init+0xdc>)
 80031ea:	f7fd fff8 	bl	80011de <GPIO_ResetBits>

	DELAY_ms(15);//15
 80031ee:	200f      	movs	r0, #15
 80031f0:	f7ff ff52 	bl	8003098 <DELAY_ms>

    LCD_writebyte(0x30); // function-set boot
 80031f4:	2030      	movs	r0, #48	; 0x30
 80031f6:	f000 f8ad 	bl	8003354 <LCD_writebyte>
    DELAY_ms(50);
 80031fa:	2032      	movs	r0, #50	; 0x32
 80031fc:	f7ff ff4c 	bl	8003098 <DELAY_ms>
    LCD_writebyte(0x30);
 8003200:	2030      	movs	r0, #48	; 0x30
 8003202:	f000 f8a7 	bl	8003354 <LCD_writebyte>
    LCD_writebyte(0x30);
 8003206:	2030      	movs	r0, #48	; 0x30
 8003208:	f000 f8a4 	bl	8003354 <LCD_writebyte>

     // interface op 4 bits
    LCD_writebyte(0x02);
 800320c:	2002      	movs	r0, #2
 800320e:	f000 f8a1 	bl	8003354 <LCD_writebyte>
    DELAY_ms(5);
 8003212:	2005      	movs	r0, #5
 8003214:	f7ff ff40 	bl	8003098 <DELAY_ms>

    LCD_writebyte(0x2C);  // function set
 8003218:	202c      	movs	r0, #44	; 0x2c
 800321a:	f000 f89b 	bl	8003354 <LCD_writebyte>
    DELAY_ms(15);
 800321e:	200f      	movs	r0, #15
 8003220:	f7ff ff3a 	bl	8003098 <DELAY_ms>
    LCD_writebyte(0x0E);  // lcd aan
 8003224:	200e      	movs	r0, #14
 8003226:	f000 f895 	bl	8003354 <LCD_writebyte>
    DELAY_ms(15);
 800322a:	200f      	movs	r0, #15
 800322c:	f7ff ff34 	bl	8003098 <DELAY_ms>
    LCD_writebyte(0x01);  // clear screen
 8003230:	2001      	movs	r0, #1
 8003232:	f000 f88f 	bl	8003354 <LCD_writebyte>
    DELAY_ms(15);
 8003236:	200f      	movs	r0, #15
 8003238:	f7ff ff2e 	bl	8003098 <DELAY_ms>
    LCD_writebyte(0x06);  // entry mode set
 800323c:	2006      	movs	r0, #6
 800323e:	f000 f889 	bl	8003354 <LCD_writebyte>
    DELAY_ms(15);
 8003242:	200f      	movs	r0, #15
 8003244:	f7ff ff28 	bl	8003098 <DELAY_ms>
}
 8003248:	bf00      	nop
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40021000 	.word	0x40021000
 8003254:	40020800 	.word	0x40020800
 8003258:	40020c00 	.word	0x40020c00

0800325c <LCD_putchar>:

// Zet meegegeven karakter op het scherm
void LCD_putchar(char c)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	4603      	mov	r3, r0
 8003264:	71fb      	strb	r3, [r7, #7]
    GPIO_SetBits(LCD_RS);
 8003266:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800326a:	480c      	ldr	r0, [pc, #48]	; (800329c <LCD_putchar+0x40>)
 800326c:	f7fd ffa8 	bl	80011c0 <GPIO_SetBits>
    LCD_writebyte(c);
 8003270:	79fb      	ldrb	r3, [r7, #7]
 8003272:	4618      	mov	r0, r3
 8003274:	f000 f86e 	bl	8003354 <LCD_writebyte>
    if (++curpos==32) // remember cursorpos
 8003278:	4b09      	ldr	r3, [pc, #36]	; (80032a0 <LCD_putchar+0x44>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	3301      	adds	r3, #1
 800327e:	b2da      	uxtb	r2, r3
 8003280:	4b07      	ldr	r3, [pc, #28]	; (80032a0 <LCD_putchar+0x44>)
 8003282:	701a      	strb	r2, [r3, #0]
 8003284:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <LCD_putchar+0x44>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	2b20      	cmp	r3, #32
 800328a:	d102      	bne.n	8003292 <LCD_putchar+0x36>
    	curpos=0;
 800328c:	4b04      	ldr	r3, [pc, #16]	; (80032a0 <LCD_putchar+0x44>)
 800328e:	2200      	movs	r2, #0
 8003290:	701a      	strb	r2, [r3, #0]
}
 8003292:	bf00      	nop
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	40020800 	.word	0x40020800
 80032a0:	200003e4 	.word	0x200003e4

080032a4 <LCD_put>:

// Zet meegegeven string op het scherm
void LCD_put(char *string)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
    unsigned char k;
	// vaag display; teken 8 tot 31 is niet uitgevoerd op het scherm
    for (k=0; string[k]; k++)
 80032ac:	2300      	movs	r3, #0
 80032ae:	73fb      	strb	r3, [r7, #15]
 80032b0:	e009      	b.n	80032c6 <LCD_put+0x22>
    	unsigned char j;
    	// vaag display; teken 8 tot 31 is niet uitgevoerd op het scherm
    	if(curpos==8) // at 8, goto next valid lcd-position
        for (j=0; j<32; j++) LCD_cursor_right();
#endif
        LCD_putchar(string[k]);
 80032b2:	7bfb      	ldrb	r3, [r7, #15]
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	4413      	add	r3, r2
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff ffce 	bl	800325c <LCD_putchar>
    for (k=0; string[k]; k++)
 80032c0:	7bfb      	ldrb	r3, [r7, #15]
 80032c2:	3301      	adds	r3, #1
 80032c4:	73fb      	strb	r3, [r7, #15]
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	4413      	add	r3, r2
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1ef      	bne.n	80032b2 <LCD_put+0xe>
    }
}
 80032d2:	bf00      	nop
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <LCD_puts>:

void LCD_puts(char *c)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b082      	sub	sp, #8
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
    LCD_put(c);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7ff ffde 	bl	80032a4 <LCD_put>
}
 80032e8:	bf00      	nop
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <LCD_writenibble>:
	LCD_put(&s[i+1]); // first, set i to starting pos, undo one i-- too much
}

// Stuurt een 4-bits commando naar het display
static void LCD_writenibble(unsigned char data)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	71fb      	strb	r3, [r7, #7]
    ClearBits();
 80032fa:	f7ff feeb 	bl	80030d4 <ClearBits>

    if (data & 0x01)
 80032fe:	79fb      	ldrb	r3, [r7, #7]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <LCD_writenibble+0x20>
		GPIO_SetBits(LCD_D7);
 8003308:	2140      	movs	r1, #64	; 0x40
 800330a:	4811      	ldr	r0, [pc, #68]	; (8003350 <LCD_writenibble+0x60>)
 800330c:	f7fd ff58 	bl	80011c0 <GPIO_SetBits>

	if (data & 0x02)
 8003310:	79fb      	ldrb	r3, [r7, #7]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <LCD_writenibble+0x32>
		GPIO_SetBits(LCD_D6);
 800331a:	2120      	movs	r1, #32
 800331c:	480c      	ldr	r0, [pc, #48]	; (8003350 <LCD_writenibble+0x60>)
 800331e:	f7fd ff4f 	bl	80011c0 <GPIO_SetBits>

	if (data & 0x04)
 8003322:	79fb      	ldrb	r3, [r7, #7]
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	2b00      	cmp	r3, #0
 800332a:	d003      	beq.n	8003334 <LCD_writenibble+0x44>
		GPIO_SetBits(LCD_D5);
 800332c:	2110      	movs	r1, #16
 800332e:	4808      	ldr	r0, [pc, #32]	; (8003350 <LCD_writenibble+0x60>)
 8003330:	f7fd ff46 	bl	80011c0 <GPIO_SetBits>

	if (data & 0x08)
 8003334:	79fb      	ldrb	r3, [r7, #7]
 8003336:	f003 0308 	and.w	r3, r3, #8
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <LCD_writenibble+0x56>
		GPIO_SetBits(LCD_D4);
 800333e:	2108      	movs	r1, #8
 8003340:	4803      	ldr	r0, [pc, #12]	; (8003350 <LCD_writenibble+0x60>)
 8003342:	f7fd ff3d 	bl	80011c0 <GPIO_SetBits>

}
 8003346:	bf00      	nop
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40021000 	.word	0x40021000

08003354 <LCD_writebyte>:

// Stuurt een 8-bits commando naar het display
static void LCD_writebyte(unsigned char data)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	71fb      	strb	r3, [r7, #7]
    /* hoogste 4 bits */
    GPIO_SetBits(LCD_EN);
 800335e:	2101      	movs	r1, #1
 8003360:	4811      	ldr	r0, [pc, #68]	; (80033a8 <LCD_writebyte+0x54>)
 8003362:	f7fd ff2d 	bl	80011c0 <GPIO_SetBits>
    LCD_writenibble((data>>4)&0x0F);
 8003366:	79fb      	ldrb	r3, [r7, #7]
 8003368:	091b      	lsrs	r3, r3, #4
 800336a:	b2db      	uxtb	r3, r3
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff ffbf 	bl	80032f0 <LCD_writenibble>
    GPIO_ResetBits(LCD_EN);
 8003372:	2101      	movs	r1, #1
 8003374:	480c      	ldr	r0, [pc, #48]	; (80033a8 <LCD_writebyte+0x54>)
 8003376:	f7fd ff32 	bl	80011de <GPIO_ResetBits>

    busyflag();
 800337a:	f000 f82b 	bl	80033d4 <busyflag>

    /* laagste 4 bits */
    GPIO_SetBits(LCD_EN);
 800337e:	2101      	movs	r1, #1
 8003380:	4809      	ldr	r0, [pc, #36]	; (80033a8 <LCD_writebyte+0x54>)
 8003382:	f7fd ff1d 	bl	80011c0 <GPIO_SetBits>
    LCD_writenibble(data&0x0F);
 8003386:	79fb      	ldrb	r3, [r7, #7]
 8003388:	f003 030f 	and.w	r3, r3, #15
 800338c:	b2db      	uxtb	r3, r3
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff ffae 	bl	80032f0 <LCD_writenibble>
    GPIO_ResetBits(LCD_EN);
 8003394:	2101      	movs	r1, #1
 8003396:	4804      	ldr	r0, [pc, #16]	; (80033a8 <LCD_writebyte+0x54>)
 8003398:	f7fd ff21 	bl	80011de <GPIO_ResetBits>

    busyflag();
 800339c:	f000 f81a 	bl	80033d4 <busyflag>
}
 80033a0:	bf00      	nop
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40020c00 	.word	0x40020c00

080033ac <LCD_writecontrol>:

// Stuurt een commando naar het display
void LCD_writecontrol(unsigned char data)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	4603      	mov	r3, r0
 80033b4:	71fb      	strb	r3, [r7, #7]
    GPIO_ResetBits(LCD_RS);
 80033b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033ba:	4805      	ldr	r0, [pc, #20]	; (80033d0 <LCD_writecontrol+0x24>)
 80033bc:	f7fd ff0f 	bl	80011de <GPIO_ResetBits>
    LCD_writebyte(data);
 80033c0:	79fb      	ldrb	r3, [r7, #7]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7ff ffc6 	bl	8003354 <LCD_writebyte>
}
 80033c8:	bf00      	nop
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40020800 	.word	0x40020800

080033d4 <busyflag>:
	    while(time--)
	    	__NOP();
}

void busyflag(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
	uint8_t bitstatus = 0x00;
 80033da:	2300      	movs	r3, #0
 80033dc:	73fb      	strb	r3, [r7, #15]
	uint8_t bitstatus1 = Bit_SET;
 80033de:	2301      	movs	r3, #1
 80033e0:	73bb      	strb	r3, [r7, #14]
	GPIO_InitTypeDef gpio;

	while(bitstatus == bitstatus1)
 80033e2:	e02f      	b.n	8003444 <busyflag+0x70>
	{
		gpio.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6;
 80033e4:	2378      	movs	r3, #120	; 0x78
 80033e6:	607b      	str	r3, [r7, #4]
		gpio.GPIO_Mode = GPIO_Mode_IN;
 80033e8:	2300      	movs	r3, #0
 80033ea:	723b      	strb	r3, [r7, #8]
		gpio.GPIO_OType = GPIO_OType_PP;
 80033ec:	2300      	movs	r3, #0
 80033ee:	72bb      	strb	r3, [r7, #10]
		gpio.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80033f0:	2300      	movs	r3, #0
 80033f2:	72fb      	strb	r3, [r7, #11]
		gpio.GPIO_Speed = GPIO_Speed_50MHz;
 80033f4:	2302      	movs	r3, #2
 80033f6:	727b      	strb	r3, [r7, #9]
		GPIO_Init(GPIOE, &gpio);
 80033f8:	1d3b      	adds	r3, r7, #4
 80033fa:	4619      	mov	r1, r3
 80033fc:	481e      	ldr	r0, [pc, #120]	; (8003478 <busyflag+0xa4>)
 80033fe:	f7fd fe37 	bl	8001070 <GPIO_Init>

		GPIO_ResetBits(LCD_RS);
 8003402:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003406:	481d      	ldr	r0, [pc, #116]	; (800347c <busyflag+0xa8>)
 8003408:	f7fd fee9 	bl	80011de <GPIO_ResetBits>
		GPIO_SetBits(LCD_RW);
 800340c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003410:	481a      	ldr	r0, [pc, #104]	; (800347c <busyflag+0xa8>)
 8003412:	f7fd fed5 	bl	80011c0 <GPIO_SetBits>

		DELAY_ms(1);
 8003416:	2001      	movs	r0, #1
 8003418:	f7ff fe3e 	bl	8003098 <DELAY_ms>
		GPIO_SetBits(LCD_EN);
 800341c:	2101      	movs	r1, #1
 800341e:	4818      	ldr	r0, [pc, #96]	; (8003480 <busyflag+0xac>)
 8003420:	f7fd fece 	bl	80011c0 <GPIO_SetBits>
		DELAY_ms(1);
 8003424:	2001      	movs	r0, #1
 8003426:	f7ff fe37 	bl	8003098 <DELAY_ms>

		bitstatus = GPIO_ReadInputDataBit(LCD_D7);
 800342a:	2140      	movs	r1, #64	; 0x40
 800342c:	4812      	ldr	r0, [pc, #72]	; (8003478 <busyflag+0xa4>)
 800342e:	f7fd fead 	bl	800118c <GPIO_ReadInputDataBit>
 8003432:	4603      	mov	r3, r0
 8003434:	73fb      	strb	r3, [r7, #15]
		GPIO_ResetBits(LCD_EN);
 8003436:	2101      	movs	r1, #1
 8003438:	4811      	ldr	r0, [pc, #68]	; (8003480 <busyflag+0xac>)
 800343a:	f7fd fed0 	bl	80011de <GPIO_ResetBits>
		DELAY_ms(1);
 800343e:	2001      	movs	r0, #1
 8003440:	f7ff fe2a 	bl	8003098 <DELAY_ms>
	while(bitstatus == bitstatus1)
 8003444:	7bfa      	ldrb	r2, [r7, #15]
 8003446:	7bbb      	ldrb	r3, [r7, #14]
 8003448:	429a      	cmp	r2, r3
 800344a:	d0cb      	beq.n	80033e4 <busyflag+0x10>
	}

	gpio.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6;
 800344c:	2378      	movs	r3, #120	; 0x78
 800344e:	607b      	str	r3, [r7, #4]
	gpio.GPIO_Mode = GPIO_Mode_OUT;
 8003450:	2301      	movs	r3, #1
 8003452:	723b      	strb	r3, [r7, #8]
	gpio.GPIO_OType = GPIO_OType_PP;
 8003454:	2300      	movs	r3, #0
 8003456:	72bb      	strb	r3, [r7, #10]
	gpio.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8003458:	2300      	movs	r3, #0
 800345a:	72fb      	strb	r3, [r7, #11]
	gpio.GPIO_Speed = GPIO_Speed_50MHz;
 800345c:	2302      	movs	r3, #2
 800345e:	727b      	strb	r3, [r7, #9]
	GPIO_Init(GPIOE, &gpio);
 8003460:	1d3b      	adds	r3, r7, #4
 8003462:	4619      	mov	r1, r3
 8003464:	4804      	ldr	r0, [pc, #16]	; (8003478 <busyflag+0xa4>)
 8003466:	f7fd fe03 	bl	8001070 <GPIO_Init>

	DELAY_ms(1);
 800346a:	2001      	movs	r0, #1
 800346c:	f7ff fe14 	bl	8003098 <DELAY_ms>
}
 8003470:	bf00      	nop
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40021000 	.word	0x40021000
 800347c:	40020800 	.word	0x40020800
 8003480:	40020c00 	.word	0x40020c00

08003484 <LED_init>:
*/
#include "include.h"

// Stelt gebruikte I/O pinnen in.
void LED_init(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800348a:	2101      	movs	r1, #1
 800348c:	2001      	movs	r0, #1
 800348e:	f7fd ffa7 	bl	80013e0 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8003492:	2101      	movs	r1, #1
 8003494:	2002      	movs	r0, #2
 8003496:	f7fd ffa3 	bl	80013e0 <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef gpio;
	gpio.GPIO_OType = GPIO_OType_PP;
 800349a:	2300      	movs	r3, #0
 800349c:	71bb      	strb	r3, [r7, #6]
	gpio.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800349e:	2300      	movs	r3, #0
 80034a0:	71fb      	strb	r3, [r7, #7]
	gpio.GPIO_Speed = GPIO_Speed_50MHz;
 80034a2:	2302      	movs	r3, #2
 80034a4:	717b      	strb	r3, [r7, #5]
	gpio.GPIO_Mode = GPIO_Mode_OUT;
 80034a6:	2301      	movs	r3, #1
 80034a8:	713b      	strb	r3, [r7, #4]

	gpio.GPIO_Pin = LED_SER;
 80034aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034ae:	603b      	str	r3, [r7, #0]
	GPIO_Init(P_LED_SER, &gpio);
 80034b0:	463b      	mov	r3, r7
 80034b2:	4619      	mov	r1, r3
 80034b4:	4813      	ldr	r0, [pc, #76]	; (8003504 <LED_init+0x80>)
 80034b6:	f7fd fddb 	bl	8001070 <GPIO_Init>
	gpio.GPIO_Pin = LED_SCK;
 80034ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034be:	603b      	str	r3, [r7, #0]
	GPIO_Init(P_LED_SCK, &gpio);
 80034c0:	463b      	mov	r3, r7
 80034c2:	4619      	mov	r1, r3
 80034c4:	4810      	ldr	r0, [pc, #64]	; (8003508 <LED_init+0x84>)
 80034c6:	f7fd fdd3 	bl	8001070 <GPIO_Init>
	gpio.GPIO_Pin = LED_RCK;
 80034ca:	2302      	movs	r3, #2
 80034cc:	603b      	str	r3, [r7, #0]
	GPIO_Init(P_LED_RCK, &gpio);
 80034ce:	463b      	mov	r3, r7
 80034d0:	4619      	mov	r1, r3
 80034d2:	480d      	ldr	r0, [pc, #52]	; (8003508 <LED_init+0x84>)
 80034d4:	f7fd fdcc 	bl	8001070 <GPIO_Init>

	GPIO_ResetBits(P_LED_SER, LED_SER);
 80034d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034dc:	4809      	ldr	r0, [pc, #36]	; (8003504 <LED_init+0x80>)
 80034de:	f7fd fe7e 	bl	80011de <GPIO_ResetBits>
    GPIO_ResetBits(P_LED_SCK, LED_SCK);
 80034e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034e6:	4808      	ldr	r0, [pc, #32]	; (8003508 <LED_init+0x84>)
 80034e8:	f7fd fe79 	bl	80011de <GPIO_ResetBits>
    GPIO_SetBits(P_LED_RCK, LED_RCK);
 80034ec:	2102      	movs	r1, #2
 80034ee:	4806      	ldr	r0, [pc, #24]	; (8003508 <LED_init+0x84>)
 80034f0:	f7fd fe66 	bl	80011c0 <GPIO_SetBits>

    LED_put(0); // all leds off
 80034f4:	2000      	movs	r0, #0
 80034f6:	f000 f809 	bl	800350c <LED_put>
}
 80034fa:	bf00      	nop
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	40020000 	.word	0x40020000
 8003508:	40020400 	.word	0x40020400

0800350c <LED_put>:

// Zet de meegegeven waarde op de LED's
void LED_put(unsigned char led_byte)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	4603      	mov	r3, r0
 8003514:	71fb      	strb	r3, [r7, #7]
     unsigned short i;

     // Data uitklokken (wordt in buffer van schuifregister geplaatst)
     for(i=128; i>=1; i>>=1)
 8003516:	2380      	movs	r3, #128	; 0x80
 8003518:	81fb      	strh	r3, [r7, #14]
 800351a:	e01c      	b.n	8003556 <LED_put+0x4a>
     {
          if(led_byte & i)
 800351c:	79fa      	ldrb	r2, [r7, #7]
 800351e:	89fb      	ldrh	r3, [r7, #14]
 8003520:	4013      	ands	r3, r2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d005      	beq.n	8003532 <LED_put+0x26>
        	  GPIO_SetBits(P_LED_SER, LED_SER);
 8003526:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800352a:	4812      	ldr	r0, [pc, #72]	; (8003574 <LED_put+0x68>)
 800352c:	f7fd fe48 	bl	80011c0 <GPIO_SetBits>
 8003530:	e004      	b.n	800353c <LED_put+0x30>
          else
        	  GPIO_ResetBits(P_LED_SER, LED_SER);
 8003532:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003536:	480f      	ldr	r0, [pc, #60]	; (8003574 <LED_put+0x68>)
 8003538:	f7fd fe51 	bl	80011de <GPIO_ResetBits>
          GPIO_SetBits(P_LED_SCK, LED_SCK);
 800353c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003540:	480d      	ldr	r0, [pc, #52]	; (8003578 <LED_put+0x6c>)
 8003542:	f7fd fe3d 	bl	80011c0 <GPIO_SetBits>
          GPIO_ResetBits(P_LED_SCK, LED_SCK);
 8003546:	f44f 7180 	mov.w	r1, #256	; 0x100
 800354a:	480b      	ldr	r0, [pc, #44]	; (8003578 <LED_put+0x6c>)
 800354c:	f7fd fe47 	bl	80011de <GPIO_ResetBits>
     for(i=128; i>=1; i>>=1)
 8003550:	89fb      	ldrh	r3, [r7, #14]
 8003552:	085b      	lsrs	r3, r3, #1
 8003554:	81fb      	strh	r3, [r7, #14]
 8003556:	89fb      	ldrh	r3, [r7, #14]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1df      	bne.n	800351c <LED_put+0x10>
     }
     GPIO_SetBits(P_LED_RCK, LED_RCK);
 800355c:	2102      	movs	r1, #2
 800355e:	4806      	ldr	r0, [pc, #24]	; (8003578 <LED_put+0x6c>)
 8003560:	f7fd fe2e 	bl	80011c0 <GPIO_SetBits>
     GPIO_ResetBits(P_LED_RCK, LED_RCK);
 8003564:	2102      	movs	r1, #2
 8003566:	4804      	ldr	r0, [pc, #16]	; (8003578 <LED_put+0x6c>)
 8003568:	f7fd fe39 	bl	80011de <GPIO_ResetBits>
}
 800356c:	bf00      	nop
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40020000 	.word	0x40020000
 8003578:	40020400 	.word	0x40020400

0800357c <UART_init>:

char string[100];
int charcounter = 0;

void UART_init(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0

  /* --------------------------- System Clocks Configuration -----------------*/
  /* USART2 clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8003582:	2101      	movs	r1, #1
 8003584:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003588:	f7fd ff4a 	bl	8001420 <RCC_APB1PeriphClockCmd>

  /* GPIOA clock enable */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800358c:	2101      	movs	r1, #1
 800358e:	2001      	movs	r0, #1
 8003590:	f7fd ff26 	bl	80013e0 <RCC_AHB1PeriphClockCmd>

  GPIO_InitTypeDef GPIO_InitStructure;

  /*-------------------------- GPIO Configuration ----------------------------*/
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 8003594:	230c      	movs	r3, #12
 8003596:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8003598:	2302      	movs	r3, #2
 800359a:	753b      	strb	r3, [r7, #20]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800359c:	2300      	movs	r3, #0
 800359e:	75bb      	strb	r3, [r7, #22]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80035a0:	2301      	movs	r3, #1
 80035a2:	75fb      	strb	r3, [r7, #23]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80035a4:	2302      	movs	r3, #2
 80035a6:	757b      	strb	r3, [r7, #21]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 80035a8:	f107 0310 	add.w	r3, r7, #16
 80035ac:	4619      	mov	r1, r3
 80035ae:	4816      	ldr	r0, [pc, #88]	; (8003608 <UART_init+0x8c>)
 80035b0:	f7fd fd5e 	bl	8001070 <GPIO_Init>

  /* Connect USART pins to AF */
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);   // USART2_TX
 80035b4:	2207      	movs	r2, #7
 80035b6:	2102      	movs	r1, #2
 80035b8:	4813      	ldr	r0, [pc, #76]	; (8003608 <UART_init+0x8c>)
 80035ba:	f7fd fe1f 	bl	80011fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);  // USART2_RX
 80035be:	2207      	movs	r2, #7
 80035c0:	2103      	movs	r1, #3
 80035c2:	4811      	ldr	r0, [pc, #68]	; (8003608 <UART_init+0x8c>)
 80035c4:	f7fd fe1a 	bl	80011fc <GPIO_PinAFConfig>
      - One Stop Bit
      - No parity
      - Hardware flow control disabled (RTS and CTS signals)
      - Receive and transmit enabled
*/
USART_InitStructure.USART_BaudRate = 115200;
 80035c8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80035cc:	603b      	str	r3, [r7, #0]
USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80035ce:	2300      	movs	r3, #0
 80035d0:	80bb      	strh	r3, [r7, #4]
USART_InitStructure.USART_StopBits = USART_StopBits_1;
 80035d2:	2300      	movs	r3, #0
 80035d4:	80fb      	strh	r3, [r7, #6]
USART_InitStructure.USART_Parity = USART_Parity_No;
 80035d6:	2300      	movs	r3, #0
 80035d8:	813b      	strh	r3, [r7, #8]
USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80035da:	2300      	movs	r3, #0
 80035dc:	81bb      	strh	r3, [r7, #12]

USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80035de:	230c      	movs	r3, #12
 80035e0:	817b      	strh	r3, [r7, #10]

USART_Init(USART2, &USART_InitStructure);
 80035e2:	463b      	mov	r3, r7
 80035e4:	4619      	mov	r1, r3
 80035e6:	4809      	ldr	r0, [pc, #36]	; (800360c <UART_init+0x90>)
 80035e8:	f7fe f988 	bl	80018fc <USART_Init>
USART_ITConfig(USART2,USART_IT_RXNE,ENABLE);
 80035ec:	2201      	movs	r2, #1
 80035ee:	f240 5125 	movw	r1, #1317	; 0x525
 80035f2:	4806      	ldr	r0, [pc, #24]	; (800360c <UART_init+0x90>)
 80035f4:	f7fe fa6e 	bl	8001ad4 <USART_ITConfig>

USART_Cmd(USART2, ENABLE);
 80035f8:	2101      	movs	r1, #1
 80035fa:	4804      	ldr	r0, [pc, #16]	; (800360c <UART_init+0x90>)
 80035fc:	f7fe fa38 	bl	8001a70 <USART_Cmd>

}
 8003600:	bf00      	nop
 8003602:	3718      	adds	r7, #24
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	40020000 	.word	0x40020000
 800360c:	40004400 	.word	0x40004400

08003610 <UART_putchar>:

void UART_putchar(char c)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	4603      	mov	r3, r0
 8003618:	71fb      	strb	r3, [r7, #7]
		while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET); // Wait for Empty
 800361a:	bf00      	nop
 800361c:	2180      	movs	r1, #128	; 0x80
 800361e:	4808      	ldr	r0, [pc, #32]	; (8003640 <UART_putchar+0x30>)
 8003620:	f7fe faa0 	bl	8001b64 <USART_GetFlagStatus>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d0f8      	beq.n	800361c <UART_putchar+0xc>
		USART_SendData(USART2, c);
 800362a:	79fb      	ldrb	r3, [r7, #7]
 800362c:	b29b      	uxth	r3, r3
 800362e:	4619      	mov	r1, r3
 8003630:	4803      	ldr	r0, [pc, #12]	; (8003640 <UART_putchar+0x30>)
 8003632:	f7fe fa3d 	bl	8001ab0 <USART_SendData>

}
 8003636:	bf00      	nop
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	40004400 	.word	0x40004400

08003644 <UART_puts>:

void UART_puts(char *s)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
	volatile unsigned int i;
	for (i=0; s[i]; i++)
 800364c:	2300      	movs	r3, #0
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	e009      	b.n	8003666 <UART_puts+0x22>
	{
		UART_putchar(s[i]);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	4413      	add	r3, r2
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff ffd8 	bl	8003610 <UART_putchar>
	for (i=0; s[i]; i++)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	3301      	adds	r3, #1
 8003664:	60fb      	str	r3, [r7, #12]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	4413      	add	r3, r2
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1ef      	bne.n	8003652 <UART_puts+0xe>
		//while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET); // Wait for Empty
		//USART_SendData(USART2, s[i]);
	}
}
 8003672:	bf00      	nop
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
	...

0800367c <USART2_IRQHandler>:
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
}

void USART2_IRQHandler(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
	// check if the USART2 receive interrupt flag was set
	if( USART_GetITStatus(USART2, USART_IT_RXNE))
 8003682:	f240 5125 	movw	r1, #1317	; 0x525
 8003686:	4827      	ldr	r0, [pc, #156]	; (8003724 <USART2_IRQHandler+0xa8>)
 8003688:	f7fe fa88 	bl	8001b9c <USART_GetITStatus>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d044      	beq.n	800371c <USART2_IRQHandler+0xa0>
	{
		USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 8003692:	f240 5125 	movw	r1, #1317	; 0x525
 8003696:	4823      	ldr	r0, [pc, #140]	; (8003724 <USART2_IRQHandler+0xa8>)
 8003698:	f7fe fadb 	bl	8001c52 <USART_ClearITPendingBit>
		int i;
		char c = USART2->DR & 0xFF;
 800369c:	4b21      	ldr	r3, [pc, #132]	; (8003724 <USART2_IRQHandler+0xa8>)
 800369e:	889b      	ldrh	r3, [r3, #4]
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	70fb      	strb	r3, [r7, #3]
//		LCD_XY(10,1);
//		LCD_put("UART:   ");
//		LCD_XY(15,1);
//		LCD_putchar(c);

		if(c > 64 && c < 91)
 80036a4:	78fb      	ldrb	r3, [r7, #3]
 80036a6:	2b40      	cmp	r3, #64	; 0x40
 80036a8:	d905      	bls.n	80036b6 <USART2_IRQHandler+0x3a>
 80036aa:	78fb      	ldrb	r3, [r7, #3]
 80036ac:	2b5a      	cmp	r3, #90	; 0x5a
 80036ae:	d802      	bhi.n	80036b6 <USART2_IRQHandler+0x3a>
			c += 32;
 80036b0:	78fb      	ldrb	r3, [r7, #3]
 80036b2:	3320      	adds	r3, #32
 80036b4:	70fb      	strb	r3, [r7, #3]
		if(c <= 13)
 80036b6:	78fb      	ldrb	r3, [r7, #3]
 80036b8:	2b0d      	cmp	r3, #13
 80036ba:	d81d      	bhi.n	80036f8 <USART2_IRQHandler+0x7c>
		{
			for(i=0;i<charcounter;i++)
 80036bc:	2300      	movs	r3, #0
 80036be:	607b      	str	r3, [r7, #4]
 80036c0:	e00b      	b.n	80036da <USART2_IRQHandler+0x5e>
			{
				USART_SendData(USART2, string[i]); // Echo Char
 80036c2:	4a19      	ldr	r2, [pc, #100]	; (8003728 <USART2_IRQHandler+0xac>)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4413      	add	r3, r2
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	4619      	mov	r1, r3
 80036ce:	4815      	ldr	r0, [pc, #84]	; (8003724 <USART2_IRQHandler+0xa8>)
 80036d0:	f7fe f9ee 	bl	8001ab0 <USART_SendData>
			for(i=0;i<charcounter;i++)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	3301      	adds	r3, #1
 80036d8:	607b      	str	r3, [r7, #4]
 80036da:	4b14      	ldr	r3, [pc, #80]	; (800372c <USART2_IRQHandler+0xb0>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	dbee      	blt.n	80036c2 <USART2_IRQHandler+0x46>
			}
			charcounter = 0;
 80036e4:	4b11      	ldr	r3, [pc, #68]	; (800372c <USART2_IRQHandler+0xb0>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	601a      	str	r2, [r3, #0]
			USART_SendData(USART2, c); // Echo Char
 80036ea:	78fb      	ldrb	r3, [r7, #3]
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	4619      	mov	r1, r3
 80036f0:	480c      	ldr	r0, [pc, #48]	; (8003724 <USART2_IRQHandler+0xa8>)
 80036f2:	f7fe f9dd 	bl	8001ab0 <USART_SendData>
 80036f6:	e009      	b.n	800370c <USART2_IRQHandler+0x90>
		}
		else
		{
			string[charcounter] = c;
 80036f8:	4b0c      	ldr	r3, [pc, #48]	; (800372c <USART2_IRQHandler+0xb0>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	490a      	ldr	r1, [pc, #40]	; (8003728 <USART2_IRQHandler+0xac>)
 80036fe:	78fa      	ldrb	r2, [r7, #3]
 8003700:	54ca      	strb	r2, [r1, r3]
			charcounter++;
 8003702:	4b0a      	ldr	r3, [pc, #40]	; (800372c <USART2_IRQHandler+0xb0>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	3301      	adds	r3, #1
 8003708:	4a08      	ldr	r2, [pc, #32]	; (800372c <USART2_IRQHandler+0xb0>)
 800370a:	6013      	str	r3, [r2, #0]
		}


		while (USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET); // Wait for Empty
 800370c:	bf00      	nop
 800370e:	2140      	movs	r1, #64	; 0x40
 8003710:	4804      	ldr	r0, [pc, #16]	; (8003724 <USART2_IRQHandler+0xa8>)
 8003712:	f7fe fa27 	bl	8001b64 <USART_GetFlagStatus>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0f8      	beq.n	800370e <USART2_IRQHandler+0x92>

	}
}
 800371c:	bf00      	nop
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40004400 	.word	0x40004400
 8003728:	20000408 	.word	0x20000408
 800372c:	200003e8 	.word	0x200003e8

08003730 <UART_putint>:
    return rc;
}
// Stuurt meegegeven getal uit op de UART

void UART_putint(unsigned int num)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
    UART_putnum(num, 10);
 8003738:	210a      	movs	r1, #10
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f804 	bl	8003748 <UART_putnum>
}
 8003740:	bf00      	nop
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <UART_putnum>:

// Stuurt meegegeven getal uit op de UART in het aangegeven getallenstelsel
void UART_putnum(unsigned int num, unsigned char deel)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b088      	sub	sp, #32
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	460b      	mov	r3, r1
 8003752:	70fb      	strb	r3, [r7, #3]
    static unsigned char chars[16] = "0123456789ABCDEF";
    unsigned int rest;
    signed char c[16];
    signed int i=15;
 8003754:	230f      	movs	r3, #15
 8003756:	61fb      	str	r3, [r7, #28]

    // Zet de integer om naar een string
    if(num==0)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d129      	bne.n	80037b2 <UART_putnum+0x6a>
    {
        c[i]='0';
 800375e:	f107 0208 	add.w	r2, r7, #8
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	4413      	add	r3, r2
 8003766:	2230      	movs	r2, #48	; 0x30
 8003768:	701a      	strb	r2, [r3, #0]
        i--;
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	3b01      	subs	r3, #1
 800376e:	61fb      	str	r3, [r7, #28]
 8003770:	e039      	b.n	80037e6 <UART_putnum+0x9e>
    }
    else
    {
        while(num>0)
        {
            rest=num%deel;
 8003772:	78fa      	ldrb	r2, [r7, #3]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	fbb3 f1f2 	udiv	r1, r3, r2
 800377a:	fb02 f201 	mul.w	r2, r2, r1
 800377e:	1a9b      	subs	r3, r3, r2
 8003780:	61bb      	str	r3, [r7, #24]
            num/=deel;
 8003782:	78fb      	ldrb	r3, [r7, #3]
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	fbb2 f3f3 	udiv	r3, r2, r3
 800378a:	607b      	str	r3, [r7, #4]
            c[i]=chars[rest];
 800378c:	4a19      	ldr	r2, [pc, #100]	; (80037f4 <UART_putnum+0xac>)
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	4413      	add	r3, r2
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	b259      	sxtb	r1, r3
 8003796:	f107 0208 	add.w	r2, r7, #8
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	4413      	add	r3, r2
 800379e:	460a      	mov	r2, r1
 80037a0:	701a      	strb	r2, [r3, #0]
            i--;
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	3b01      	subs	r3, #1
 80037a6:	61fb      	str	r3, [r7, #28]

            if(i==0) // it ends here
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <UART_putnum+0x6a>
                num=0;
 80037ae:	2300      	movs	r3, #0
 80037b0:	607b      	str	r3, [r7, #4]
        while(num>0)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1dc      	bne.n	8003772 <UART_putnum+0x2a>
        }
    }


    // Stuur de string uit
    while(i<15)
 80037b8:	e015      	b.n	80037e6 <UART_putnum+0x9e>
    {
        i++;
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	3301      	adds	r3, #1
 80037be:	61fb      	str	r3, [r7, #28]
        // Wacht tot de buffer leeg is
        while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET); // Wait for Empty
 80037c0:	bf00      	nop
 80037c2:	2180      	movs	r1, #128	; 0x80
 80037c4:	480c      	ldr	r0, [pc, #48]	; (80037f8 <UART_putnum+0xb0>)
 80037c6:	f7fe f9cd 	bl	8001b64 <USART_GetFlagStatus>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0f8      	beq.n	80037c2 <UART_putnum+0x7a>
        USART_SendData(USART2, c[i]);
 80037d0:	f107 0208 	add.w	r2, r7, #8
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	4413      	add	r3, r2
 80037d8:	f993 3000 	ldrsb.w	r3, [r3]
 80037dc:	b29b      	uxth	r3, r3
 80037de:	4619      	mov	r1, r3
 80037e0:	4805      	ldr	r0, [pc, #20]	; (80037f8 <UART_putnum+0xb0>)
 80037e2:	f7fe f965 	bl	8001ab0 <USART_SendData>
    while(i<15)
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	2b0e      	cmp	r3, #14
 80037ea:	dde6      	ble.n	80037ba <UART_putnum+0x72>

    }
}
 80037ec:	bf00      	nop
 80037ee:	3720      	adds	r7, #32
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	200001e4 	.word	0x200001e4
 80037f8:	40004400 	.word	0x40004400

080037fc <UART_get>:

// Ontvang een karakter via de UART
// niet echt nodig als routine maar als wrapper voor compatabiliteit. Let op geen -1 als er geen char is ontvangen!

char UART_get(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
    char uart_char = -1;
 8003802:	23ff      	movs	r3, #255	; 0xff
 8003804:	71fb      	strb	r3, [r7, #7]
    if (USART_GetFlagStatus(USART2, USART_FLAG_RXNE)== SET)  // check for data available
 8003806:	2120      	movs	r1, #32
 8003808:	4807      	ldr	r0, [pc, #28]	; (8003828 <UART_get+0x2c>)
 800380a:	f7fe f9ab 	bl	8001b64 <USART_GetFlagStatus>
 800380e:	4603      	mov	r3, r0
 8003810:	2b01      	cmp	r3, #1
 8003812:	d103      	bne.n	800381c <UART_get+0x20>
    	 uart_char= USART2->DR & 0xFF; // and read the data from peripheral
 8003814:	4b04      	ldr	r3, [pc, #16]	; (8003828 <UART_get+0x2c>)
 8003816:	889b      	ldrh	r3, [r3, #4]
 8003818:	b29b      	uxth	r3, r3
 800381a:	71fb      	strb	r3, [r7, #7]
    return uart_char;
 800381c:	79fb      	ldrb	r3, [r7, #7]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	40004400 	.word	0x40004400

0800382c <UART_gets>:
// args: char *readbuffer
//       int   echo, when TRUE, send read-char to UART
// remark: ARM sends -1 if buffer is empty
//         LF is cleared if set in terminal-program
void UART_gets(char *s, int echo)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
	while (1)
	{
	 	*s = UART_get();
 8003836:	f7ff ffe1 	bl	80037fc <UART_get>
 800383a:	4603      	mov	r3, r0
 800383c:	461a      	mov	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	701a      	strb	r2, [r3, #0]

	 	if (*s==-1)             // check for data available
	 		continue;

	 	if (*s==0xff || *s==LF) // if no data or LF, continue
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2bff      	cmp	r3, #255	; 0xff
 8003848:	d017      	beq.n	800387a <UART_gets+0x4e>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b0a      	cmp	r3, #10
 8003850:	d013      	beq.n	800387a <UART_gets+0x4e>
			continue;

		if (echo)              // if output-flag set
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d004      	beq.n	8003862 <UART_gets+0x36>
			UART_putchar(*s);  // to read what u entered
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff fed7 	bl	8003610 <UART_putchar>

		if (*s==CR)            // if enter pressed
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	2b0d      	cmp	r3, #13
 8003868:	d103      	bne.n	8003872 <UART_gets+0x46>
		{
			*s = '\0';         // ignore char and close string
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	701a      	strb	r2, [r3, #0]
		    return;            // buf ready, exit loop
 8003870:	e005      	b.n	800387e <UART_gets+0x52>
		}
		s++;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	3301      	adds	r3, #1
 8003876:	607b      	str	r3, [r7, #4]
 8003878:	e7dd      	b.n	8003836 <UART_gets+0xa>
			continue;
 800387a:	bf00      	nop
	 	*s = UART_get();
 800387c:	e7db      	b.n	8003836 <UART_gets+0xa>
	}
}
 800387e:	3708      	adds	r7, #8
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003884:	f8df d034 	ldr.w	sp, [pc, #52]	; 80038bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003888:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800388a:	e003      	b.n	8003894 <LoopCopyDataInit>

0800388c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800388c:	4b0c      	ldr	r3, [pc, #48]	; (80038c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800388e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003890:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003892:	3104      	adds	r1, #4

08003894 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003894:	480b      	ldr	r0, [pc, #44]	; (80038c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003896:	4b0c      	ldr	r3, [pc, #48]	; (80038c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003898:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800389a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800389c:	d3f6      	bcc.n	800388c <CopyDataInit>
  ldr  r2, =_sbss
 800389e:	4a0b      	ldr	r2, [pc, #44]	; (80038cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80038a0:	e002      	b.n	80038a8 <LoopFillZerobss>

080038a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80038a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80038a4:	f842 3b04 	str.w	r3, [r2], #4

080038a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80038a8:	4b09      	ldr	r3, [pc, #36]	; (80038d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80038aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80038ac:	d3f9      	bcc.n	80038a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80038ae:	f000 f841 	bl	8003934 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038b2:	f000 fe3d 	bl	8004530 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038b6:	f7ff fac7 	bl	8002e48 <main>
  bx  lr    
 80038ba:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80038bc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80038c0:	08009890 	.word	0x08009890
  ldr  r0, =_sdata
 80038c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80038c8:	200003c8 	.word	0x200003c8
  ldr  r2, =_sbss
 80038cc:	200003c8 	.word	0x200003c8
  ldr  r3, = _ebss
 80038d0:	2001316c 	.word	0x2001316c

080038d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038d4:	e7fe      	b.n	80038d4 <ADC_IRQHandler>

080038d6 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80038d6:	b480      	push	{r7}
 80038d8:	af00      	add	r7, sp, #0
}
 80038da:	bf00      	nop
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80038e8:	e7fe      	b.n	80038e8 <HardFault_Handler+0x4>

080038ea <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80038ea:	b480      	push	{r7}
 80038ec:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80038ee:	e7fe      	b.n	80038ee <MemManage_Handler+0x4>

080038f0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80038f4:	e7fe      	b.n	80038f4 <BusFault_Handler+0x4>

080038f6 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80038f6:	b480      	push	{r7}
 80038f8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80038fa:	e7fe      	b.n	80038fa <UsageFault_Handler+0x4>

080038fc <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
}
 8003900:	bf00      	nop
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800390a:	b480      	push	{r7}
 800390c:	af00      	add	r7, sp, #0
}
 800390e:	bf00      	nop
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
}
 800391c:	bf00      	nop
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8003926:	b480      	push	{r7}
 8003928:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 800392a:	bf00      	nop
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003938:	4a16      	ldr	r2, [pc, #88]	; (8003994 <SystemInit+0x60>)
 800393a:	4b16      	ldr	r3, [pc, #88]	; (8003994 <SystemInit+0x60>)
 800393c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003940:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003944:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003948:	4a13      	ldr	r2, [pc, #76]	; (8003998 <SystemInit+0x64>)
 800394a:	4b13      	ldr	r3, [pc, #76]	; (8003998 <SystemInit+0x64>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f043 0301 	orr.w	r3, r3, #1
 8003952:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003954:	4b10      	ldr	r3, [pc, #64]	; (8003998 <SystemInit+0x64>)
 8003956:	2200      	movs	r2, #0
 8003958:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800395a:	4a0f      	ldr	r2, [pc, #60]	; (8003998 <SystemInit+0x64>)
 800395c:	4b0e      	ldr	r3, [pc, #56]	; (8003998 <SystemInit+0x64>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003964:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003968:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800396a:	4b0b      	ldr	r3, [pc, #44]	; (8003998 <SystemInit+0x64>)
 800396c:	4a0b      	ldr	r2, [pc, #44]	; (800399c <SystemInit+0x68>)
 800396e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003970:	4a09      	ldr	r2, [pc, #36]	; (8003998 <SystemInit+0x64>)
 8003972:	4b09      	ldr	r3, [pc, #36]	; (8003998 <SystemInit+0x64>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800397a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800397c:	4b06      	ldr	r3, [pc, #24]	; (8003998 <SystemInit+0x64>)
 800397e:	2200      	movs	r2, #0
 8003980:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8003982:	f000 f80d 	bl	80039a0 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003986:	4b03      	ldr	r3, [pc, #12]	; (8003994 <SystemInit+0x60>)
 8003988:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800398c:	609a      	str	r2, [r3, #8]
#endif
}
 800398e:	bf00      	nop
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	e000ed00 	.word	0xe000ed00
 8003998:	40023800 	.word	0x40023800
 800399c:	24003010 	.word	0x24003010

080039a0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80039a6:	2300      	movs	r3, #0
 80039a8:	607b      	str	r3, [r7, #4]
 80039aa:	2300      	movs	r3, #0
 80039ac:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80039ae:	4a36      	ldr	r2, [pc, #216]	; (8003a88 <SetSysClock+0xe8>)
 80039b0:	4b35      	ldr	r3, [pc, #212]	; (8003a88 <SetSysClock+0xe8>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039b8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80039ba:	4b33      	ldr	r3, [pc, #204]	; (8003a88 <SetSysClock+0xe8>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	3301      	adds	r3, #1
 80039c8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d103      	bne.n	80039d8 <SetSysClock+0x38>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80039d6:	d1f0      	bne.n	80039ba <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80039d8:	4b2b      	ldr	r3, [pc, #172]	; (8003a88 <SetSysClock+0xe8>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d002      	beq.n	80039ea <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80039e4:	2301      	movs	r3, #1
 80039e6:	603b      	str	r3, [r7, #0]
 80039e8:	e001      	b.n	80039ee <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80039ea:	2300      	movs	r3, #0
 80039ec:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d142      	bne.n	8003a7a <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80039f4:	4a24      	ldr	r2, [pc, #144]	; (8003a88 <SetSysClock+0xe8>)
 80039f6:	4b24      	ldr	r3, [pc, #144]	; (8003a88 <SetSysClock+0xe8>)
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039fe:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8003a00:	4a22      	ldr	r2, [pc, #136]	; (8003a8c <SetSysClock+0xec>)
 8003a02:	4b22      	ldr	r3, [pc, #136]	; (8003a8c <SetSysClock+0xec>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a0a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003a0c:	4a1e      	ldr	r2, [pc, #120]	; (8003a88 <SetSysClock+0xe8>)
 8003a0e:	4b1e      	ldr	r3, [pc, #120]	; (8003a88 <SetSysClock+0xe8>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003a14:	4a1c      	ldr	r2, [pc, #112]	; (8003a88 <SetSysClock+0xe8>)
 8003a16:	4b1c      	ldr	r3, [pc, #112]	; (8003a88 <SetSysClock+0xe8>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a1e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003a20:	4a19      	ldr	r2, [pc, #100]	; (8003a88 <SetSysClock+0xe8>)
 8003a22:	4b19      	ldr	r3, [pc, #100]	; (8003a88 <SetSysClock+0xe8>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8003a2a:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003a2c:	4b16      	ldr	r3, [pc, #88]	; (8003a88 <SetSysClock+0xe8>)
 8003a2e:	4a18      	ldr	r2, [pc, #96]	; (8003a90 <SetSysClock+0xf0>)
 8003a30:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003a32:	4a15      	ldr	r2, [pc, #84]	; (8003a88 <SetSysClock+0xe8>)
 8003a34:	4b14      	ldr	r3, [pc, #80]	; (8003a88 <SetSysClock+0xe8>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a3c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003a3e:	bf00      	nop
 8003a40:	4b11      	ldr	r3, [pc, #68]	; (8003a88 <SetSysClock+0xe8>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d0f9      	beq.n	8003a40 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003a4c:	4b11      	ldr	r3, [pc, #68]	; (8003a94 <SetSysClock+0xf4>)
 8003a4e:	f240 6205 	movw	r2, #1541	; 0x605
 8003a52:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003a54:	4a0c      	ldr	r2, [pc, #48]	; (8003a88 <SetSysClock+0xe8>)
 8003a56:	4b0c      	ldr	r3, [pc, #48]	; (8003a88 <SetSysClock+0xe8>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f023 0303 	bic.w	r3, r3, #3
 8003a5e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003a60:	4a09      	ldr	r2, [pc, #36]	; (8003a88 <SetSysClock+0xe8>)
 8003a62:	4b09      	ldr	r3, [pc, #36]	; (8003a88 <SetSysClock+0xe8>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f043 0302 	orr.w	r3, r3, #2
 8003a6a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8003a6c:	bf00      	nop
 8003a6e:	4b06      	ldr	r3, [pc, #24]	; (8003a88 <SetSysClock+0xe8>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 030c 	and.w	r3, r3, #12
 8003a76:	2b08      	cmp	r3, #8
 8003a78:	d1f9      	bne.n	8003a6e <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	40007000 	.word	0x40007000
 8003a90:	07405408 	.word	0x07405408
 8003a94:	40023c00 	.word	0x40023c00

08003a98 <UB_VGA_Screen_Init>:

//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
  uint16_t xp,yp;

  VGA.hsync_cnt=0;
 8003a9e:	4b1b      	ldr	r3, [pc, #108]	; (8003b0c <UB_VGA_Screen_Init+0x74>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	801a      	strh	r2, [r3, #0]
  VGA.start_adr=0;
 8003aa4:	4b19      	ldr	r3, [pc, #100]	; (8003b0c <UB_VGA_Screen_Init+0x74>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg=0;
 8003aaa:	4b18      	ldr	r3, [pc, #96]	; (8003b0c <UB_VGA_Screen_Init+0x74>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	609a      	str	r2, [r3, #8]

  // RAM init total black
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	80bb      	strh	r3, [r7, #4]
 8003ab4:	e017      	b.n	8003ae6 <UB_VGA_Screen_Init+0x4e>
    for(xp=0;xp<(VGA_DISPLAY_X+1);xp++) {
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	80fb      	strh	r3, [r7, #6]
 8003aba:	e00d      	b.n	8003ad8 <UB_VGA_Screen_Init+0x40>
      VGA_RAM1[(yp*(VGA_DISPLAY_X+1))+xp]=0;
 8003abc:	88ba      	ldrh	r2, [r7, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4413      	add	r3, r2
 8003ac4:	019b      	lsls	r3, r3, #6
 8003ac6:	441a      	add	r2, r3
 8003ac8:	88fb      	ldrh	r3, [r7, #6]
 8003aca:	4413      	add	r3, r2
 8003acc:	4a10      	ldr	r2, [pc, #64]	; (8003b10 <UB_VGA_Screen_Init+0x78>)
 8003ace:	2100      	movs	r1, #0
 8003ad0:	54d1      	strb	r1, [r2, r3]
    for(xp=0;xp<(VGA_DISPLAY_X+1);xp++) {
 8003ad2:	88fb      	ldrh	r3, [r7, #6]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	80fb      	strh	r3, [r7, #6]
 8003ad8:	88fb      	ldrh	r3, [r7, #6]
 8003ada:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003ade:	d9ed      	bls.n	8003abc <UB_VGA_Screen_Init+0x24>
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8003ae0:	88bb      	ldrh	r3, [r7, #4]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	80bb      	strh	r3, [r7, #4]
 8003ae6:	88bb      	ldrh	r3, [r7, #4]
 8003ae8:	2bef      	cmp	r3, #239	; 0xef
 8003aea:	d9e4      	bls.n	8003ab6 <UB_VGA_Screen_Init+0x1e>
    }
  }

  // init IO-Pins
  P_VGA_InitIO();
 8003aec:	f000 f85e 	bl	8003bac <P_VGA_InitIO>
  // init Timer
  P_VGA_InitTIM();
 8003af0:	f000 f8b0 	bl	8003c54 <P_VGA_InitTIM>
  // init DMA
  P_VGA_InitDMA();
 8003af4:	f000 f940 	bl	8003d78 <P_VGA_InitDMA>
  // init Interrupts
  P_VGA_InitINT();
 8003af8:	f000 f912 	bl	8003d20 <P_VGA_InitINT>

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg=DMA2_Stream5->CR;
 8003afc:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <UB_VGA_Screen_Init+0x7c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a02      	ldr	r2, [pc, #8]	; (8003b0c <UB_VGA_Screen_Init+0x74>)
 8003b02:	6093      	str	r3, [r2, #8]
}
 8003b04:	bf00      	nop
 8003b06:	3708      	adds	r7, #8
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	2000046c 	.word	0x2000046c
 8003b10:	20000478 	.word	0x20000478
 8003b14:	40026488 	.word	0x40026488

08003b18 <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	4603      	mov	r3, r0
 8003b20:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8003b22:	2300      	movs	r3, #0
 8003b24:	81bb      	strh	r3, [r7, #12]
 8003b26:	e012      	b.n	8003b4e <UB_VGA_FillScreen+0x36>
    for(xp=0;xp<VGA_DISPLAY_X;xp++) {
 8003b28:	2300      	movs	r3, #0
 8003b2a:	81fb      	strh	r3, [r7, #14]
 8003b2c:	e008      	b.n	8003b40 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp,yp,color);
 8003b2e:	79fa      	ldrb	r2, [r7, #7]
 8003b30:	89b9      	ldrh	r1, [r7, #12]
 8003b32:	89fb      	ldrh	r3, [r7, #14]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 f811 	bl	8003b5c <UB_VGA_SetPixel>
    for(xp=0;xp<VGA_DISPLAY_X;xp++) {
 8003b3a:	89fb      	ldrh	r3, [r7, #14]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	81fb      	strh	r3, [r7, #14]
 8003b40:	89fb      	ldrh	r3, [r7, #14]
 8003b42:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003b46:	d3f2      	bcc.n	8003b2e <UB_VGA_FillScreen+0x16>
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8003b48:	89bb      	ldrh	r3, [r7, #12]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	81bb      	strh	r3, [r7, #12]
 8003b4e:	89bb      	ldrh	r3, [r7, #12]
 8003b50:	2bef      	cmp	r3, #239	; 0xef
 8003b52:	d9e9      	bls.n	8003b28 <UB_VGA_FillScreen+0x10>
    }
  }
}
 8003b54:	bf00      	nop
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	4603      	mov	r3, r0
 8003b64:	80fb      	strh	r3, [r7, #6]
 8003b66:	460b      	mov	r3, r1
 8003b68:	80bb      	strh	r3, [r7, #4]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	70fb      	strb	r3, [r7, #3]
  if(xp>=VGA_DISPLAY_X) xp=0;
 8003b6e:	88fb      	ldrh	r3, [r7, #6]
 8003b70:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003b74:	d301      	bcc.n	8003b7a <UB_VGA_SetPixel+0x1e>
 8003b76:	2300      	movs	r3, #0
 8003b78:	80fb      	strh	r3, [r7, #6]
  if(yp>=VGA_DISPLAY_Y) yp=0;
 8003b7a:	88bb      	ldrh	r3, [r7, #4]
 8003b7c:	2bef      	cmp	r3, #239	; 0xef
 8003b7e:	d901      	bls.n	8003b84 <UB_VGA_SetPixel+0x28>
 8003b80:	2300      	movs	r3, #0
 8003b82:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp*(VGA_DISPLAY_X+1))+xp]=color;
 8003b84:	88ba      	ldrh	r2, [r7, #4]
 8003b86:	4613      	mov	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	019b      	lsls	r3, r3, #6
 8003b8e:	441a      	add	r2, r3
 8003b90:	88fb      	ldrh	r3, [r7, #6]
 8003b92:	4413      	add	r3, r2
 8003b94:	4904      	ldr	r1, [pc, #16]	; (8003ba8 <UB_VGA_SetPixel+0x4c>)
 8003b96:	78fa      	ldrb	r2, [r7, #3]
 8003b98:	54ca      	strb	r2, [r1, r3]
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	20000478 	.word	0x20000478

08003bac <P_VGA_InitIO>:
//--------------------------------------------------------------
// interne Funktionen
// init aller IO-Pins
//--------------------------------------------------------------
void P_VGA_InitIO(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
  // init RGB-Pins (PE8 - PE15)
  // as normal GPIOs
  //---------------------------------------------
 
  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	2010      	movs	r0, #16
 8003bb6:	f7fd fc13 	bl	80013e0 <RCC_AHB1PeriphClockCmd>

  // Config as Digital output
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 |
 8003bba:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8003bbe:	603b      	str	r3, [r7, #0]
        GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOE, &GPIO_InitStructure);
 8003bd0:	463b      	mov	r3, r7
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	481d      	ldr	r0, [pc, #116]	; (8003c4c <P_VGA_InitIO+0xa0>)
 8003bd6:	f7fd fa4b 	bl	8001070 <GPIO_Init>

  GPIOE->BSRRH = VGA_GPIO_HINIBBLE;
 8003bda:	4b1c      	ldr	r3, [pc, #112]	; (8003c4c <P_VGA_InitIO+0xa0>)
 8003bdc:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8003be0:	835a      	strh	r2, [r3, #26]
  // init of the H-Sync Pin (PB11)
  // using Timer2 and CH4
  //---------------------------------------------

  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8003be2:	2101      	movs	r1, #1
 8003be4:	2002      	movs	r0, #2
 8003be6:	f7fd fbfb 	bl	80013e0 <RCC_AHB1PeriphClockCmd>

  // Config Pins as Digital-out
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 8003bea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003bee:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003c00:	463b      	mov	r3, r7
 8003c02:	4619      	mov	r1, r3
 8003c04:	4812      	ldr	r0, [pc, #72]	; (8003c50 <P_VGA_InitIO+0xa4>)
 8003c06:	f7fd fa33 	bl	8001070 <GPIO_Init>

  // alternative function connect with IO
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_TIM2);
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	210b      	movs	r1, #11
 8003c0e:	4810      	ldr	r0, [pc, #64]	; (8003c50 <P_VGA_InitIO+0xa4>)
 8003c10:	f7fd faf4 	bl	80011fc <GPIO_PinAFConfig>
  // init of V-Sync Pin (PB12)
  // using GPIO
  //---------------------------------------------

  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8003c14:	2101      	movs	r1, #1
 8003c16:	2002      	movs	r0, #2
 8003c18:	f7fd fbe2 	bl	80013e0 <RCC_AHB1PeriphClockCmd>

  // Config of the Pins as Digital out
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 8003c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c20:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8003c22:	2301      	movs	r3, #1
 8003c24:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8003c26:	2300      	movs	r3, #0
 8003c28:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003c32:	463b      	mov	r3, r7
 8003c34:	4619      	mov	r1, r3
 8003c36:	4806      	ldr	r0, [pc, #24]	; (8003c50 <P_VGA_InitIO+0xa4>)
 8003c38:	f7fd fa1a 	bl	8001070 <GPIO_Init>

  GPIOB->BSRRL = GPIO_Pin_12;
 8003c3c:	4b04      	ldr	r3, [pc, #16]	; (8003c50 <P_VGA_InitIO+0xa4>)
 8003c3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c42:	831a      	strh	r2, [r3, #24]
}
 8003c44:	bf00      	nop
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	40021000 	.word	0x40021000
 8003c50:	40020400 	.word	0x40020400

08003c54 <P_VGA_InitTIM>:
//--------------------------------------------------------------
// internal Function
// init Timer
//--------------------------------------------------------------
void P_VGA_InitTIM(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b088      	sub	sp, #32
 8003c58:	af00      	add	r7, sp, #0
  // init of Timer1 for
  // Pixeldata via DMA
  //---------------------------------------------

  // Clock enable
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	2001      	movs	r0, #1
 8003c5e:	f7fd fbff 	bl	8001460 <RCC_APB2PeriphClockCmd>

  // Timer1 init
  TIM_TimeBaseStructure.TIM_Period =  VGA_TIM1_PERIODE;
 8003c62:	230b      	movs	r3, #11
 8003c64:	61bb      	str	r3, [r7, #24]
  TIM_TimeBaseStructure.TIM_Prescaler = VGA_TIM1_PRESCALE;
 8003c66:	2300      	movs	r3, #0
 8003c68:	82bb      	strh	r3, [r7, #20]
  TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	83bb      	strh	r3, [r7, #28]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	82fb      	strh	r3, [r7, #22]
  TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 8003c72:	f107 0314 	add.w	r3, r7, #20
 8003c76:	4619      	mov	r1, r3
 8003c78:	4828      	ldr	r0, [pc, #160]	; (8003d1c <P_VGA_InitTIM+0xc8>)
 8003c7a:	f7fd fc11 	bl	80014a0 <TIM_TimeBaseInit>
  // CH4 for HSYNC-Signal
  // CH3 for DMA Trigger start
  //---------------------------------------------

  // Clock enable
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8003c7e:	2101      	movs	r1, #1
 8003c80:	2001      	movs	r0, #1
 8003c82:	f7fd fbcd 	bl	8001420 <RCC_APB1PeriphClockCmd>

  // Timer2 init
  TIM_TimeBaseStructure.TIM_Period = VGA_TIM2_HSYNC_PERIODE;
 8003c86:	f640 236b 	movw	r3, #2667	; 0xa6b
 8003c8a:	61bb      	str	r3, [r7, #24]
  TIM_TimeBaseStructure.TIM_Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	82bb      	strh	r3, [r7, #20]
  TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8003c90:	2300      	movs	r3, #0
 8003c92:	83bb      	strh	r3, [r7, #28]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8003c94:	2300      	movs	r3, #0
 8003c96:	82fb      	strh	r3, [r7, #22]
  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8003c98:	f107 0314 	add.w	r3, r7, #20
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003ca2:	f7fd fbfd 	bl	80014a0 <TIM_TimeBaseInit>

  // Timer2 Channel 3 ( for DMA Trigger start)
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8003ca6:	2360      	movs	r3, #96	; 0x60
 8003ca8:	803b      	strh	r3, [r7, #0]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8003caa:	2301      	movs	r3, #1
 8003cac:	807b      	strh	r3, [r7, #2]
  TIM_OCInitStructure.TIM_Pulse = VGA_TIM2_HTRIGGER_START-VGA_TIM2_DMA_DELAY;
 8003cae:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8003cb2:	60bb      	str	r3, [r7, #8]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	81bb      	strh	r3, [r7, #12]
  TIM_OC3Init(TIM2, &TIM_OCInitStructure);
 8003cb8:	463b      	mov	r3, r7
 8003cba:	4619      	mov	r1, r3
 8003cbc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003cc0:	f7fd fc9a 	bl	80015f8 <TIM_OC3Init>
  TIM_OC3PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8003cc4:	2108      	movs	r1, #8
 8003cc6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003cca:	f7fd fd83 	bl	80017d4 <TIM_OC3PreloadConfig>

  // Timer2 Channel 4 (for HSYNC)
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8003cce:	2360      	movs	r3, #96	; 0x60
 8003cd0:	803b      	strh	r3, [r7, #0]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	807b      	strh	r3, [r7, #2]
  TIM_OCInitStructure.TIM_Pulse = VGA_TIM2_HSYNC_IMP;
 8003cd6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003cda:	60bb      	str	r3, [r7, #8]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8003cdc:	2302      	movs	r3, #2
 8003cde:	81bb      	strh	r3, [r7, #12]
  TIM_OC4Init(TIM2, &TIM_OCInitStructure);
 8003ce0:	463b      	mov	r3, r7
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003ce8:	f7fd fd0c 	bl	8001704 <TIM_OC4Init>
  TIM_OC4PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8003cec:	2108      	movs	r1, #8
 8003cee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003cf2:	f7fd fd8b 	bl	800180c <TIM_OC4PreloadConfig>
  //---------------------------------------------
  // enable all Timers
  //---------------------------------------------

  // Timer1 enable
  TIM_ARRPreloadConfig(TIM1, ENABLE);
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	4808      	ldr	r0, [pc, #32]	; (8003d1c <P_VGA_InitTIM+0xc8>)
 8003cfa:	f7fd fc3d 	bl	8001578 <TIM_ARRPreloadConfig>

  // Timer2 enable
  TIM_ARRPreloadConfig(TIM2, ENABLE);
 8003cfe:	2101      	movs	r1, #1
 8003d00:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003d04:	f7fd fc38 	bl	8001578 <TIM_ARRPreloadConfig>
  TIM_Cmd(TIM2, ENABLE);
 8003d08:	2101      	movs	r1, #1
 8003d0a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003d0e:	f7fd fc53 	bl	80015b8 <TIM_Cmd>

}
 8003d12:	bf00      	nop
 8003d14:	3720      	adds	r7, #32
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40010000 	.word	0x40010000

08003d20 <P_VGA_InitINT>:
//--------------------------------------------------------------
// internal Function
// init Interrupts
//--------------------------------------------------------------
void P_VGA_InitINT(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
  // init from DMA Interrupt
  // for TransferComplete Interrupt
  // DMA2, Stream5, Channel6
  //---------------------------------------------

  DMA_ITConfig(DMA2_Stream5, DMA_IT_TC, ENABLE);
 8003d26:	2201      	movs	r2, #1
 8003d28:	2110      	movs	r1, #16
 8003d2a:	4812      	ldr	r0, [pc, #72]	; (8003d74 <P_VGA_InitINT+0x54>)
 8003d2c:	f7fd f8e0 	bl	8000ef0 <DMA_ITConfig>

  // NVIC config
  NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream5_IRQn;
 8003d30:	2344      	movs	r3, #68	; 0x44
 8003d32:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8003d34:	2300      	movs	r3, #0
 8003d36:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 8003d40:	1d3b      	adds	r3, r7, #4
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fc ff2a 	bl	8000b9c <NVIC_Init>
  // init of Timer2 Interrupt
  // for HSync-Counter using Update
  // for DMA Trigger START using CH3
  //---------------------------------------------

  TIM_ITConfig(TIM2,TIM_IT_CC3,ENABLE);
 8003d48:	2201      	movs	r2, #1
 8003d4a:	2108      	movs	r1, #8
 8003d4c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003d50:	f7fd fd7a 	bl	8001848 <TIM_ITConfig>

  // NVIC config
  NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 8003d54:	231c      	movs	r3, #28
 8003d56:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8003d60:	2301      	movs	r3, #1
 8003d62:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 8003d64:	1d3b      	adds	r3, r7, #4
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fc ff18 	bl	8000b9c <NVIC_Init>
}
 8003d6c:	bf00      	nop
 8003d6e:	3708      	adds	r7, #8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	40026488 	.word	0x40026488

08003d78 <P_VGA_InitDMA>:
//--------------------------------------------------------------
// internal Function
// init DMA
//--------------------------------------------------------------
void P_VGA_InitDMA(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b090      	sub	sp, #64	; 0x40
 8003d7c:	af00      	add	r7, sp, #0
  // (look at page 217 of the Ref Manual)
  // DMA=2, Channel=6, Stream=5
  //---------------------------------------------

  // Clock Enable (DMA)
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 8003d7e:	2101      	movs	r1, #1
 8003d80:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8003d84:	f7fd fb2c 	bl	80013e0 <RCC_AHB1PeriphClockCmd>

  // DMA init (DMA2, Channel6, Stream5)
  DMA_Cmd(DMA2_Stream5, DISABLE);
 8003d88:	2100      	movs	r1, #0
 8003d8a:	481b      	ldr	r0, [pc, #108]	; (8003df8 <P_VGA_InitDMA+0x80>)
 8003d8c:	f7fd f894 	bl	8000eb8 <DMA_Cmd>
  DMA_DeInit(DMA2_Stream5);
 8003d90:	4819      	ldr	r0, [pc, #100]	; (8003df8 <P_VGA_InitDMA+0x80>)
 8003d92:	f7fc ff65 	bl	8000c60 <DMA_DeInit>
  DMA_InitStructure.DMA_Channel = DMA_Channel_6;
 8003d96:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8003d9a:	607b      	str	r3, [r7, #4]
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)VGA_GPIOE_ODR_ADDRESS;
 8003d9c:	4b17      	ldr	r3, [pc, #92]	; (8003dfc <P_VGA_InitDMA+0x84>)
 8003d9e:	60bb      	str	r3, [r7, #8]
  DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&VGA_RAM1;
 8003da0:	4b17      	ldr	r3, [pc, #92]	; (8003e00 <P_VGA_InitDMA+0x88>)
 8003da2:	60fb      	str	r3, [r7, #12]
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8003da4:	2340      	movs	r3, #64	; 0x40
 8003da6:	613b      	str	r3, [r7, #16]
  DMA_InitStructure.DMA_BufferSize = VGA_DISPLAY_X+1;
 8003da8:	f240 1341 	movw	r3, #321	; 0x141
 8003dac:	617b      	str	r3, [r7, #20]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8003dae:	2300      	movs	r3, #0
 8003db0:	61bb      	str	r3, [r7, #24]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8003db2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003db6:	61fb      	str	r3, [r7, #28]
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8003db8:	2300      	movs	r3, #0
 8003dba:	623b      	str	r3, [r7, #32]
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	627b      	str	r3, [r7, #36]	; 0x24
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8003dc4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	633b      	str	r3, [r7, #48]	; 0x30
  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	637b      	str	r3, [r7, #52]	; 0x34
  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	63bb      	str	r3, [r7, #56]	; 0x38
  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  DMA_Init(DMA2_Stream5, &DMA_InitStructure);
 8003dda:	1d3b      	adds	r3, r7, #4
 8003ddc:	4619      	mov	r1, r3
 8003dde:	4806      	ldr	r0, [pc, #24]	; (8003df8 <P_VGA_InitDMA+0x80>)
 8003de0:	f7fd f812 	bl	8000e08 <DMA_Init>

  // DMA-Timer1 enable
  TIM_DMACmd(TIM1,TIM_DMA_Update,ENABLE);
 8003de4:	2201      	movs	r2, #1
 8003de6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003dea:	4806      	ldr	r0, [pc, #24]	; (8003e04 <P_VGA_InitDMA+0x8c>)
 8003dec:	f7fd fd61 	bl	80018b2 <TIM_DMACmd>
}
 8003df0:	bf00      	nop
 8003df2:	3740      	adds	r7, #64	; 0x40
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	40026488 	.word	0x40026488
 8003dfc:	40021015 	.word	0x40021015
 8003e00:	20000478 	.word	0x20000478
 8003e04:	40010000 	.word	0x40010000

08003e08 <TIM2_IRQHandler>:
//
//   CC3-Interrupt    -> starts from DMA
// Watch it.. higher troughput when interrupt flag is left alone
//--------------------------------------------------------------
void TIM2_IRQHandler(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0

  // Interrupt of Timer2 CH3 occurred (for Trigger start)
  TIM_ClearITPendingBit(TIM2, TIM_IT_CC3);
 8003e0c:	2108      	movs	r1, #8
 8003e0e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003e12:	f7fd fd3d 	bl	8001890 <TIM_ClearITPendingBit>

  VGA.hsync_cnt++;
 8003e16:	4b26      	ldr	r3, [pc, #152]	; (8003eb0 <TIM2_IRQHandler+0xa8>)
 8003e18:	881b      	ldrh	r3, [r3, #0]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	4b24      	ldr	r3, [pc, #144]	; (8003eb0 <TIM2_IRQHandler+0xa8>)
 8003e20:	801a      	strh	r2, [r3, #0]
  if(VGA.hsync_cnt>=VGA_VSYNC_PERIODE) {
 8003e22:	4b23      	ldr	r3, [pc, #140]	; (8003eb0 <TIM2_IRQHandler+0xa8>)
 8003e24:	881b      	ldrh	r3, [r3, #0]
 8003e26:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8003e2a:	d905      	bls.n	8003e38 <TIM2_IRQHandler+0x30>
    // -----------
    VGA.hsync_cnt=0;
 8003e2c:	4b20      	ldr	r3, [pc, #128]	; (8003eb0 <TIM2_IRQHandler+0xa8>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr=(uint32_t)(&VGA_RAM1[0]);
 8003e32:	4a20      	ldr	r2, [pc, #128]	; (8003eb4 <TIM2_IRQHandler+0xac>)
 8003e34:	4b1e      	ldr	r3, [pc, #120]	; (8003eb0 <TIM2_IRQHandler+0xa8>)
 8003e36:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  if(VGA.hsync_cnt<VGA_VSYNC_IMP) {
 8003e38:	4b1d      	ldr	r3, [pc, #116]	; (8003eb0 <TIM2_IRQHandler+0xa8>)
 8003e3a:	881b      	ldrh	r3, [r3, #0]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d804      	bhi.n	8003e4a <TIM2_IRQHandler+0x42>
    // HSync low
    GPIOB->BSRRH = GPIO_Pin_12;
 8003e40:	4b1d      	ldr	r3, [pc, #116]	; (8003eb8 <TIM2_IRQHandler+0xb0>)
 8003e42:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e46:	835a      	strh	r2, [r3, #26]
 8003e48:	e003      	b.n	8003e52 <TIM2_IRQHandler+0x4a>
  }
  else {
    // HSync High
    GPIOB->BSRRL = GPIO_Pin_12;
 8003e4a:	4b1b      	ldr	r3, [pc, #108]	; (8003eb8 <TIM2_IRQHandler+0xb0>)
 8003e4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e50:	831a      	strh	r2, [r3, #24]
  }

  // Test for DMA start
  if((VGA.hsync_cnt>=VGA_VSYNC_BILD_START) && (VGA.hsync_cnt<=VGA_VSYNC_BILD_STOP)) {
 8003e52:	4b17      	ldr	r3, [pc, #92]	; (8003eb0 <TIM2_IRQHandler+0xa8>)
 8003e54:	881b      	ldrh	r3, [r3, #0]
 8003e56:	2b23      	cmp	r3, #35	; 0x23
 8003e58:	d927      	bls.n	8003eaa <TIM2_IRQHandler+0xa2>
 8003e5a:	4b15      	ldr	r3, [pc, #84]	; (8003eb0 <TIM2_IRQHandler+0xa8>)
 8003e5c:	881b      	ldrh	r3, [r3, #0]
 8003e5e:	f240 2202 	movw	r2, #514	; 0x202
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d821      	bhi.n	8003eaa <TIM2_IRQHandler+0xa2>
    // after FP start => DMA Transfer

    // DMA2 init
	DMA2_Stream5->CR=VGA.dma2_cr_reg;
 8003e66:	4a15      	ldr	r2, [pc, #84]	; (8003ebc <TIM2_IRQHandler+0xb4>)
 8003e68:	4b11      	ldr	r3, [pc, #68]	; (8003eb0 <TIM2_IRQHandler+0xa8>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR=VGA.start_adr;
 8003e6e:	4a13      	ldr	r2, [pc, #76]	; (8003ebc <TIM2_IRQHandler+0xb4>)
 8003e70:	4b0f      	ldr	r3, [pc, #60]	; (8003eb0 <TIM2_IRQHandler+0xa8>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1|=TIM_CR1_CEN;
 8003e76:	4a12      	ldr	r2, [pc, #72]	; (8003ec0 <TIM2_IRQHandler+0xb8>)
 8003e78:	4b11      	ldr	r3, [pc, #68]	; (8003ec0 <TIM2_IRQHandler+0xb8>)
 8003e7a:	881b      	ldrh	r3, [r3, #0]
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	f043 0301 	orr.w	r3, r3, #1
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	8013      	strh	r3, [r2, #0]
    // DMA2 enable
    DMA2_Stream5->CR|=DMA_SxCR_EN;
 8003e86:	4a0d      	ldr	r2, [pc, #52]	; (8003ebc <TIM2_IRQHandler+0xb4>)
 8003e88:	4b0c      	ldr	r3, [pc, #48]	; (8003ebc <TIM2_IRQHandler+0xb4>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f043 0301 	orr.w	r3, r3, #1
 8003e90:	6013      	str	r3, [r2, #0]

    // Test Adrespointer for high
    if((VGA.hsync_cnt & 0x01)!=0) {
 8003e92:	4b07      	ldr	r3, [pc, #28]	; (8003eb0 <TIM2_IRQHandler+0xa8>)
 8003e94:	881b      	ldrh	r3, [r3, #0]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d005      	beq.n	8003eaa <TIM2_IRQHandler+0xa2>
      // inc after Hsync
      VGA.start_adr+=(VGA_DISPLAY_X+1);
 8003e9e:	4b04      	ldr	r3, [pc, #16]	; (8003eb0 <TIM2_IRQHandler+0xa8>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f203 1341 	addw	r3, r3, #321	; 0x141
 8003ea6:	4a02      	ldr	r2, [pc, #8]	; (8003eb0 <TIM2_IRQHandler+0xa8>)
 8003ea8:	6053      	str	r3, [r2, #4]
    }
  }
}
 8003eaa:	bf00      	nop
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	2000046c 	.word	0x2000046c
 8003eb4:	20000478 	.word	0x20000478
 8003eb8:	40020400 	.word	0x40020400
 8003ebc:	40026488 	.word	0x40026488
 8003ec0:	40010000 	.word	0x40010000

08003ec4 <DMA2_Stream5_IRQHandler>:
//   after TransferCompleteInterrupt -> stop DMA
//
// still a bit buggy
//--------------------------------------------------------------
void DMA2_Stream5_IRQHandler(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  if(DMA_GetITStatus(DMA2_Stream5, DMA_IT_TCIF5))
 8003ec8:	490d      	ldr	r1, [pc, #52]	; (8003f00 <DMA2_Stream5_IRQHandler+0x3c>)
 8003eca:	480e      	ldr	r0, [pc, #56]	; (8003f04 <DMA2_Stream5_IRQHandler+0x40>)
 8003ecc:	f7fd f84a 	bl	8000f64 <DMA_GetITStatus>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d012      	beq.n	8003efc <DMA2_Stream5_IRQHandler+0x38>
  {
    // TransferInterruptComplete Interrupt from DMA2
    DMA_ClearITPendingBit(DMA2_Stream5, DMA_IT_TCIF5);
 8003ed6:	490a      	ldr	r1, [pc, #40]	; (8003f00 <DMA2_Stream5_IRQHandler+0x3c>)
 8003ed8:	480a      	ldr	r0, [pc, #40]	; (8003f04 <DMA2_Stream5_IRQHandler+0x40>)
 8003eda:	f7fd f89b 	bl	8001014 <DMA_ClearITPendingBit>
    // stop after all pixels => DMA Transfer stop

    // Timer1 stop
    TIM1->CR1&=~TIM_CR1_CEN;
 8003ede:	4a0a      	ldr	r2, [pc, #40]	; (8003f08 <DMA2_Stream5_IRQHandler+0x44>)
 8003ee0:	4b09      	ldr	r3, [pc, #36]	; (8003f08 <DMA2_Stream5_IRQHandler+0x44>)
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	f023 0301 	bic.w	r3, r3, #1
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	8013      	strh	r3, [r2, #0]
    // DMA2 disable
    DMA2_Stream5->CR=0;
 8003eee:	4b05      	ldr	r3, [pc, #20]	; (8003f04 <DMA2_Stream5_IRQHandler+0x40>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	601a      	str	r2, [r3, #0]
    // switch on black
    GPIOE->BSRRH = VGA_GPIO_HINIBBLE;
 8003ef4:	4b05      	ldr	r3, [pc, #20]	; (8003f0c <DMA2_Stream5_IRQHandler+0x48>)
 8003ef6:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8003efa:	835a      	strh	r2, [r3, #26]
  }
}
 8003efc:	bf00      	nop
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	20008800 	.word	0x20008800
 8003f04:	40026488 	.word	0x40026488
 8003f08:	40010000 	.word	0x40010000
 8003f0c:	40021000 	.word	0x40021000

08003f10 <UART_tokens>:

/* Get input commands, split them and return them
 * Call UART_tokens_clear() after calling this function
 */
char ** UART_tokens()
{
 8003f10:	b590      	push	{r4, r7, lr}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
	char **array = NULL; // By using NULL, the first time realloc will run, it will act as a malloc function.
 8003f16:	2300      	movs	r3, #0
 8003f18:	60fb      	str	r3, [r7, #12]

	unsigned char i = 0;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	72fb      	strb	r3, [r7, #11]
	char *str = (char *) malloc(255); // Allocate memory for the input buffer
 8003f1e:	20ff      	movs	r0, #255	; 0xff
 8003f20:	f000 fb44 	bl	80045ac <malloc>
 8003f24:	4603      	mov	r3, r0
 8003f26:	603b      	str	r3, [r7, #0]
	UART_gets(str, 1); // Grab terminal input commands
 8003f28:	2101      	movs	r1, #1
 8003f2a:	6838      	ldr	r0, [r7, #0]
 8003f2c:	f7ff fc7e 	bl	800382c <UART_gets>
	UART_puts("UART_tokens function:\n");
	UART_puts("Nr:\tUART\tArray\n");
	#endif

	// Extract each variable from the input buffer
	for (char* p = strtok(str, ","); p != NULL; p = strtok(NULL, ",")) {
 8003f30:	491a      	ldr	r1, [pc, #104]	; (8003f9c <UART_tokens+0x8c>)
 8003f32:	6838      	ldr	r0, [r7, #0]
 8003f34:	f000 fc3c 	bl	80047b0 <strtok>
 8003f38:	6078      	str	r0, [r7, #4]
 8003f3a:	e01c      	b.n	8003f76 <UART_tokens+0x66>
		// Write to a new buffer
		array = realloc(array, (i + 1) * sizeof(char*)); // Dynamically increase the size of the array
 8003f3c:	7afb      	ldrb	r3, [r7, #11]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4619      	mov	r1, r3
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f000 fbed 	bl	8004724 <realloc>
 8003f4a:	60f8      	str	r0, [r7, #12]
		array[i] = strlwr(strdup(p)); // Lowercase the string and copy it
 8003f4c:	7afb      	ldrb	r3, [r7, #11]
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	18d4      	adds	r4, r2, r3
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 fbfd 	bl	8004754 <strdup>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f000 fc14 	bl	800478a <strlwr>
 8003f62:	4603      	mov	r3, r0
 8003f64:	6023      	str	r3, [r4, #0]
		UART_puts("\t");
		UART_puts(array[i]); // Copy to array
		UART_puts("\n");
		#endif

		i++;
 8003f66:	7afb      	ldrb	r3, [r7, #11]
 8003f68:	3301      	adds	r3, #1
 8003f6a:	72fb      	strb	r3, [r7, #11]
	for (char* p = strtok(str, ","); p != NULL; p = strtok(NULL, ",")) {
 8003f6c:	490b      	ldr	r1, [pc, #44]	; (8003f9c <UART_tokens+0x8c>)
 8003f6e:	2000      	movs	r0, #0
 8003f70:	f000 fc1e 	bl	80047b0 <strtok>
 8003f74:	6078      	str	r0, [r7, #4]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1df      	bne.n	8003f3c <UART_tokens+0x2c>
	}

	array[i] = NULL; // Add Null to the end so you can easily iterate; check the cleararray() function
 8003f7c:	7afb      	ldrb	r3, [r7, #11]
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	4413      	add	r3, r2
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]

	free(str); // Input buffer isn't needed anymore
 8003f88:	6838      	ldr	r0, [r7, #0]
 8003f8a:	f000 fb17 	bl	80045bc <free>
	str = NULL;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	603b      	str	r3, [r7, #0]

	return array;
 8003f92:	68fb      	ldr	r3, [r7, #12]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3714      	adds	r7, #20
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd90      	pop	{r4, r7, pc}
 8003f9c:	08004e9c 	.word	0x08004e9c

08003fa0 <UART_tokens_clear>:

/* Clears the input commands array to prevent memory leaks
 * Always call this function when you're done with the array.
 */
void UART_tokens_clear(char **array)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
	for(unsigned char i = 0; array[i] != NULL; i++)
 8003fa8:	2300      	movs	r3, #0
 8003faa:	73fb      	strb	r3, [r7, #15]
 8003fac:	e00a      	b.n	8003fc4 <UART_tokens_clear+0x24>
	    free(array[i]);
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 faff 	bl	80045bc <free>
	for(unsigned char i = 0; array[i] != NULL; i++)
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	73fb      	strb	r3, [r7, #15]
 8003fc4:	7bfb      	ldrb	r3, [r7, #15]
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	4413      	add	r3, r2
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1ed      	bne.n	8003fae <UART_tokens_clear+0xe>
	free(array);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 faf2 	bl	80045bc <free>
}
 8003fd8:	bf00      	nop
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <UART_control>:

/* UART control
 * This function will call the functions
 */
void UART_control(char **array)
{
 8003fe0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003fe4:	b089      	sub	sp, #36	; 0x24
 8003fe6:	af04      	add	r7, sp, #16
 8003fe8:	6078      	str	r0, [r7, #4]
	uint8_t err = 0;
 8003fea:	2300      	movs	r3, #0
 8003fec:	73fb      	strb	r3, [r7, #15]

//	if 		(strcmp(array[0], "lijn") == 0)				err = line(atoi(array[1]), atoi(array[2]), atoi(array[3]), atoi(array[4]), atoi(array[5]), array[6]);
	if (strcmp(array[0], "arrow") == 0)			err = arrow(atoi(array[1]), atoi(array[2]), atoi(array[3]), atoi(array[4]), atoi(array[5]), array[6]);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	49b0      	ldr	r1, [pc, #704]	; (80042b4 <UART_control+0x2d4>)
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7fc f8e7 	bl	80001c8 <strcmp>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d136      	bne.n	800406e <UART_control+0x8e>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3304      	adds	r3, #4
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4618      	mov	r0, r3
 8004008:	f000 fa8e 	bl	8004528 <atoi>
 800400c:	4603      	mov	r3, r0
 800400e:	b21c      	sxth	r4, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3308      	adds	r3, #8
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f000 fa86 	bl	8004528 <atoi>
 800401c:	4603      	mov	r3, r0
 800401e:	b21d      	sxth	r5, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	330c      	adds	r3, #12
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4618      	mov	r0, r3
 8004028:	f000 fa7e 	bl	8004528 <atoi>
 800402c:	4603      	mov	r3, r0
 800402e:	b21e      	sxth	r6, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3310      	adds	r3, #16
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4618      	mov	r0, r3
 8004038:	f000 fa76 	bl	8004528 <atoi>
 800403c:	4603      	mov	r3, r0
 800403e:	fa0f f883 	sxth.w	r8, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	3314      	adds	r3, #20
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4618      	mov	r0, r3
 800404a:	f000 fa6d 	bl	8004528 <atoi>
 800404e:	4603      	mov	r3, r0
 8004050:	b2db      	uxtb	r3, r3
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	3218      	adds	r2, #24
 8004056:	6812      	ldr	r2, [r2, #0]
 8004058:	9201      	str	r2, [sp, #4]
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	4643      	mov	r3, r8
 800405e:	4632      	mov	r2, r6
 8004060:	4629      	mov	r1, r5
 8004062:	4620      	mov	r0, r4
 8004064:	f7fe f974 	bl	8002350 <arrow>
 8004068:	4603      	mov	r3, r0
 800406a:	73fb      	strb	r3, [r7, #15]
 800406c:	e238      	b.n	80044e0 <UART_control+0x500>
	else if (strcmp(array[0], "ellips") == 0)			err = ellipse_filled(atoi(array[1]), atoi(array[2]), atoi(array[3]), atoi(array[4]), array[5]);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4991      	ldr	r1, [pc, #580]	; (80042b8 <UART_control+0x2d8>)
 8004074:	4618      	mov	r0, r3
 8004076:	f7fc f8a7 	bl	80001c8 <strcmp>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d12c      	bne.n	80040da <UART_control+0xfa>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3304      	adds	r3, #4
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4618      	mov	r0, r3
 8004088:	f000 fa4e 	bl	8004528 <atoi>
 800408c:	4603      	mov	r3, r0
 800408e:	b21c      	sxth	r4, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3308      	adds	r3, #8
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4618      	mov	r0, r3
 8004098:	f000 fa46 	bl	8004528 <atoi>
 800409c:	4603      	mov	r3, r0
 800409e:	b21d      	sxth	r5, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	330c      	adds	r3, #12
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 fa3e 	bl	8004528 <atoi>
 80040ac:	4603      	mov	r3, r0
 80040ae:	b21e      	sxth	r6, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	3310      	adds	r3, #16
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f000 fa36 	bl	8004528 <atoi>
 80040bc:	4603      	mov	r3, r0
 80040be:	b21a      	sxth	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	3314      	adds	r3, #20
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	4613      	mov	r3, r2
 80040ca:	4632      	mov	r2, r6
 80040cc:	4629      	mov	r1, r5
 80040ce:	4620      	mov	r0, r4
 80040d0:	f7fe f954 	bl	800237c <ellipse_filled>
 80040d4:	4603      	mov	r3, r0
 80040d6:	73fb      	strb	r3, [r7, #15]
 80040d8:	e202      	b.n	80044e0 <UART_control+0x500>
	else if (strcmp(array[0], "ellips_gevuld") == 0)	err = ellipse_filled(atoi(array[1]), atoi(array[2]), atoi(array[3]), atoi(array[4]), array[5]);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4977      	ldr	r1, [pc, #476]	; (80042bc <UART_control+0x2dc>)
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7fc f871 	bl	80001c8 <strcmp>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d12c      	bne.n	8004146 <UART_control+0x166>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	3304      	adds	r3, #4
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 fa18 	bl	8004528 <atoi>
 80040f8:	4603      	mov	r3, r0
 80040fa:	b21c      	sxth	r4, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3308      	adds	r3, #8
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f000 fa10 	bl	8004528 <atoi>
 8004108:	4603      	mov	r3, r0
 800410a:	b21d      	sxth	r5, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	330c      	adds	r3, #12
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4618      	mov	r0, r3
 8004114:	f000 fa08 	bl	8004528 <atoi>
 8004118:	4603      	mov	r3, r0
 800411a:	b21e      	sxth	r6, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	3310      	adds	r3, #16
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f000 fa00 	bl	8004528 <atoi>
 8004128:	4603      	mov	r3, r0
 800412a:	b21a      	sxth	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3314      	adds	r3, #20
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	4613      	mov	r3, r2
 8004136:	4632      	mov	r2, r6
 8004138:	4629      	mov	r1, r5
 800413a:	4620      	mov	r0, r4
 800413c:	f7fe f91e 	bl	800237c <ellipse_filled>
 8004140:	4603      	mov	r3, r0
 8004142:	73fb      	strb	r3, [r7, #15]
 8004144:	e1cc      	b.n	80044e0 <UART_control+0x500>
	else if (strcmp(array[0], "rechthoek") == 0)		err = rectangular(atoi(array[1]), atoi(array[2]), atoi(array[3]), atoi(array[4]), array[5]);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	495d      	ldr	r1, [pc, #372]	; (80042c0 <UART_control+0x2e0>)
 800414c:	4618      	mov	r0, r3
 800414e:	f7fc f83b 	bl	80001c8 <strcmp>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d12c      	bne.n	80041b2 <UART_control+0x1d2>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	3304      	adds	r3, #4
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f000 f9e2 	bl	8004528 <atoi>
 8004164:	4603      	mov	r3, r0
 8004166:	b29c      	uxth	r4, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3308      	adds	r3, #8
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4618      	mov	r0, r3
 8004170:	f000 f9da 	bl	8004528 <atoi>
 8004174:	4603      	mov	r3, r0
 8004176:	b29d      	uxth	r5, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	330c      	adds	r3, #12
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4618      	mov	r0, r3
 8004180:	f000 f9d2 	bl	8004528 <atoi>
 8004184:	4603      	mov	r3, r0
 8004186:	b29e      	uxth	r6, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3310      	adds	r3, #16
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4618      	mov	r0, r3
 8004190:	f000 f9ca 	bl	8004528 <atoi>
 8004194:	4603      	mov	r3, r0
 8004196:	b29a      	uxth	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3314      	adds	r3, #20
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	4613      	mov	r3, r2
 80041a2:	4632      	mov	r2, r6
 80041a4:	4629      	mov	r1, r5
 80041a6:	4620      	mov	r0, r4
 80041a8:	f7fe f976 	bl	8002498 <rectangular>
 80041ac:	4603      	mov	r3, r0
 80041ae:	73fb      	strb	r3, [r7, #15]
 80041b0:	e196      	b.n	80044e0 <UART_control+0x500>
	else if (strcmp(array[0], "rechthoek_dik") == 0)	err = rectangular_thick(atoi(array[1]), atoi(array[2]), atoi(array[3]), atoi(array[4]), atoi(array[5]), atoi(array[6]), array[7]);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4943      	ldr	r1, [pc, #268]	; (80042c4 <UART_control+0x2e4>)
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7fc f805 	bl	80001c8 <strcmp>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d140      	bne.n	8004246 <UART_control+0x266>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	3304      	adds	r3, #4
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 f9ac 	bl	8004528 <atoi>
 80041d0:	4603      	mov	r3, r0
 80041d2:	b29d      	uxth	r5, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3308      	adds	r3, #8
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 f9a4 	bl	8004528 <atoi>
 80041e0:	4603      	mov	r3, r0
 80041e2:	b29e      	uxth	r6, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	330c      	adds	r3, #12
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 f99c 	bl	8004528 <atoi>
 80041f0:	4603      	mov	r3, r0
 80041f2:	fa1f f883 	uxth.w	r8, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	3310      	adds	r3, #16
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 f993 	bl	8004528 <atoi>
 8004202:	4603      	mov	r3, r0
 8004204:	fa1f f983 	uxth.w	r9, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	3314      	adds	r3, #20
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4618      	mov	r0, r3
 8004210:	f000 f98a 	bl	8004528 <atoi>
 8004214:	4603      	mov	r3, r0
 8004216:	b2dc      	uxtb	r4, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3318      	adds	r3, #24
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4618      	mov	r0, r3
 8004220:	f000 f982 	bl	8004528 <atoi>
 8004224:	4603      	mov	r3, r0
 8004226:	b2db      	uxtb	r3, r3
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	321c      	adds	r2, #28
 800422c:	6812      	ldr	r2, [r2, #0]
 800422e:	9202      	str	r2, [sp, #8]
 8004230:	9301      	str	r3, [sp, #4]
 8004232:	9400      	str	r4, [sp, #0]
 8004234:	464b      	mov	r3, r9
 8004236:	4642      	mov	r2, r8
 8004238:	4631      	mov	r1, r6
 800423a:	4628      	mov	r0, r5
 800423c:	f7fe f99a 	bl	8002574 <rectangular_thick>
 8004240:	4603      	mov	r3, r0
 8004242:	73fb      	strb	r3, [r7, #15]
 8004244:	e14c      	b.n	80044e0 <UART_control+0x500>
	else if (strcmp(array[0], "rechthoek_gevuld") == 0)	err = rectangular_filled(atoi(array[1]), atoi(array[2]), atoi(array[3]), atoi(array[4]), array[5]);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	491f      	ldr	r1, [pc, #124]	; (80042c8 <UART_control+0x2e8>)
 800424c:	4618      	mov	r0, r3
 800424e:	f7fb ffbb 	bl	80001c8 <strcmp>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d139      	bne.n	80042cc <UART_control+0x2ec>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3304      	adds	r3, #4
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4618      	mov	r0, r3
 8004260:	f000 f962 	bl	8004528 <atoi>
 8004264:	4603      	mov	r3, r0
 8004266:	b29c      	uxth	r4, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	3308      	adds	r3, #8
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4618      	mov	r0, r3
 8004270:	f000 f95a 	bl	8004528 <atoi>
 8004274:	4603      	mov	r3, r0
 8004276:	b29d      	uxth	r5, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	330c      	adds	r3, #12
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4618      	mov	r0, r3
 8004280:	f000 f952 	bl	8004528 <atoi>
 8004284:	4603      	mov	r3, r0
 8004286:	b29e      	uxth	r6, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3310      	adds	r3, #16
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4618      	mov	r0, r3
 8004290:	f000 f94a 	bl	8004528 <atoi>
 8004294:	4603      	mov	r3, r0
 8004296:	b29a      	uxth	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3314      	adds	r3, #20
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	9300      	str	r3, [sp, #0]
 80042a0:	4613      	mov	r3, r2
 80042a2:	4632      	mov	r2, r6
 80042a4:	4629      	mov	r1, r5
 80042a6:	4620      	mov	r0, r4
 80042a8:	f7fe fa00 	bl	80026ac <rectangular_filled>
 80042ac:	4603      	mov	r3, r0
 80042ae:	73fb      	strb	r3, [r7, #15]
 80042b0:	e116      	b.n	80044e0 <UART_control+0x500>
 80042b2:	bf00      	nop
 80042b4:	08004ea0 	.word	0x08004ea0
 80042b8:	08004ea8 	.word	0x08004ea8
 80042bc:	08004eb0 	.word	0x08004eb0
 80042c0:	08004ec0 	.word	0x08004ec0
 80042c4:	08004ecc 	.word	0x08004ecc
 80042c8:	08004edc 	.word	0x08004edc
	else if (strcmp(array[0], "driehoek") == 0)			err = triangle(atoi(array[1]), atoi(array[2]), atoi(array[3]), atoi(array[4]), atoi(array[5]), atoi(array[6]), array[7]);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	498c      	ldr	r1, [pc, #560]	; (8004504 <UART_control+0x524>)
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fb ff78 	bl	80001c8 <strcmp>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d140      	bne.n	8004360 <UART_control+0x380>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	3304      	adds	r3, #4
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f000 f91f 	bl	8004528 <atoi>
 80042ea:	4603      	mov	r3, r0
 80042ec:	b21d      	sxth	r5, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	3308      	adds	r3, #8
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 f917 	bl	8004528 <atoi>
 80042fa:	4603      	mov	r3, r0
 80042fc:	b21e      	sxth	r6, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	330c      	adds	r3, #12
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4618      	mov	r0, r3
 8004306:	f000 f90f 	bl	8004528 <atoi>
 800430a:	4603      	mov	r3, r0
 800430c:	fa0f f883 	sxth.w	r8, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	3310      	adds	r3, #16
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4618      	mov	r0, r3
 8004318:	f000 f906 	bl	8004528 <atoi>
 800431c:	4603      	mov	r3, r0
 800431e:	fa0f f983 	sxth.w	r9, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	3314      	adds	r3, #20
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4618      	mov	r0, r3
 800432a:	f000 f8fd 	bl	8004528 <atoi>
 800432e:	4603      	mov	r3, r0
 8004330:	b21c      	sxth	r4, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	3318      	adds	r3, #24
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4618      	mov	r0, r3
 800433a:	f000 f8f5 	bl	8004528 <atoi>
 800433e:	4603      	mov	r3, r0
 8004340:	b21b      	sxth	r3, r3
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	321c      	adds	r2, #28
 8004346:	6812      	ldr	r2, [r2, #0]
 8004348:	9202      	str	r2, [sp, #8]
 800434a:	9301      	str	r3, [sp, #4]
 800434c:	9400      	str	r4, [sp, #0]
 800434e:	464b      	mov	r3, r9
 8004350:	4642      	mov	r2, r8
 8004352:	4631      	mov	r1, r6
 8004354:	4628      	mov	r0, r5
 8004356:	f7fe fa03 	bl	8002760 <triangle>
 800435a:	4603      	mov	r3, r0
 800435c:	73fb      	strb	r3, [r7, #15]
 800435e:	e0bf      	b.n	80044e0 <UART_control+0x500>
	else if (strcmp(array[0], "letter") == 0)			err = print_char(atoi(array[1]), atoi(array[2]), atoi(array[3]), array[4], array[5]);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4968      	ldr	r1, [pc, #416]	; (8004508 <UART_control+0x528>)
 8004366:	4618      	mov	r0, r3
 8004368:	f7fb ff2e 	bl	80001c8 <strcmp>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d126      	bne.n	80043c0 <UART_control+0x3e0>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	3304      	adds	r3, #4
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4618      	mov	r0, r3
 800437a:	f000 f8d5 	bl	8004528 <atoi>
 800437e:	4603      	mov	r3, r0
 8004380:	b21c      	sxth	r4, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	3308      	adds	r3, #8
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4618      	mov	r0, r3
 800438a:	f000 f8cd 	bl	8004528 <atoi>
 800438e:	4603      	mov	r3, r0
 8004390:	b21d      	sxth	r5, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	330c      	adds	r3, #12
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4618      	mov	r0, r3
 800439a:	f000 f8c5 	bl	8004528 <atoi>
 800439e:	4603      	mov	r3, r0
 80043a0:	b2da      	uxtb	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	3310      	adds	r3, #16
 80043a6:	6819      	ldr	r1, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	3314      	adds	r3, #20
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	9300      	str	r3, [sp, #0]
 80043b0:	460b      	mov	r3, r1
 80043b2:	4629      	mov	r1, r5
 80043b4:	4620      	mov	r0, r4
 80043b6:	f7fe fb77 	bl	8002aa8 <print_char>
 80043ba:	4603      	mov	r3, r0
 80043bc:	73fb      	strb	r3, [r7, #15]
 80043be:	e08f      	b.n	80044e0 <UART_control+0x500>
	else if (strcmp(array[0], "tekst") == 0)			err = print_text(atoi(array[1]), atoi(array[2]), array[3], array[4], array[5]);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4951      	ldr	r1, [pc, #324]	; (800450c <UART_control+0x52c>)
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fb fefe 	bl	80001c8 <strcmp>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d120      	bne.n	8004414 <UART_control+0x434>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	3304      	adds	r3, #4
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4618      	mov	r0, r3
 80043da:	f000 f8a5 	bl	8004528 <atoi>
 80043de:	4603      	mov	r3, r0
 80043e0:	b21c      	sxth	r4, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	3308      	adds	r3, #8
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f000 f89d 	bl	8004528 <atoi>
 80043ee:	4603      	mov	r3, r0
 80043f0:	b219      	sxth	r1, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	330c      	adds	r3, #12
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3310      	adds	r3, #16
 80043fc:	6818      	ldr	r0, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	3314      	adds	r3, #20
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	9300      	str	r3, [sp, #0]
 8004406:	4603      	mov	r3, r0
 8004408:	4620      	mov	r0, r4
 800440a:	f7fe fc0b 	bl	8002c24 <print_text>
 800440e:	4603      	mov	r3, r0
 8004410:	73fb      	strb	r3, [r7, #15]
 8004412:	e065      	b.n	80044e0 <UART_control+0x500>
	else if (strcmp(array[0], "bitmap") == 0) {
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	493d      	ldr	r1, [pc, #244]	; (8004510 <UART_control+0x530>)
 800441a:	4618      	mov	r0, r3
 800441c:	f7fb fed4 	bl	80001c8 <strcmp>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d130      	bne.n	8004488 <UART_control+0x4a8>
		if (array[4] == NULL) array[4] = 0; // Disable transparency if not defined
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	3310      	adds	r3, #16
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d103      	bne.n	8004438 <UART_control+0x458>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	3310      	adds	r3, #16
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]
		err = bitmap(atoi(array[1]), atoi(array[2]), atoi(array[3]), atoi(array[4]));
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	3304      	adds	r3, #4
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f000 f872 	bl	8004528 <atoi>
 8004444:	4603      	mov	r3, r0
 8004446:	b2dc      	uxtb	r4, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	3308      	adds	r3, #8
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4618      	mov	r0, r3
 8004450:	f000 f86a 	bl	8004528 <atoi>
 8004454:	4603      	mov	r3, r0
 8004456:	b21d      	sxth	r5, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	330c      	adds	r3, #12
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f000 f862 	bl	8004528 <atoi>
 8004464:	4603      	mov	r3, r0
 8004466:	b21e      	sxth	r6, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	3310      	adds	r3, #16
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4618      	mov	r0, r3
 8004470:	f000 f85a 	bl	8004528 <atoi>
 8004474:	4603      	mov	r3, r0
 8004476:	b2db      	uxtb	r3, r3
 8004478:	4632      	mov	r2, r6
 800447a:	4629      	mov	r1, r5
 800447c:	4620      	mov	r0, r4
 800447e:	f7fe fc3f 	bl	8002d00 <bitmap>
 8004482:	4603      	mov	r3, r0
 8004484:	73fb      	strb	r3, [r7, #15]
 8004486:	e02b      	b.n	80044e0 <UART_control+0x500>
	}
	else if (strcmp(array[0], "wacht") == 0)			err = DELAY(atoi(array[1]));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4921      	ldr	r1, [pc, #132]	; (8004514 <UART_control+0x534>)
 800448e:	4618      	mov	r0, r3
 8004490:	f7fb fe9a 	bl	80001c8 <strcmp>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10d      	bne.n	80044b6 <UART_control+0x4d6>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	3304      	adds	r3, #4
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f000 f841 	bl	8004528 <atoi>
 80044a6:	4603      	mov	r3, r0
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7fe fcac 	bl	8002e08 <DELAY>
 80044b0:	4603      	mov	r3, r0
 80044b2:	73fb      	strb	r3, [r7, #15]
 80044b4:	e014      	b.n	80044e0 <UART_control+0x500>
	else if (strcmp(array[0], "clearscherm") == 0)		err = fill_screen(array[1]);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4917      	ldr	r1, [pc, #92]	; (8004518 <UART_control+0x538>)
 80044bc:	4618      	mov	r0, r3
 80044be:	f7fb fe83 	bl	80001c8 <strcmp>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d108      	bne.n	80044da <UART_control+0x4fa>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	3304      	adds	r3, #4
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fe fca8 	bl	8002e24 <fill_screen>
 80044d4:	4603      	mov	r3, r0
 80044d6:	73fb      	strb	r3, [r7, #15]
 80044d8:	e002      	b.n	80044e0 <UART_control+0x500>
	else UART_puts("Invalid command!\n");
 80044da:	4810      	ldr	r0, [pc, #64]	; (800451c <UART_control+0x53c>)
 80044dc:	f7ff f8b2 	bl	8003644 <UART_puts>

	if (err != 0){
 80044e0:	7bfb      	ldrb	r3, [r7, #15]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d009      	beq.n	80044fa <UART_control+0x51a>
		UART_puts("\nReturn code: ");
 80044e6:	480e      	ldr	r0, [pc, #56]	; (8004520 <UART_control+0x540>)
 80044e8:	f7ff f8ac 	bl	8003644 <UART_puts>
		UART_putint(err);
 80044ec:	7bfb      	ldrb	r3, [r7, #15]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7ff f91e 	bl	8003730 <UART_putint>
		UART_puts("\n");
 80044f4:	480b      	ldr	r0, [pc, #44]	; (8004524 <UART_control+0x544>)
 80044f6:	f7ff f8a5 	bl	8003644 <UART_puts>
	}
}
 80044fa:	bf00      	nop
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004504:	08004ef0 	.word	0x08004ef0
 8004508:	08004efc 	.word	0x08004efc
 800450c:	08004f04 	.word	0x08004f04
 8004510:	08004f0c 	.word	0x08004f0c
 8004514:	08004f14 	.word	0x08004f14
 8004518:	08004f1c 	.word	0x08004f1c
 800451c:	08004f28 	.word	0x08004f28
 8004520:	08004f3c 	.word	0x08004f3c
 8004524:	08004f4c 	.word	0x08004f4c

08004528 <atoi>:
 8004528:	220a      	movs	r2, #10
 800452a:	2100      	movs	r1, #0
 800452c:	f000 ba14 	b.w	8004958 <strtol>

08004530 <__libc_init_array>:
 8004530:	b570      	push	{r4, r5, r6, lr}
 8004532:	4e0d      	ldr	r6, [pc, #52]	; (8004568 <__libc_init_array+0x38>)
 8004534:	4c0d      	ldr	r4, [pc, #52]	; (800456c <__libc_init_array+0x3c>)
 8004536:	1ba4      	subs	r4, r4, r6
 8004538:	10a4      	asrs	r4, r4, #2
 800453a:	2500      	movs	r5, #0
 800453c:	42a5      	cmp	r5, r4
 800453e:	d109      	bne.n	8004554 <__libc_init_array+0x24>
 8004540:	4e0b      	ldr	r6, [pc, #44]	; (8004570 <__libc_init_array+0x40>)
 8004542:	4c0c      	ldr	r4, [pc, #48]	; (8004574 <__libc_init_array+0x44>)
 8004544:	f000 fbec 	bl	8004d20 <_init>
 8004548:	1ba4      	subs	r4, r4, r6
 800454a:	10a4      	asrs	r4, r4, #2
 800454c:	2500      	movs	r5, #0
 800454e:	42a5      	cmp	r5, r4
 8004550:	d105      	bne.n	800455e <__libc_init_array+0x2e>
 8004552:	bd70      	pop	{r4, r5, r6, pc}
 8004554:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004558:	4798      	blx	r3
 800455a:	3501      	adds	r5, #1
 800455c:	e7ee      	b.n	800453c <__libc_init_array+0xc>
 800455e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004562:	4798      	blx	r3
 8004564:	3501      	adds	r5, #1
 8004566:	e7f2      	b.n	800454e <__libc_init_array+0x1e>
 8004568:	08009888 	.word	0x08009888
 800456c:	08009888 	.word	0x08009888
 8004570:	08009888 	.word	0x08009888
 8004574:	0800988c 	.word	0x0800988c

08004578 <__itoa>:
 8004578:	1e93      	subs	r3, r2, #2
 800457a:	2b22      	cmp	r3, #34	; 0x22
 800457c:	b510      	push	{r4, lr}
 800457e:	460c      	mov	r4, r1
 8004580:	d904      	bls.n	800458c <__itoa+0x14>
 8004582:	2300      	movs	r3, #0
 8004584:	700b      	strb	r3, [r1, #0]
 8004586:	461c      	mov	r4, r3
 8004588:	4620      	mov	r0, r4
 800458a:	bd10      	pop	{r4, pc}
 800458c:	2a0a      	cmp	r2, #10
 800458e:	d109      	bne.n	80045a4 <__itoa+0x2c>
 8004590:	2800      	cmp	r0, #0
 8004592:	da07      	bge.n	80045a4 <__itoa+0x2c>
 8004594:	232d      	movs	r3, #45	; 0x2d
 8004596:	700b      	strb	r3, [r1, #0]
 8004598:	4240      	negs	r0, r0
 800459a:	2101      	movs	r1, #1
 800459c:	4421      	add	r1, r4
 800459e:	f000 f9f1 	bl	8004984 <__utoa>
 80045a2:	e7f1      	b.n	8004588 <__itoa+0x10>
 80045a4:	2100      	movs	r1, #0
 80045a6:	e7f9      	b.n	800459c <__itoa+0x24>

080045a8 <itoa>:
 80045a8:	f7ff bfe6 	b.w	8004578 <__itoa>

080045ac <malloc>:
 80045ac:	4b02      	ldr	r3, [pc, #8]	; (80045b8 <malloc+0xc>)
 80045ae:	4601      	mov	r1, r0
 80045b0:	6818      	ldr	r0, [r3, #0]
 80045b2:	f000 b859 	b.w	8004668 <_malloc_r>
 80045b6:	bf00      	nop
 80045b8:	200001f4 	.word	0x200001f4

080045bc <free>:
 80045bc:	4b02      	ldr	r3, [pc, #8]	; (80045c8 <free+0xc>)
 80045be:	4601      	mov	r1, r0
 80045c0:	6818      	ldr	r0, [r3, #0]
 80045c2:	f000 b803 	b.w	80045cc <_free_r>
 80045c6:	bf00      	nop
 80045c8:	200001f4 	.word	0x200001f4

080045cc <_free_r>:
 80045cc:	b538      	push	{r3, r4, r5, lr}
 80045ce:	4605      	mov	r5, r0
 80045d0:	2900      	cmp	r1, #0
 80045d2:	d045      	beq.n	8004660 <_free_r+0x94>
 80045d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045d8:	1f0c      	subs	r4, r1, #4
 80045da:	2b00      	cmp	r3, #0
 80045dc:	bfb8      	it	lt
 80045de:	18e4      	addlt	r4, r4, r3
 80045e0:	f000 fa3f 	bl	8004a62 <__malloc_lock>
 80045e4:	4a1f      	ldr	r2, [pc, #124]	; (8004664 <_free_r+0x98>)
 80045e6:	6813      	ldr	r3, [r2, #0]
 80045e8:	4610      	mov	r0, r2
 80045ea:	b933      	cbnz	r3, 80045fa <_free_r+0x2e>
 80045ec:	6063      	str	r3, [r4, #4]
 80045ee:	6014      	str	r4, [r2, #0]
 80045f0:	4628      	mov	r0, r5
 80045f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045f6:	f000 ba35 	b.w	8004a64 <__malloc_unlock>
 80045fa:	42a3      	cmp	r3, r4
 80045fc:	d90c      	bls.n	8004618 <_free_r+0x4c>
 80045fe:	6821      	ldr	r1, [r4, #0]
 8004600:	1862      	adds	r2, r4, r1
 8004602:	4293      	cmp	r3, r2
 8004604:	bf04      	itt	eq
 8004606:	681a      	ldreq	r2, [r3, #0]
 8004608:	685b      	ldreq	r3, [r3, #4]
 800460a:	6063      	str	r3, [r4, #4]
 800460c:	bf04      	itt	eq
 800460e:	1852      	addeq	r2, r2, r1
 8004610:	6022      	streq	r2, [r4, #0]
 8004612:	6004      	str	r4, [r0, #0]
 8004614:	e7ec      	b.n	80045f0 <_free_r+0x24>
 8004616:	4613      	mov	r3, r2
 8004618:	685a      	ldr	r2, [r3, #4]
 800461a:	b10a      	cbz	r2, 8004620 <_free_r+0x54>
 800461c:	42a2      	cmp	r2, r4
 800461e:	d9fa      	bls.n	8004616 <_free_r+0x4a>
 8004620:	6819      	ldr	r1, [r3, #0]
 8004622:	1858      	adds	r0, r3, r1
 8004624:	42a0      	cmp	r0, r4
 8004626:	d10b      	bne.n	8004640 <_free_r+0x74>
 8004628:	6820      	ldr	r0, [r4, #0]
 800462a:	4401      	add	r1, r0
 800462c:	1858      	adds	r0, r3, r1
 800462e:	4282      	cmp	r2, r0
 8004630:	6019      	str	r1, [r3, #0]
 8004632:	d1dd      	bne.n	80045f0 <_free_r+0x24>
 8004634:	6810      	ldr	r0, [r2, #0]
 8004636:	6852      	ldr	r2, [r2, #4]
 8004638:	605a      	str	r2, [r3, #4]
 800463a:	4401      	add	r1, r0
 800463c:	6019      	str	r1, [r3, #0]
 800463e:	e7d7      	b.n	80045f0 <_free_r+0x24>
 8004640:	d902      	bls.n	8004648 <_free_r+0x7c>
 8004642:	230c      	movs	r3, #12
 8004644:	602b      	str	r3, [r5, #0]
 8004646:	e7d3      	b.n	80045f0 <_free_r+0x24>
 8004648:	6820      	ldr	r0, [r4, #0]
 800464a:	1821      	adds	r1, r4, r0
 800464c:	428a      	cmp	r2, r1
 800464e:	bf04      	itt	eq
 8004650:	6811      	ldreq	r1, [r2, #0]
 8004652:	6852      	ldreq	r2, [r2, #4]
 8004654:	6062      	str	r2, [r4, #4]
 8004656:	bf04      	itt	eq
 8004658:	1809      	addeq	r1, r1, r0
 800465a:	6021      	streq	r1, [r4, #0]
 800465c:	605c      	str	r4, [r3, #4]
 800465e:	e7c7      	b.n	80045f0 <_free_r+0x24>
 8004660:	bd38      	pop	{r3, r4, r5, pc}
 8004662:	bf00      	nop
 8004664:	200003ec 	.word	0x200003ec

08004668 <_malloc_r>:
 8004668:	b570      	push	{r4, r5, r6, lr}
 800466a:	1ccd      	adds	r5, r1, #3
 800466c:	f025 0503 	bic.w	r5, r5, #3
 8004670:	3508      	adds	r5, #8
 8004672:	2d0c      	cmp	r5, #12
 8004674:	bf38      	it	cc
 8004676:	250c      	movcc	r5, #12
 8004678:	2d00      	cmp	r5, #0
 800467a:	4606      	mov	r6, r0
 800467c:	db01      	blt.n	8004682 <_malloc_r+0x1a>
 800467e:	42a9      	cmp	r1, r5
 8004680:	d903      	bls.n	800468a <_malloc_r+0x22>
 8004682:	230c      	movs	r3, #12
 8004684:	6033      	str	r3, [r6, #0]
 8004686:	2000      	movs	r0, #0
 8004688:	bd70      	pop	{r4, r5, r6, pc}
 800468a:	f000 f9ea 	bl	8004a62 <__malloc_lock>
 800468e:	4a23      	ldr	r2, [pc, #140]	; (800471c <_malloc_r+0xb4>)
 8004690:	6814      	ldr	r4, [r2, #0]
 8004692:	4621      	mov	r1, r4
 8004694:	b991      	cbnz	r1, 80046bc <_malloc_r+0x54>
 8004696:	4c22      	ldr	r4, [pc, #136]	; (8004720 <_malloc_r+0xb8>)
 8004698:	6823      	ldr	r3, [r4, #0]
 800469a:	b91b      	cbnz	r3, 80046a4 <_malloc_r+0x3c>
 800469c:	4630      	mov	r0, r6
 800469e:	f000 f849 	bl	8004734 <_sbrk_r>
 80046a2:	6020      	str	r0, [r4, #0]
 80046a4:	4629      	mov	r1, r5
 80046a6:	4630      	mov	r0, r6
 80046a8:	f000 f844 	bl	8004734 <_sbrk_r>
 80046ac:	1c43      	adds	r3, r0, #1
 80046ae:	d126      	bne.n	80046fe <_malloc_r+0x96>
 80046b0:	230c      	movs	r3, #12
 80046b2:	6033      	str	r3, [r6, #0]
 80046b4:	4630      	mov	r0, r6
 80046b6:	f000 f9d5 	bl	8004a64 <__malloc_unlock>
 80046ba:	e7e4      	b.n	8004686 <_malloc_r+0x1e>
 80046bc:	680b      	ldr	r3, [r1, #0]
 80046be:	1b5b      	subs	r3, r3, r5
 80046c0:	d41a      	bmi.n	80046f8 <_malloc_r+0x90>
 80046c2:	2b0b      	cmp	r3, #11
 80046c4:	d90f      	bls.n	80046e6 <_malloc_r+0x7e>
 80046c6:	600b      	str	r3, [r1, #0]
 80046c8:	50cd      	str	r5, [r1, r3]
 80046ca:	18cc      	adds	r4, r1, r3
 80046cc:	4630      	mov	r0, r6
 80046ce:	f000 f9c9 	bl	8004a64 <__malloc_unlock>
 80046d2:	f104 000b 	add.w	r0, r4, #11
 80046d6:	1d23      	adds	r3, r4, #4
 80046d8:	f020 0007 	bic.w	r0, r0, #7
 80046dc:	1ac3      	subs	r3, r0, r3
 80046de:	d01b      	beq.n	8004718 <_malloc_r+0xb0>
 80046e0:	425a      	negs	r2, r3
 80046e2:	50e2      	str	r2, [r4, r3]
 80046e4:	bd70      	pop	{r4, r5, r6, pc}
 80046e6:	428c      	cmp	r4, r1
 80046e8:	bf0d      	iteet	eq
 80046ea:	6863      	ldreq	r3, [r4, #4]
 80046ec:	684b      	ldrne	r3, [r1, #4]
 80046ee:	6063      	strne	r3, [r4, #4]
 80046f0:	6013      	streq	r3, [r2, #0]
 80046f2:	bf18      	it	ne
 80046f4:	460c      	movne	r4, r1
 80046f6:	e7e9      	b.n	80046cc <_malloc_r+0x64>
 80046f8:	460c      	mov	r4, r1
 80046fa:	6849      	ldr	r1, [r1, #4]
 80046fc:	e7ca      	b.n	8004694 <_malloc_r+0x2c>
 80046fe:	1cc4      	adds	r4, r0, #3
 8004700:	f024 0403 	bic.w	r4, r4, #3
 8004704:	42a0      	cmp	r0, r4
 8004706:	d005      	beq.n	8004714 <_malloc_r+0xac>
 8004708:	1a21      	subs	r1, r4, r0
 800470a:	4630      	mov	r0, r6
 800470c:	f000 f812 	bl	8004734 <_sbrk_r>
 8004710:	3001      	adds	r0, #1
 8004712:	d0cd      	beq.n	80046b0 <_malloc_r+0x48>
 8004714:	6025      	str	r5, [r4, #0]
 8004716:	e7d9      	b.n	80046cc <_malloc_r+0x64>
 8004718:	bd70      	pop	{r4, r5, r6, pc}
 800471a:	bf00      	nop
 800471c:	200003ec 	.word	0x200003ec
 8004720:	200003f0 	.word	0x200003f0

08004724 <realloc>:
 8004724:	4b02      	ldr	r3, [pc, #8]	; (8004730 <realloc+0xc>)
 8004726:	460a      	mov	r2, r1
 8004728:	4601      	mov	r1, r0
 800472a:	6818      	ldr	r0, [r3, #0]
 800472c:	f000 b99b 	b.w	8004a66 <_realloc_r>
 8004730:	200001f4 	.word	0x200001f4

08004734 <_sbrk_r>:
 8004734:	b538      	push	{r3, r4, r5, lr}
 8004736:	4c06      	ldr	r4, [pc, #24]	; (8004750 <_sbrk_r+0x1c>)
 8004738:	2300      	movs	r3, #0
 800473a:	4605      	mov	r5, r0
 800473c:	4608      	mov	r0, r1
 800473e:	6023      	str	r3, [r4, #0]
 8004740:	f000 fae0 	bl	8004d04 <_sbrk>
 8004744:	1c43      	adds	r3, r0, #1
 8004746:	d102      	bne.n	800474e <_sbrk_r+0x1a>
 8004748:	6823      	ldr	r3, [r4, #0]
 800474a:	b103      	cbz	r3, 800474e <_sbrk_r+0x1a>
 800474c:	602b      	str	r3, [r5, #0]
 800474e:	bd38      	pop	{r3, r4, r5, pc}
 8004750:	20013168 	.word	0x20013168

08004754 <strdup>:
 8004754:	4b02      	ldr	r3, [pc, #8]	; (8004760 <strdup+0xc>)
 8004756:	4601      	mov	r1, r0
 8004758:	6818      	ldr	r0, [r3, #0]
 800475a:	f000 b803 	b.w	8004764 <_strdup_r>
 800475e:	bf00      	nop
 8004760:	200001f4 	.word	0x200001f4

08004764 <_strdup_r>:
 8004764:	b570      	push	{r4, r5, r6, lr}
 8004766:	4606      	mov	r6, r0
 8004768:	4608      	mov	r0, r1
 800476a:	460c      	mov	r4, r1
 800476c:	f7fb fd36 	bl	80001dc <strlen>
 8004770:	1c45      	adds	r5, r0, #1
 8004772:	4629      	mov	r1, r5
 8004774:	4630      	mov	r0, r6
 8004776:	f7ff ff77 	bl	8004668 <_malloc_r>
 800477a:	4606      	mov	r6, r0
 800477c:	b118      	cbz	r0, 8004786 <_strdup_r+0x22>
 800477e:	462a      	mov	r2, r5
 8004780:	4621      	mov	r1, r4
 8004782:	f000 f963 	bl	8004a4c <memcpy>
 8004786:	4630      	mov	r0, r6
 8004788:	bd70      	pop	{r4, r5, r6, pc}

0800478a <strlwr>:
 800478a:	b570      	push	{r4, r5, r6, lr}
 800478c:	4606      	mov	r6, r0
 800478e:	4605      	mov	r5, r0
 8004790:	782c      	ldrb	r4, [r5, #0]
 8004792:	b90c      	cbnz	r4, 8004798 <strlwr+0xe>
 8004794:	4630      	mov	r0, r6
 8004796:	bd70      	pop	{r4, r5, r6, pc}
 8004798:	f000 f938 	bl	8004a0c <__locale_ctype_ptr>
 800479c:	4420      	add	r0, r4
 800479e:	7843      	ldrb	r3, [r0, #1]
 80047a0:	f003 0303 	and.w	r3, r3, #3
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	bf08      	it	eq
 80047a8:	3420      	addeq	r4, #32
 80047aa:	f805 4b01 	strb.w	r4, [r5], #1
 80047ae:	e7ef      	b.n	8004790 <strlwr+0x6>

080047b0 <strtok>:
 80047b0:	4b13      	ldr	r3, [pc, #76]	; (8004800 <strtok+0x50>)
 80047b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047b6:	681d      	ldr	r5, [r3, #0]
 80047b8:	6dac      	ldr	r4, [r5, #88]	; 0x58
 80047ba:	4606      	mov	r6, r0
 80047bc:	460f      	mov	r7, r1
 80047be:	b9b4      	cbnz	r4, 80047ee <strtok+0x3e>
 80047c0:	2050      	movs	r0, #80	; 0x50
 80047c2:	f7ff fef3 	bl	80045ac <malloc>
 80047c6:	65a8      	str	r0, [r5, #88]	; 0x58
 80047c8:	6004      	str	r4, [r0, #0]
 80047ca:	6044      	str	r4, [r0, #4]
 80047cc:	6084      	str	r4, [r0, #8]
 80047ce:	60c4      	str	r4, [r0, #12]
 80047d0:	6104      	str	r4, [r0, #16]
 80047d2:	6144      	str	r4, [r0, #20]
 80047d4:	6184      	str	r4, [r0, #24]
 80047d6:	6284      	str	r4, [r0, #40]	; 0x28
 80047d8:	62c4      	str	r4, [r0, #44]	; 0x2c
 80047da:	6304      	str	r4, [r0, #48]	; 0x30
 80047dc:	6344      	str	r4, [r0, #52]	; 0x34
 80047de:	6384      	str	r4, [r0, #56]	; 0x38
 80047e0:	63c4      	str	r4, [r0, #60]	; 0x3c
 80047e2:	6404      	str	r4, [r0, #64]	; 0x40
 80047e4:	6444      	str	r4, [r0, #68]	; 0x44
 80047e6:	6484      	str	r4, [r0, #72]	; 0x48
 80047e8:	64c4      	str	r4, [r0, #76]	; 0x4c
 80047ea:	7704      	strb	r4, [r0, #28]
 80047ec:	6244      	str	r4, [r0, #36]	; 0x24
 80047ee:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80047f0:	4639      	mov	r1, r7
 80047f2:	4630      	mov	r0, r6
 80047f4:	2301      	movs	r3, #1
 80047f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047fa:	f000 b803 	b.w	8004804 <__strtok_r>
 80047fe:	bf00      	nop
 8004800:	200001f4 	.word	0x200001f4

08004804 <__strtok_r>:
 8004804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004806:	b918      	cbnz	r0, 8004810 <__strtok_r+0xc>
 8004808:	6810      	ldr	r0, [r2, #0]
 800480a:	b908      	cbnz	r0, 8004810 <__strtok_r+0xc>
 800480c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800480e:	4620      	mov	r0, r4
 8004810:	4604      	mov	r4, r0
 8004812:	460f      	mov	r7, r1
 8004814:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004818:	f817 6b01 	ldrb.w	r6, [r7], #1
 800481c:	b91e      	cbnz	r6, 8004826 <__strtok_r+0x22>
 800481e:	b965      	cbnz	r5, 800483a <__strtok_r+0x36>
 8004820:	6015      	str	r5, [r2, #0]
 8004822:	4628      	mov	r0, r5
 8004824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004826:	42b5      	cmp	r5, r6
 8004828:	d1f6      	bne.n	8004818 <__strtok_r+0x14>
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1ef      	bne.n	800480e <__strtok_r+0xa>
 800482e:	6014      	str	r4, [r2, #0]
 8004830:	7003      	strb	r3, [r0, #0]
 8004832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004834:	461c      	mov	r4, r3
 8004836:	e00c      	b.n	8004852 <__strtok_r+0x4e>
 8004838:	b915      	cbnz	r5, 8004840 <__strtok_r+0x3c>
 800483a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800483e:	460e      	mov	r6, r1
 8004840:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004844:	42ab      	cmp	r3, r5
 8004846:	d1f7      	bne.n	8004838 <__strtok_r+0x34>
 8004848:	2b00      	cmp	r3, #0
 800484a:	d0f3      	beq.n	8004834 <__strtok_r+0x30>
 800484c:	2300      	movs	r3, #0
 800484e:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004852:	6014      	str	r4, [r2, #0]
 8004854:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004856 <_strtol_l.isra.0>:
 8004856:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800485a:	4680      	mov	r8, r0
 800485c:	4689      	mov	r9, r1
 800485e:	4692      	mov	sl, r2
 8004860:	461f      	mov	r7, r3
 8004862:	468b      	mov	fp, r1
 8004864:	465d      	mov	r5, fp
 8004866:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004868:	f815 4b01 	ldrb.w	r4, [r5], #1
 800486c:	f000 f8ca 	bl	8004a04 <__locale_ctype_ptr_l>
 8004870:	4420      	add	r0, r4
 8004872:	7846      	ldrb	r6, [r0, #1]
 8004874:	f016 0608 	ands.w	r6, r6, #8
 8004878:	d10b      	bne.n	8004892 <_strtol_l.isra.0+0x3c>
 800487a:	2c2d      	cmp	r4, #45	; 0x2d
 800487c:	d10b      	bne.n	8004896 <_strtol_l.isra.0+0x40>
 800487e:	782c      	ldrb	r4, [r5, #0]
 8004880:	2601      	movs	r6, #1
 8004882:	f10b 0502 	add.w	r5, fp, #2
 8004886:	b167      	cbz	r7, 80048a2 <_strtol_l.isra.0+0x4c>
 8004888:	2f10      	cmp	r7, #16
 800488a:	d114      	bne.n	80048b6 <_strtol_l.isra.0+0x60>
 800488c:	2c30      	cmp	r4, #48	; 0x30
 800488e:	d00a      	beq.n	80048a6 <_strtol_l.isra.0+0x50>
 8004890:	e011      	b.n	80048b6 <_strtol_l.isra.0+0x60>
 8004892:	46ab      	mov	fp, r5
 8004894:	e7e6      	b.n	8004864 <_strtol_l.isra.0+0xe>
 8004896:	2c2b      	cmp	r4, #43	; 0x2b
 8004898:	bf04      	itt	eq
 800489a:	782c      	ldrbeq	r4, [r5, #0]
 800489c:	f10b 0502 	addeq.w	r5, fp, #2
 80048a0:	e7f1      	b.n	8004886 <_strtol_l.isra.0+0x30>
 80048a2:	2c30      	cmp	r4, #48	; 0x30
 80048a4:	d127      	bne.n	80048f6 <_strtol_l.isra.0+0xa0>
 80048a6:	782b      	ldrb	r3, [r5, #0]
 80048a8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80048ac:	2b58      	cmp	r3, #88	; 0x58
 80048ae:	d14b      	bne.n	8004948 <_strtol_l.isra.0+0xf2>
 80048b0:	786c      	ldrb	r4, [r5, #1]
 80048b2:	2710      	movs	r7, #16
 80048b4:	3502      	adds	r5, #2
 80048b6:	2e00      	cmp	r6, #0
 80048b8:	bf0c      	ite	eq
 80048ba:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80048be:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80048c2:	2200      	movs	r2, #0
 80048c4:	fbb1 fef7 	udiv	lr, r1, r7
 80048c8:	4610      	mov	r0, r2
 80048ca:	fb07 1c1e 	mls	ip, r7, lr, r1
 80048ce:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80048d2:	2b09      	cmp	r3, #9
 80048d4:	d811      	bhi.n	80048fa <_strtol_l.isra.0+0xa4>
 80048d6:	461c      	mov	r4, r3
 80048d8:	42a7      	cmp	r7, r4
 80048da:	dd1d      	ble.n	8004918 <_strtol_l.isra.0+0xc2>
 80048dc:	1c53      	adds	r3, r2, #1
 80048de:	d007      	beq.n	80048f0 <_strtol_l.isra.0+0x9a>
 80048e0:	4586      	cmp	lr, r0
 80048e2:	d316      	bcc.n	8004912 <_strtol_l.isra.0+0xbc>
 80048e4:	d101      	bne.n	80048ea <_strtol_l.isra.0+0x94>
 80048e6:	45a4      	cmp	ip, r4
 80048e8:	db13      	blt.n	8004912 <_strtol_l.isra.0+0xbc>
 80048ea:	fb00 4007 	mla	r0, r0, r7, r4
 80048ee:	2201      	movs	r2, #1
 80048f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80048f4:	e7eb      	b.n	80048ce <_strtol_l.isra.0+0x78>
 80048f6:	270a      	movs	r7, #10
 80048f8:	e7dd      	b.n	80048b6 <_strtol_l.isra.0+0x60>
 80048fa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80048fe:	2b19      	cmp	r3, #25
 8004900:	d801      	bhi.n	8004906 <_strtol_l.isra.0+0xb0>
 8004902:	3c37      	subs	r4, #55	; 0x37
 8004904:	e7e8      	b.n	80048d8 <_strtol_l.isra.0+0x82>
 8004906:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800490a:	2b19      	cmp	r3, #25
 800490c:	d804      	bhi.n	8004918 <_strtol_l.isra.0+0xc2>
 800490e:	3c57      	subs	r4, #87	; 0x57
 8004910:	e7e2      	b.n	80048d8 <_strtol_l.isra.0+0x82>
 8004912:	f04f 32ff 	mov.w	r2, #4294967295
 8004916:	e7eb      	b.n	80048f0 <_strtol_l.isra.0+0x9a>
 8004918:	1c53      	adds	r3, r2, #1
 800491a:	d108      	bne.n	800492e <_strtol_l.isra.0+0xd8>
 800491c:	2322      	movs	r3, #34	; 0x22
 800491e:	f8c8 3000 	str.w	r3, [r8]
 8004922:	4608      	mov	r0, r1
 8004924:	f1ba 0f00 	cmp.w	sl, #0
 8004928:	d107      	bne.n	800493a <_strtol_l.isra.0+0xe4>
 800492a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800492e:	b106      	cbz	r6, 8004932 <_strtol_l.isra.0+0xdc>
 8004930:	4240      	negs	r0, r0
 8004932:	f1ba 0f00 	cmp.w	sl, #0
 8004936:	d00c      	beq.n	8004952 <_strtol_l.isra.0+0xfc>
 8004938:	b122      	cbz	r2, 8004944 <_strtol_l.isra.0+0xee>
 800493a:	3d01      	subs	r5, #1
 800493c:	f8ca 5000 	str.w	r5, [sl]
 8004940:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004944:	464d      	mov	r5, r9
 8004946:	e7f9      	b.n	800493c <_strtol_l.isra.0+0xe6>
 8004948:	2430      	movs	r4, #48	; 0x30
 800494a:	2f00      	cmp	r7, #0
 800494c:	d1b3      	bne.n	80048b6 <_strtol_l.isra.0+0x60>
 800494e:	2708      	movs	r7, #8
 8004950:	e7b1      	b.n	80048b6 <_strtol_l.isra.0+0x60>
 8004952:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004958 <strtol>:
 8004958:	4b08      	ldr	r3, [pc, #32]	; (800497c <strtol+0x24>)
 800495a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800495c:	681c      	ldr	r4, [r3, #0]
 800495e:	4d08      	ldr	r5, [pc, #32]	; (8004980 <strtol+0x28>)
 8004960:	6a23      	ldr	r3, [r4, #32]
 8004962:	2b00      	cmp	r3, #0
 8004964:	bf08      	it	eq
 8004966:	462b      	moveq	r3, r5
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	4613      	mov	r3, r2
 800496c:	460a      	mov	r2, r1
 800496e:	4601      	mov	r1, r0
 8004970:	4620      	mov	r0, r4
 8004972:	f7ff ff70 	bl	8004856 <_strtol_l.isra.0>
 8004976:	b003      	add	sp, #12
 8004978:	bd30      	pop	{r4, r5, pc}
 800497a:	bf00      	nop
 800497c:	200001f4 	.word	0x200001f4
 8004980:	20000258 	.word	0x20000258

08004984 <__utoa>:
 8004984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004986:	4c1e      	ldr	r4, [pc, #120]	; (8004a00 <__utoa+0x7c>)
 8004988:	b08b      	sub	sp, #44	; 0x2c
 800498a:	4603      	mov	r3, r0
 800498c:	460f      	mov	r7, r1
 800498e:	466d      	mov	r5, sp
 8004990:	f104 0e20 	add.w	lr, r4, #32
 8004994:	6820      	ldr	r0, [r4, #0]
 8004996:	6861      	ldr	r1, [r4, #4]
 8004998:	462e      	mov	r6, r5
 800499a:	c603      	stmia	r6!, {r0, r1}
 800499c:	3408      	adds	r4, #8
 800499e:	4574      	cmp	r4, lr
 80049a0:	4635      	mov	r5, r6
 80049a2:	d1f7      	bne.n	8004994 <__utoa+0x10>
 80049a4:	7921      	ldrb	r1, [r4, #4]
 80049a6:	7131      	strb	r1, [r6, #4]
 80049a8:	1e91      	subs	r1, r2, #2
 80049aa:	6820      	ldr	r0, [r4, #0]
 80049ac:	6030      	str	r0, [r6, #0]
 80049ae:	2922      	cmp	r1, #34	; 0x22
 80049b0:	f04f 0100 	mov.w	r1, #0
 80049b4:	d904      	bls.n	80049c0 <__utoa+0x3c>
 80049b6:	7039      	strb	r1, [r7, #0]
 80049b8:	460f      	mov	r7, r1
 80049ba:	4638      	mov	r0, r7
 80049bc:	b00b      	add	sp, #44	; 0x2c
 80049be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049c0:	1e78      	subs	r0, r7, #1
 80049c2:	4606      	mov	r6, r0
 80049c4:	fbb3 f5f2 	udiv	r5, r3, r2
 80049c8:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80049cc:	fb02 3315 	mls	r3, r2, r5, r3
 80049d0:	4473      	add	r3, lr
 80049d2:	1c4c      	adds	r4, r1, #1
 80049d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80049d8:	f806 3f01 	strb.w	r3, [r6, #1]!
 80049dc:	462b      	mov	r3, r5
 80049de:	b965      	cbnz	r5, 80049fa <__utoa+0x76>
 80049e0:	553d      	strb	r5, [r7, r4]
 80049e2:	187a      	adds	r2, r7, r1
 80049e4:	1acc      	subs	r4, r1, r3
 80049e6:	42a3      	cmp	r3, r4
 80049e8:	dae7      	bge.n	80049ba <__utoa+0x36>
 80049ea:	7844      	ldrb	r4, [r0, #1]
 80049ec:	7815      	ldrb	r5, [r2, #0]
 80049ee:	f800 5f01 	strb.w	r5, [r0, #1]!
 80049f2:	3301      	adds	r3, #1
 80049f4:	f802 4901 	strb.w	r4, [r2], #-1
 80049f8:	e7f4      	b.n	80049e4 <__utoa+0x60>
 80049fa:	4621      	mov	r1, r4
 80049fc:	e7e2      	b.n	80049c4 <__utoa+0x40>
 80049fe:	bf00      	nop
 8004a00:	08009750 	.word	0x08009750

08004a04 <__locale_ctype_ptr_l>:
 8004a04:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8004a08:	4770      	bx	lr
	...

08004a0c <__locale_ctype_ptr>:
 8004a0c:	4b04      	ldr	r3, [pc, #16]	; (8004a20 <__locale_ctype_ptr+0x14>)
 8004a0e:	4a05      	ldr	r2, [pc, #20]	; (8004a24 <__locale_ctype_ptr+0x18>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	6a1b      	ldr	r3, [r3, #32]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	bf08      	it	eq
 8004a18:	4613      	moveq	r3, r2
 8004a1a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8004a1e:	4770      	bx	lr
 8004a20:	200001f4 	.word	0x200001f4
 8004a24:	20000258 	.word	0x20000258

08004a28 <__ascii_mbtowc>:
 8004a28:	b082      	sub	sp, #8
 8004a2a:	b901      	cbnz	r1, 8004a2e <__ascii_mbtowc+0x6>
 8004a2c:	a901      	add	r1, sp, #4
 8004a2e:	b142      	cbz	r2, 8004a42 <__ascii_mbtowc+0x1a>
 8004a30:	b14b      	cbz	r3, 8004a46 <__ascii_mbtowc+0x1e>
 8004a32:	7813      	ldrb	r3, [r2, #0]
 8004a34:	600b      	str	r3, [r1, #0]
 8004a36:	7812      	ldrb	r2, [r2, #0]
 8004a38:	1c10      	adds	r0, r2, #0
 8004a3a:	bf18      	it	ne
 8004a3c:	2001      	movne	r0, #1
 8004a3e:	b002      	add	sp, #8
 8004a40:	4770      	bx	lr
 8004a42:	4610      	mov	r0, r2
 8004a44:	e7fb      	b.n	8004a3e <__ascii_mbtowc+0x16>
 8004a46:	f06f 0001 	mvn.w	r0, #1
 8004a4a:	e7f8      	b.n	8004a3e <__ascii_mbtowc+0x16>

08004a4c <memcpy>:
 8004a4c:	b510      	push	{r4, lr}
 8004a4e:	1e43      	subs	r3, r0, #1
 8004a50:	440a      	add	r2, r1
 8004a52:	4291      	cmp	r1, r2
 8004a54:	d100      	bne.n	8004a58 <memcpy+0xc>
 8004a56:	bd10      	pop	{r4, pc}
 8004a58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a60:	e7f7      	b.n	8004a52 <memcpy+0x6>

08004a62 <__malloc_lock>:
 8004a62:	4770      	bx	lr

08004a64 <__malloc_unlock>:
 8004a64:	4770      	bx	lr

08004a66 <_realloc_r>:
 8004a66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a68:	4607      	mov	r7, r0
 8004a6a:	4614      	mov	r4, r2
 8004a6c:	460e      	mov	r6, r1
 8004a6e:	b921      	cbnz	r1, 8004a7a <_realloc_r+0x14>
 8004a70:	4611      	mov	r1, r2
 8004a72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004a76:	f7ff bdf7 	b.w	8004668 <_malloc_r>
 8004a7a:	b922      	cbnz	r2, 8004a86 <_realloc_r+0x20>
 8004a7c:	f7ff fda6 	bl	80045cc <_free_r>
 8004a80:	4625      	mov	r5, r4
 8004a82:	4628      	mov	r0, r5
 8004a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a86:	f000 f821 	bl	8004acc <_malloc_usable_size_r>
 8004a8a:	4284      	cmp	r4, r0
 8004a8c:	d90f      	bls.n	8004aae <_realloc_r+0x48>
 8004a8e:	4621      	mov	r1, r4
 8004a90:	4638      	mov	r0, r7
 8004a92:	f7ff fde9 	bl	8004668 <_malloc_r>
 8004a96:	4605      	mov	r5, r0
 8004a98:	2800      	cmp	r0, #0
 8004a9a:	d0f2      	beq.n	8004a82 <_realloc_r+0x1c>
 8004a9c:	4631      	mov	r1, r6
 8004a9e:	4622      	mov	r2, r4
 8004aa0:	f7ff ffd4 	bl	8004a4c <memcpy>
 8004aa4:	4631      	mov	r1, r6
 8004aa6:	4638      	mov	r0, r7
 8004aa8:	f7ff fd90 	bl	80045cc <_free_r>
 8004aac:	e7e9      	b.n	8004a82 <_realloc_r+0x1c>
 8004aae:	4635      	mov	r5, r6
 8004ab0:	e7e7      	b.n	8004a82 <_realloc_r+0x1c>

08004ab2 <__ascii_wctomb>:
 8004ab2:	b149      	cbz	r1, 8004ac8 <__ascii_wctomb+0x16>
 8004ab4:	2aff      	cmp	r2, #255	; 0xff
 8004ab6:	bf85      	ittet	hi
 8004ab8:	238a      	movhi	r3, #138	; 0x8a
 8004aba:	6003      	strhi	r3, [r0, #0]
 8004abc:	700a      	strbls	r2, [r1, #0]
 8004abe:	f04f 30ff 	movhi.w	r0, #4294967295
 8004ac2:	bf98      	it	ls
 8004ac4:	2001      	movls	r0, #1
 8004ac6:	4770      	bx	lr
 8004ac8:	4608      	mov	r0, r1
 8004aca:	4770      	bx	lr

08004acc <_malloc_usable_size_r>:
 8004acc:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8004ad0:	2800      	cmp	r0, #0
 8004ad2:	f1a0 0004 	sub.w	r0, r0, #4
 8004ad6:	bfbc      	itt	lt
 8004ad8:	580b      	ldrlt	r3, [r1, r0]
 8004ada:	18c0      	addlt	r0, r0, r3
 8004adc:	4770      	bx	lr
	...

08004ae0 <sqrt>:
 8004ae0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ae4:	ed2d 8b02 	vpush	{d8}
 8004ae8:	b08b      	sub	sp, #44	; 0x2c
 8004aea:	ec55 4b10 	vmov	r4, r5, d0
 8004aee:	f000 f851 	bl	8004b94 <__ieee754_sqrt>
 8004af2:	4b26      	ldr	r3, [pc, #152]	; (8004b8c <sqrt+0xac>)
 8004af4:	eeb0 8a40 	vmov.f32	s16, s0
 8004af8:	eef0 8a60 	vmov.f32	s17, s1
 8004afc:	f993 6000 	ldrsb.w	r6, [r3]
 8004b00:	1c73      	adds	r3, r6, #1
 8004b02:	d02a      	beq.n	8004b5a <sqrt+0x7a>
 8004b04:	4622      	mov	r2, r4
 8004b06:	462b      	mov	r3, r5
 8004b08:	4620      	mov	r0, r4
 8004b0a:	4629      	mov	r1, r5
 8004b0c:	f7fb ffc0 	bl	8000a90 <__aeabi_dcmpun>
 8004b10:	4607      	mov	r7, r0
 8004b12:	bb10      	cbnz	r0, 8004b5a <sqrt+0x7a>
 8004b14:	f04f 0800 	mov.w	r8, #0
 8004b18:	f04f 0900 	mov.w	r9, #0
 8004b1c:	4642      	mov	r2, r8
 8004b1e:	464b      	mov	r3, r9
 8004b20:	4620      	mov	r0, r4
 8004b22:	4629      	mov	r1, r5
 8004b24:	f7fb ff8c 	bl	8000a40 <__aeabi_dcmplt>
 8004b28:	b1b8      	cbz	r0, 8004b5a <sqrt+0x7a>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	4b18      	ldr	r3, [pc, #96]	; (8004b90 <sqrt+0xb0>)
 8004b30:	9301      	str	r3, [sp, #4]
 8004b32:	9708      	str	r7, [sp, #32]
 8004b34:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8004b38:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004b3c:	b9b6      	cbnz	r6, 8004b6c <sqrt+0x8c>
 8004b3e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004b42:	4668      	mov	r0, sp
 8004b44:	f000 f8d6 	bl	8004cf4 <matherr>
 8004b48:	b1d0      	cbz	r0, 8004b80 <sqrt+0xa0>
 8004b4a:	9b08      	ldr	r3, [sp, #32]
 8004b4c:	b11b      	cbz	r3, 8004b56 <sqrt+0x76>
 8004b4e:	f000 f8d3 	bl	8004cf8 <__errno>
 8004b52:	9b08      	ldr	r3, [sp, #32]
 8004b54:	6003      	str	r3, [r0, #0]
 8004b56:	ed9d 8b06 	vldr	d8, [sp, #24]
 8004b5a:	eeb0 0a48 	vmov.f32	s0, s16
 8004b5e:	eef0 0a68 	vmov.f32	s1, s17
 8004b62:	b00b      	add	sp, #44	; 0x2c
 8004b64:	ecbd 8b02 	vpop	{d8}
 8004b68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004b6c:	4642      	mov	r2, r8
 8004b6e:	464b      	mov	r3, r9
 8004b70:	4640      	mov	r0, r8
 8004b72:	4649      	mov	r1, r9
 8004b74:	f7fb fe1c 	bl	80007b0 <__aeabi_ddiv>
 8004b78:	2e02      	cmp	r6, #2
 8004b7a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004b7e:	d1e0      	bne.n	8004b42 <sqrt+0x62>
 8004b80:	f000 f8ba 	bl	8004cf8 <__errno>
 8004b84:	2321      	movs	r3, #33	; 0x21
 8004b86:	6003      	str	r3, [r0, #0]
 8004b88:	e7df      	b.n	8004b4a <sqrt+0x6a>
 8004b8a:	bf00      	nop
 8004b8c:	200003c4 	.word	0x200003c4
 8004b90:	08009880 	.word	0x08009880

08004b94 <__ieee754_sqrt>:
 8004b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b98:	ec55 4b10 	vmov	r4, r5, d0
 8004b9c:	4e54      	ldr	r6, [pc, #336]	; (8004cf0 <__ieee754_sqrt+0x15c>)
 8004b9e:	43ae      	bics	r6, r5
 8004ba0:	ee10 0a10 	vmov	r0, s0
 8004ba4:	462b      	mov	r3, r5
 8004ba6:	462a      	mov	r2, r5
 8004ba8:	4621      	mov	r1, r4
 8004baa:	d113      	bne.n	8004bd4 <__ieee754_sqrt+0x40>
 8004bac:	ee10 2a10 	vmov	r2, s0
 8004bb0:	462b      	mov	r3, r5
 8004bb2:	ee10 0a10 	vmov	r0, s0
 8004bb6:	4629      	mov	r1, r5
 8004bb8:	f7fb fcd0 	bl	800055c <__aeabi_dmul>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	4620      	mov	r0, r4
 8004bc2:	4629      	mov	r1, r5
 8004bc4:	f7fb fb18 	bl	80001f8 <__adddf3>
 8004bc8:	4604      	mov	r4, r0
 8004bca:	460d      	mov	r5, r1
 8004bcc:	ec45 4b10 	vmov	d0, r4, r5
 8004bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bd4:	2d00      	cmp	r5, #0
 8004bd6:	dc10      	bgt.n	8004bfa <__ieee754_sqrt+0x66>
 8004bd8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004bdc:	4330      	orrs	r0, r6
 8004bde:	d0f5      	beq.n	8004bcc <__ieee754_sqrt+0x38>
 8004be0:	b15d      	cbz	r5, 8004bfa <__ieee754_sqrt+0x66>
 8004be2:	ee10 2a10 	vmov	r2, s0
 8004be6:	462b      	mov	r3, r5
 8004be8:	4620      	mov	r0, r4
 8004bea:	4629      	mov	r1, r5
 8004bec:	f7fb fb02 	bl	80001f4 <__aeabi_dsub>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	f7fb fddc 	bl	80007b0 <__aeabi_ddiv>
 8004bf8:	e7e6      	b.n	8004bc8 <__ieee754_sqrt+0x34>
 8004bfa:	151b      	asrs	r3, r3, #20
 8004bfc:	d10c      	bne.n	8004c18 <__ieee754_sqrt+0x84>
 8004bfe:	2a00      	cmp	r2, #0
 8004c00:	d06d      	beq.n	8004cde <__ieee754_sqrt+0x14a>
 8004c02:	2000      	movs	r0, #0
 8004c04:	02d6      	lsls	r6, r2, #11
 8004c06:	d56e      	bpl.n	8004ce6 <__ieee754_sqrt+0x152>
 8004c08:	1e44      	subs	r4, r0, #1
 8004c0a:	1b1b      	subs	r3, r3, r4
 8004c0c:	f1c0 0420 	rsb	r4, r0, #32
 8004c10:	fa21 f404 	lsr.w	r4, r1, r4
 8004c14:	4322      	orrs	r2, r4
 8004c16:	4081      	lsls	r1, r0
 8004c18:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004c1c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8004c20:	07dd      	lsls	r5, r3, #31
 8004c22:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004c26:	bf42      	ittt	mi
 8004c28:	0052      	lslmi	r2, r2, #1
 8004c2a:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8004c2e:	0049      	lslmi	r1, r1, #1
 8004c30:	1058      	asrs	r0, r3, #1
 8004c32:	2500      	movs	r5, #0
 8004c34:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8004c38:	441a      	add	r2, r3
 8004c3a:	0049      	lsls	r1, r1, #1
 8004c3c:	2316      	movs	r3, #22
 8004c3e:	462c      	mov	r4, r5
 8004c40:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8004c44:	19a7      	adds	r7, r4, r6
 8004c46:	4297      	cmp	r7, r2
 8004c48:	bfde      	ittt	le
 8004c4a:	1bd2      	suble	r2, r2, r7
 8004c4c:	19bc      	addle	r4, r7, r6
 8004c4e:	19ad      	addle	r5, r5, r6
 8004c50:	0052      	lsls	r2, r2, #1
 8004c52:	3b01      	subs	r3, #1
 8004c54:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8004c58:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004c5c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004c60:	d1f0      	bne.n	8004c44 <__ieee754_sqrt+0xb0>
 8004c62:	f04f 0e20 	mov.w	lr, #32
 8004c66:	469c      	mov	ip, r3
 8004c68:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004c6c:	42a2      	cmp	r2, r4
 8004c6e:	eb06 070c 	add.w	r7, r6, ip
 8004c72:	dc02      	bgt.n	8004c7a <__ieee754_sqrt+0xe6>
 8004c74:	d112      	bne.n	8004c9c <__ieee754_sqrt+0x108>
 8004c76:	428f      	cmp	r7, r1
 8004c78:	d810      	bhi.n	8004c9c <__ieee754_sqrt+0x108>
 8004c7a:	2f00      	cmp	r7, #0
 8004c7c:	eb07 0c06 	add.w	ip, r7, r6
 8004c80:	da34      	bge.n	8004cec <__ieee754_sqrt+0x158>
 8004c82:	f1bc 0f00 	cmp.w	ip, #0
 8004c86:	db31      	blt.n	8004cec <__ieee754_sqrt+0x158>
 8004c88:	f104 0801 	add.w	r8, r4, #1
 8004c8c:	1b12      	subs	r2, r2, r4
 8004c8e:	428f      	cmp	r7, r1
 8004c90:	bf88      	it	hi
 8004c92:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8004c96:	1bc9      	subs	r1, r1, r7
 8004c98:	4433      	add	r3, r6
 8004c9a:	4644      	mov	r4, r8
 8004c9c:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8004ca0:	f1be 0e01 	subs.w	lr, lr, #1
 8004ca4:	443a      	add	r2, r7
 8004ca6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004caa:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004cae:	d1dd      	bne.n	8004c6c <__ieee754_sqrt+0xd8>
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	d006      	beq.n	8004cc2 <__ieee754_sqrt+0x12e>
 8004cb4:	1c5c      	adds	r4, r3, #1
 8004cb6:	bf13      	iteet	ne
 8004cb8:	3301      	addne	r3, #1
 8004cba:	3501      	addeq	r5, #1
 8004cbc:	4673      	moveq	r3, lr
 8004cbe:	f023 0301 	bicne.w	r3, r3, #1
 8004cc2:	106a      	asrs	r2, r5, #1
 8004cc4:	085b      	lsrs	r3, r3, #1
 8004cc6:	07e9      	lsls	r1, r5, #31
 8004cc8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8004ccc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8004cd0:	bf48      	it	mi
 8004cd2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8004cd6:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8004cda:	461c      	mov	r4, r3
 8004cdc:	e776      	b.n	8004bcc <__ieee754_sqrt+0x38>
 8004cde:	0aca      	lsrs	r2, r1, #11
 8004ce0:	3b15      	subs	r3, #21
 8004ce2:	0549      	lsls	r1, r1, #21
 8004ce4:	e78b      	b.n	8004bfe <__ieee754_sqrt+0x6a>
 8004ce6:	0052      	lsls	r2, r2, #1
 8004ce8:	3001      	adds	r0, #1
 8004cea:	e78b      	b.n	8004c04 <__ieee754_sqrt+0x70>
 8004cec:	46a0      	mov	r8, r4
 8004cee:	e7cd      	b.n	8004c8c <__ieee754_sqrt+0xf8>
 8004cf0:	7ff00000 	.word	0x7ff00000

08004cf4 <matherr>:
 8004cf4:	2000      	movs	r0, #0
 8004cf6:	4770      	bx	lr

08004cf8 <__errno>:
 8004cf8:	4b01      	ldr	r3, [pc, #4]	; (8004d00 <__errno+0x8>)
 8004cfa:	6818      	ldr	r0, [r3, #0]
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	200001f4 	.word	0x200001f4

08004d04 <_sbrk>:
 8004d04:	4b04      	ldr	r3, [pc, #16]	; (8004d18 <_sbrk+0x14>)
 8004d06:	6819      	ldr	r1, [r3, #0]
 8004d08:	4602      	mov	r2, r0
 8004d0a:	b909      	cbnz	r1, 8004d10 <_sbrk+0xc>
 8004d0c:	4903      	ldr	r1, [pc, #12]	; (8004d1c <_sbrk+0x18>)
 8004d0e:	6019      	str	r1, [r3, #0]
 8004d10:	6818      	ldr	r0, [r3, #0]
 8004d12:	4402      	add	r2, r0
 8004d14:	601a      	str	r2, [r3, #0]
 8004d16:	4770      	bx	lr
 8004d18:	200003f4 	.word	0x200003f4
 8004d1c:	2001316c 	.word	0x2001316c

08004d20 <_init>:
 8004d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d22:	bf00      	nop
 8004d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d26:	bc08      	pop	{r3}
 8004d28:	469e      	mov	lr, r3
 8004d2a:	4770      	bx	lr

08004d2c <_fini>:
 8004d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d2e:	bf00      	nop
 8004d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d32:	bc08      	pop	{r3}
 8004d34:	469e      	mov	lr, r3
 8004d36:	4770      	bx	lr
